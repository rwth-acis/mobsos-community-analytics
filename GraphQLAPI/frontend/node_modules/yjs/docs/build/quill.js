(function () {
  'use strict';

  /**
   * @module utils
   */

  const structs = new Map();
  const references = new Map();

  /**
   * Register a new Yjs types. The same type must be defined with the same
   * reference on all clients!
   *
   * @param {Number} reference
   * @param {Function} structConstructor
   *
   * @public
   */
  const registerStruct = (reference, structConstructor) => {
    structs.set(reference, structConstructor);
    references.set(structConstructor, reference);
  };

  /**
   * @private
   */
  const getStruct = (reference) => {
    return structs.get(reference)
  };

  /**
   * @private
   */
  const getStructReference = (typeConstructor) => {
    return references.get(typeConstructor)
  };

  /**
   * @module globals
   */

  /* eslint-env browser */

  const Uint8Array_ = Uint8Array;

  const createUint8ArrayFromLen = len => new Uint8Array_(len);

  /**
   * Create Uint8Array with initial content from buffer
   */
  const createUint8ArrayFromBuffer = (buffer, byteOffset, length) => new Uint8Array_(buffer, byteOffset, length);

  /**
   * Create Uint8Array with initial content from buffer
   */
  const createUint8ArrayFromArrayBuffer = arraybuffer => new Uint8Array_(arraybuffer);

  /**
   * @module decoding
   */

  /**
   * A Decoder handles the decoding of an ArrayBuffer.
   */
  class Decoder {
    /**
     * @param {ArrayBuffer} buffer Binary data to decode
     */
    constructor (buffer) {
      this.arr = new Uint8Array(buffer);
      this.pos = 0;
    }
  }

  /**
   * @function
   * @param {ArrayBuffer} buffer
   * @return {Decoder}
   */
  const createDecoder = buffer => new Decoder(buffer);

  /**
   * Read one byte as unsigned integer.
   * @function
   * @param {Decoder} decoder The decoder instance
   * @return {number} Unsigned 8-bit integer
   */
  const readUint8 = decoder => decoder.arr[decoder.pos++];

  /**
   * Read 4 bytes as unsigned integer.
   *
   * @function
   * @param {Decoder} decoder
   * @return {number} An unsigned integer.
   */
  const readUint32 = decoder => {
    let uint =
      decoder.arr[decoder.pos] +
      (decoder.arr[decoder.pos + 1] << 8) +
      (decoder.arr[decoder.pos + 2] << 16) +
      (decoder.arr[decoder.pos + 3] << 24);
    decoder.pos += 4;
    return uint
  };

  /**
   * Read unsigned integer (32bit) with variable length.
   * 1/8th of the storage is used as encoding overhead.
   *  * numbers < 2^7 is stored in one bytlength
   *  * numbers < 2^14 is stored in two bylength
   *
   * @function
   * @param {Decoder} decoder
   * @return {number} An unsigned integer.length
   */
  const readVarUint = decoder => {
    let num = 0;
    let len = 0;
    while (true) {
      let r = decoder.arr[decoder.pos++];
      num = num | ((r & 0b1111111) << len);
      len += 7;
      if (r < 1 << 7) {
        return num >>> 0 // return unsigned number!
      }
      if (len > 35) {
        throw new Error('Integer out of range!')
      }
    }
  };

  /**
   * Read string of variable length
   * * varUint is used to store the length of the string
   *
   * Transforming utf8 to a string is pretty expensive. The code performs 10x better
   * when String.fromCodePoint is fed with all characters as arguments.
   * But most environments have a maximum number of arguments per functions.
   * For effiency reasons we apply a maximum of 10000 characters at once.
   *
   * @function
   * @param {Decoder} decoder
   * @return {String} The read String.
   */
  const readVarString = decoder => {
    let remainingLen = readVarUint(decoder);
    let encodedString = '';
    while (remainingLen > 0) {
      const nextLen = remainingLen < 10000 ? remainingLen : 10000;
      const bytes = new Array(nextLen);
      for (let i = 0; i < nextLen; i++) {
        bytes[i] = decoder.arr[decoder.pos++];
      }
      encodedString += String.fromCodePoint.apply(null, bytes);
      remainingLen -= nextLen;
    }
    return decodeURIComponent(escape(encodedString))
  };

  /**
   * @module encoding
   */

  const bits7 = 0b1111111;
  const bits8 = 0b11111111;

  /**
   * A BinaryEncoder handles the encoding to an ArrayBuffer.
   */
  class Encoder {
    constructor () {
      this.cpos = 0;
      this.cbuf = createUint8ArrayFromLen(1000);
      this.bufs = [];
    }
  }

  /**
   * @function
   * @return {Encoder}
   */
  const createEncoder = () => new Encoder();

  /**
   * The current length of the encoded data.
   *
   * @function
   * @param {Encoder} encoder
   * @return {number}
   */
  const length = encoder => {
    let len = encoder.cpos;
    for (let i = 0; i < encoder.bufs.length; i++) {
      len += encoder.bufs[i].length;
    }
    return len
  };

  /**
   * Transform to ArrayBuffer. TODO: rename to .toArrayBuffer
   *
   * @function
   * @param {Encoder} encoder
   * @return {ArrayBuffer} The created ArrayBuffer.
   */
  const toBuffer = encoder => {
    const uint8arr = createUint8ArrayFromLen(length(encoder));
    let curPos = 0;
    for (let i = 0; i < encoder.bufs.length; i++) {
      let d = encoder.bufs[i];
      uint8arr.set(d, curPos);
      curPos += d.length;
    }
    uint8arr.set(createUint8ArrayFromBuffer(encoder.cbuf.buffer, 0, encoder.cpos), curPos);
    return uint8arr.buffer
  };

  /**
   * Write one byte to the encoder.
   *
   * @function
   * @param {Encoder} encoder
   * @param {number} num The byte that is to be encoded.
   */
  const write = (encoder, num) => {
    if (encoder.cpos === encoder.cbuf.length) {
      encoder.bufs.push(encoder.cbuf);
      encoder.cbuf = createUint8ArrayFromLen(encoder.cbuf.length * 2);
      encoder.cpos = 0;
    }
    encoder.cbuf[encoder.cpos++] = num;
  };

  /**
   * Write one byte at a specific position.
   * Position must already be written (i.e. encoder.length > pos)
   *
   * @function
   * @param {Encoder} encoder
   * @param {number} pos Position to which to write data
   * @param {number} num Unsigned 8-bit integer
   */
  const set = (encoder, pos, num) => {
    let buffer = null;
    // iterate all buffers and adjust position
    for (let i = 0; i < encoder.bufs.length && buffer === null; i++) {
      const b = encoder.bufs[i];
      if (pos < b.length) {
        buffer = b; // found buffer
      } else {
        pos -= b.length;
      }
    }
    if (buffer === null) {
      // use current buffer
      buffer = encoder.cbuf;
    }
    buffer[pos] = num;
  };

  /**
   * Write one byte as an unsigned integer.
   *
   * @function
   * @param {Encoder} encoder
   * @param {number} num The number that is to be encoded.
   */
  const writeUint8 = (encoder, num) => write(encoder, num & bits8);

  /**
   * Write two bytes as an unsigned integer
   *
   * @function
   * @param {Encoder} encoder
   * @param {number} num The number that is to be encoded.
   */
  const writeUint32 = (encoder, num) => {
    for (let i = 0; i < 4; i++) {
      write(encoder, num & bits8);
      num >>>= 8;
    }
  };

  /**
   * Write two bytes as an unsigned integer at a specific location.
   *
   * @function
   * @param {Encoder} encoder
   * @param {number} pos The location where the data will be written.
   * @param {number} num The number that is to be encoded.
   */
  const setUint32 = (encoder, pos, num) => {
    for (let i = 0; i < 4; i++) {
      set(encoder, pos + i, num & bits8);
      num >>>= 8;
    }
  };

  /**
   * Write a variable length unsigned integer.
   *
   * Encodes integers in the range from [0, 4294967295] / [0, 0xffffffff]. (max 32 bit unsigned integer)
   *
   * @function
   * @param {Encoder} encoder
   * @param {number} num The number that is to be encoded.
   */
  const writeVarUint = (encoder, num) => {
    while (num >= 0b10000000) {
      write(encoder, 0b10000000 | (bits7 & num));
      num >>>= 7;
    }
    write(encoder, bits7 & num);
  };

  /**
   * Write a variable length string.
   *
   * @function
   * @param {Encoder} encoder
   * @param {String} str The string that is to be encoded.
   */
  const writeVarString = (encoder, str) => {
    const encodedString = unescape(encodeURIComponent(str));
    const len = encodedString.length;
    writeVarUint(encoder, len);
    for (let i = 0; i < len; i++) {
      write(encoder, encodedString.codePointAt(i));
    }
  };

  /**
   * Write the content of another Encoder.
   *
   * TODO: can be improved!
   *
   * @function
   * @param {Encoder} encoder The enUint8Arr
   * @param {Encoder} append The BinaryEncoder to be written.
   */
  const writeBinaryEncoder = (encoder, append) => writeArrayBuffer(encoder, toBuffer(append));

  /**
   * Append an arrayBuffer to the encoder.
   *
   * @function
   * @param {Encoder} encoder
   * @param {ArrayBuffer} arrayBuffer
   */
  const writeArrayBuffer = (encoder, arrayBuffer) => {
    const prevBufferLen = encoder.cbuf.length;
    // TODO: Append to cbuf if possible
    encoder.bufs.push(createUint8ArrayFromBuffer(encoder.cbuf.buffer, 0, encoder.cpos));
    encoder.bufs.push(createUint8ArrayFromArrayBuffer(arrayBuffer));
    encoder.cbuf = createUint8ArrayFromLen(prevBufferLen);
    encoder.cpos = 0;
  };

  /**
   * @module utils
   */

  class ID {
    constructor (user, clock) {
      this.user = user; // TODO: rename to client
      this.clock = clock;
    }
    clone () {
      return new ID(this.user, this.clock)
    }
    equals (id) {
      return id !== null && id.user === this.user && id.clock === this.clock
    }
    lessThan (id) {
      if (id.constructor === ID) {
        return this.user < id.user || (this.user === id.user && this.clock < id.clock)
      } else {
        return false
      }
    }
    /**
     * @param {encoding.Encoder} encoder
     */
    encode (encoder) {
      writeVarUint(encoder, this.user);
      writeVarUint(encoder, this.clock);
    }
  }

  const createID = (user, clock) => new ID(user, clock);

  const RootFakeUserID = 0xFFFFFF;

  class RootID {
    constructor (name, typeConstructor) {
      this.user = RootFakeUserID;
      this.name = name;
      this.type = getStructReference(typeConstructor);
    }
    equals (id) {
      return id !== null && id.user === this.user && id.name === this.name && id.type === this.type
    }
    lessThan (id) {
      if (id.constructor === RootID) {
        return this.user < id.user || (this.user === id.user && (this.name < id.name || (this.name === id.name && this.type < id.type)))
      } else {
        return true
      }
    }
    /**
     * @param {encoding.Encoder} encoder
     */
    encode (encoder) {
      writeVarUint(encoder, this.user);
      writeVarString(encoder, this.name);
      writeVarUint(encoder, this.type);
    }
  }

  /**
   * Create a new root id.
   *
   * @example
   *   y.define('name', Y.Array) // name, and typeConstructor
   *
   * @param {string} name
   * @param {Function} typeConstructor must be defined in structReferences
   */
  const createRootID = (name, typeConstructor) => new RootID(name, typeConstructor);

  /**
   * Read ID.
   * * If first varUint read is 0xFFFFFF a RootID is returned.
   * * Otherwise an ID is returned
   *
   * @param {decoding.Decoder} decoder
   * @return {ID|RootID}
   */
  const decode = decoder => {
    const user = readVarUint(decoder);
    if (user === RootFakeUserID) {
      // read property name and type id
      const rid = createRootID(readVarString(decoder), null);
      rid.type = readVarUint(decoder);
      return rid
    }
    return createID(user, readVarUint(decoder))
  };

  const writeStructToTransaction = (transaction, struct) => {
    transaction.encodedStructsLen++;
    struct._toBinary(transaction.encodedStructs);
  };

  /**
   * @private
   * Delete all items in an ID-range.
   * Does not create delete operations!
   * TODO: implement getItemCleanStartNode for better performance (only one lookup).
   */
  const deleteItemRange = (y, user, clock, range, gcChildren) => {
    let item = y.os.getItemCleanStart(createID(user, clock));
    if (item !== null) {
      if (!item._deleted) {
        item._splitAt(y, range);
        item._delete(y, false, true);
      }
      let itemLen = item._length;
      range -= itemLen;
      clock += itemLen;
      if (range > 0) {
        let node = y.os.findNode(createID(user, clock));
        while (node !== null && node.val !== null && range > 0 && node.val._id.equals(createID(user, clock))) {
          const nodeVal = node.val;
          if (!nodeVal._deleted) {
            nodeVal._splitAt(y, range);
            nodeVal._delete(y, false, gcChildren);
          }
          const nodeLen = nodeVal._length;
          range -= nodeLen;
          clock += nodeLen;
          node = node.next();
        }
      }
    }
  };

  /**
   * Stringify an item id.
   *
   * @param {ID.ID | ID.RootID} id
   * @return {string}
   */
  const stringifyID = id => id instanceof ID ? `(${id.user},${id.clock})` : `(${id.name},${id.type})`;

  /**
   * Stringify an item as ID. HHere, an item could also be a Yjs instance (e.g. item._parent).
   *
   * @param {Item | Y | null} item
   * @return {string}
   */
  const stringifyItemID = item => {
    let result;
    if (item === null) {
      result = '()';
    } else if (item._id != null) {
      result = stringifyID(item._id);
    } else {
      // must be a Yjs instance
      // Don't include Y in this module, so we prevent circular dependencies.
      result = 'y';
    }
    return result
  };

  /**
   * Helper utility to convert an item to a readable format.
   *
   * @param {String} name The name of the item class (YText, ItemString, ..).
   * @param {Item} item The item instance.
   * @param {String} [append] Additional information to append to the returned
   *                          string.
   * @return {String} A readable string that represents the item object.
   *
   */
  const logItemHelper = (name, item, append) => {
    const left = item._left !== null ? stringifyID(item._left._lastId) : '()';
    const origin = item._origin !== null ? stringifyID(item._origin._lastId) : '()';
    return `${name}(id:${stringifyItemID(item)},left:${left},origin:${origin},right:${stringifyItemID(item._right)},parent:${stringifyItemID(item._parent)},parentSub:${item._parentSub}${append !== undefined ? ' - ' + append : ''})`
  };

  /**
   * @module structs
   */

  /**
   * @private
   * A Delete change is not a real Item, but it provides the same interface as an
   * Item. The only difference is that it will not be saved in the ItemStore
   * (OperationStore), but instead it is safed in the DeleteStore.
   */
  class Delete {
    constructor () {
      /**
       * @type {ID.ID}
       */
      this._targetID = null;
      /**
       * @type {Item}
       */
      this._target = null;
      this._length = null;
    }

    /**
     * @private
     * Read the next Item in a Decoder and fill this Item with the read data.
     *
     * This is called when data is received from a remote peer.
     *
     * @param {Y} y The Yjs instance that this Item belongs to.
     * @param {decoding.Decoder} decoder The decoder object to read data from.
     */
    _fromBinary (y, decoder) {
      // TODO: set target, and add it to missing if not found
      // There is an edge case in p2p networks!
      /**
       * @type {any}
       */
      const targetID = decode(decoder);
      this._targetID = targetID;
      this._length = readVarUint(decoder);
      if (y.os.getItem(targetID) === null) {
        return [targetID]
      } else {
        return []
      }
    }

    /**
     * @private
     * Transform the properties of this type to binary and write it to an
     * BinaryEncoder.
     *
     * This is called when this Item is sent to a remote peer.
     *
     * @param {encoding.Encoder} encoder The encoder to write data to.
     */
    _toBinary (encoder) {
      writeUint8(encoder, getStructReference(this.constructor));
      this._targetID.encode(encoder);
      writeVarUint(encoder, this._length);
    }

    /**
     * @private
     * Integrates this Item into the shared structure.
     *
     * This method actually applies the change to the Yjs instance. In the case of
     * Delete it marks the delete target as deleted.
     *
     * * If created remotely (a remote user deleted something),
     *   this Delete is applied to all structs in id-range.
     * * If created lokally (e.g. when y-array deletes a range of elements),
     *   this struct is broadcasted only (it is already executed)
     */
    _integrate (y, locallyCreated = false) {
      if (!locallyCreated) {
        // from remote
        const id = this._targetID;
        deleteItemRange(y, id.user, id.clock, this._length, false);
      }
      writeStructToTransaction(y._transaction, this);
    }

    /**
     * Transform this YXml Type to a readable format.
     * Useful for logging as all Items and Delete implement this method.
     *
     * @private
     */
    _logString () {
      return `Delete - target: ${stringifyID(this._targetID)}, len: ${this._length}`
    }
  }

  /**
   * @module structs
   */
  // import { Y } from '../utils/Y.js' // eslint-disable-line

  // TODO should have the same base class as Item
  class GC {
    constructor () {
      /**
       * @type {ID.ID}
       */
      this._id = null;
      this._length = 0;
    }

    get _redone () {
      return null
    }

    get _deleted () {
      return true
    }

    _integrate (y) {
      const id = this._id;
      const userState = y.ss.getState(id.user);
      if (id.clock === userState) {
        y.ss.setState(id.user, id.clock + this._length);
      }
      y.ds.mark(this._id, this._length, true);
      let n = y.os.put(this);
      const prev = n.prev().val;
      if (prev !== null && prev.constructor === GC && prev._id.user === n.val._id.user && prev._id.clock + prev._length === n.val._id.clock) {
        // TODO: do merging for all items!
        prev._length += n.val._length;
        y.os.delete(n.val._id);
        n = prev;
      }
      if (n.val) {
        n = n.val;
      }
      const next = y.os.findNext(n._id);
      if (next !== null && next.constructor === GC && next._id.user === n._id.user && next._id.clock === n._id.clock + n._length) {
        n._length += next._length;
        y.os.delete(next._id);
      }
      if (id.user !== RootFakeUserID) {
        writeStructToTransaction(y._transaction, this);
      }
    }

    /**
     * Transform the properties of this type to binary and write it to an
     * BinaryEncoder.
     *
     * This is called when this Item is sent to a remote peer.
     *
     * @param {encoding.Encoder} encoder The encoder to write data to.
     * @private
     */
    _toBinary (encoder) {
      writeUint8(encoder, getStructReference(this.constructor));
      this._id.encode(encoder);
      writeVarUint(encoder, this._length);
    }

    /**
     * Read the next Item in a Decoder and fill this Item with the read data.
     *
     * This is called when data is received from a remote peer.
     *
     * @param {Y} y The Yjs instance that this Item belongs to.
     * @param {decoding.Decoder} decoder The decoder object to read data from.
     * @private
     */
    _fromBinary (y, decoder) {
      /**
       * @type {any}
       */
      const id = decode(decoder);
      this._id = id;
      this._length = readVarUint(decoder);
      const missing = [];
      if (y.ss.getState(id.user) < id.clock) {
        missing.push(createID(id.user, id.clock - 1));
      }
      return missing
    }

    _splitAt () {
      return this
    }

    _clonePartial (diff) {
      const gc = new GC();
      gc._id = createID(this._id.user, this._id.clock + diff);
      gc._length = this._length - diff;
      return gc
    }
  }

  /**
   * @module structs
   */
  // import { Type } from './Type.js' // eslint-disable-line

  /**
   * @private
   */
  const transactionTypeChanged = (y, type, sub) => {
    if (type !== y && !type._deleted && !y._transaction.newTypes.has(type)) {
      const changedTypes = y._transaction.changedTypes;
      let subs = changedTypes.get(type);
      if (subs === undefined) {
        // create if it doesn't exist yet
        subs = new Set();
        changedTypes.set(type, subs);
      }
      subs.add(sub);
    }
  };

  /**
   * Helper utility to split an Item (see {@link Item#_splitAt})
   * - copies all properties from a to b
   * - connects a to b
   * - assigns the correct _id
   * - saves b to os
   * @private
   */
  const splitHelper = (y, a, b, diff) => {
    const aID = a._id;
    b._id = createID(aID.user, aID.clock + diff);
    b._origin = a;
    b._left = a;
    b._right = a._right;
    if (b._right !== null) {
      b._right._left = b;
    }
    b._right_origin = a._right_origin;
    // do not set a._right_origin, as this will lead to problems when syncing
    a._right = b;
    b._parent = a._parent;
    b._parentSub = a._parentSub;
    b._deleted = a._deleted;
    // now search all relevant items to the right and update origin
    // if origin is not it foundOrigins, we don't have to search any longer
    let foundOrigins = new Set();
    foundOrigins.add(a);
    let o = b._right;
    while (o !== null && foundOrigins.has(o._origin)) {
      if (o._origin === a) {
        o._origin = b;
      }
      foundOrigins.add(o);
      o = o._right;
    }
    y.os.put(b);
    if (y._transaction !== null) {
      if (y._transaction.newTypes.has(a)) {
        y._transaction.newTypes.add(b);
      } else if (y._transaction.deletedStructs.has(a)) {
        y._transaction.deletedStructs.add(b);
      }
    }
  };

  /**
   * Abstract class that represents any content.
   */
  class Item {
    constructor () {
      /**
       * The uniqe identifier of this type.
       * @type {ID.ID | ID.RootID}
       */
      this._id = null;
      /**
       * The item that was originally to the left of this item.
       * @type {Item}
       */
      this._origin = null;
      /**
       * The item that is currently to the left of this item.
       * @type {Item}
       */
      this._left = null;
      /**
       * The item that is currently to the right of this item.
       * @type {Item}
       */
      this._right = null;
      /**
       * The item that was originally to the right of this item.
       * @type {Item}
       */
      this._right_origin = null;
      /**
       * The parent type.
       * @type {Y|Type}
       */
      this._parent = null;
      /**
       * If the parent refers to this item with some kind of key (e.g. YMap, the
       * key is specified here. The key is then used to refer to the list in which
       * to insert this item. If `parentSub = null` type._start is the list in
       * which to insert to. Otherwise it is `parent._map`.
       * @type {String}
       */
      this._parentSub = null;
      /**
       * Whether this item was deleted or not.
       * @type {Boolean}
       */
      this._deleted = false;
      /**
       * If this type's effect is reundone this type refers to the type that undid
       * this operation.
       * @type {Type}
       */
      this._redone = null;
    }

    /**
     * Returns the next non-deleted item
     * @private
     */
    get _next () {
      let n = this._right;
      while (n !== null && n._deleted) {
        n = n._right;
      }
      return n
    }

    /**
     * Returns the previous non-deleted item
     * @private
     */
    get _prev () {
      let n = this._left;
      while (n !== null && n._deleted) {
        n = n._left;
      }
      return n
    }

    /**
     * Creates an Item with the same effect as this Item (without position effect)
     *
     * @private
     */
    _copy () {
      const C = this.constructor;
      return new C()
    }

    /**
     * Redoes the effect of this operation.
     *
     * @param {Y} y The Yjs instance.
     * @param {Set<Item>} redoitems
     *
     * @private
     */
    _redo (y, redoitems) {
      if (this._redone !== null) {
        return this._redone
      }
      if (!(this._parent instanceof Item)) {
        return
      }
      let struct = this._copy();
      let left, right;
      if (this._parentSub === null) {
        // Is an array item. Insert at the old position
        left = this._left;
        right = this;
      } else {
        // Is a map item. Insert at the start
        left = null;
        right = this._parent._map.get(this._parentSub);
        right._delete(y);
      }
      let parent = this._parent;
      // make sure that parent is redone
      if (parent._deleted === true && parent._redone === null) {
        // try to undo parent if it will be undone anyway
        if (!redoitems.has(parent) || !parent._redo(y, redoitems)) {
          return false
        }
      }
      if (parent._redone !== null) {
        parent = parent._redone;
        // find next cloned_redo items
        while (left !== null) {
          if (left._redone !== null && left._redone._parent === parent) {
            left = left._redone;
            break
          }
          left = left._left;
        }
        while (right !== null) {
          if (right._redone !== null && right._redone._parent === parent) {
            right = right._redone;
          }
          right = right._right;
        }
      }
      struct._origin = left;
      struct._left = left;
      struct._right = right;
      struct._right_origin = right;
      struct._parent = parent;
      struct._parentSub = this._parentSub;
      struct._integrate(y);
      this._redone = struct;
      return true
    }

    /**
     * Computes the last content address of this Item.
     *
     * @private
     */
    get _lastId () {
      /**
       * @type {any}
       */
      const id = this._id;
      return createID(id.user, id.clock + this._length - 1)
    }

    /**
     * Computes the length of this Item.
     *
     * @private
     */
    get _length () {
      return 1
    }

    /**
     * Should return false if this Item is some kind of meta information
     * (e.g. format information).
     *
     * * Whether this Item should be addressable via `yarray.get(i)`
     * * Whether this Item should be counted when computing yarray.length
     *
     * @private
     */
    get _countable () {
      return true
    }

    /**
     * Splits this Item so that another Items can be inserted in-between.
     * This must be overwritten if _length > 1
     * Returns right part after split
     * * diff === 0 => this
     * * diff === length => this._right
     * * otherwise => split _content and return right part of split
     * (see {@link ItemJSON}/{@link ItemString} for implementation)
     *
     * @private
     */
    _splitAt (y, diff) {
      if (diff === 0) {
        return this
      }
      return this._right
    }

    /**
     * Mark this Item as deleted.
     *
     * @param {Y} y The Yjs instance
     * @param {boolean} createDelete Whether to propagate a message that this
     *                               Type was deleted.
     * @param {boolean} gcChildren
     *
     * @private
     */
    _delete (y, createDelete = true, gcChildren) {
      if (!this._deleted) {
        const parent = this._parent;
        const len = this._length;
        // adjust the length of parent
        if (parent.length !== undefined && this._countable) {
          parent.length -= len;
        }
        this._deleted = true;
        y.ds.mark(this._id, this._length, false);
        let del = new Delete();
        del._targetID = this._id;
        del._length = len;
        if (createDelete) {
          // broadcast and persists Delete
          del._integrate(y, true);
        }
        transactionTypeChanged(y, parent, this._parentSub);
        y._transaction.deletedStructs.add(this);
      }
    }

    _gcChildren (y) {}

    _gc (y) {
      const gc = new GC();
      gc._id = this._id;
      gc._length = this._length;
      y.os.delete(this._id);
      gc._integrate(y);
    }

    /**
     * This is called right before this Item receives any children.
     * It can be overwritten to apply pending changes before applying remote changes
     *
     * @private
     */
    _beforeChange () {
      // nop
    }

    /**
     * Integrates this Item into the shared structure.
     *
     * This method actually applies the change to the Yjs instance. In case of
     * Item it connects _left and _right to this Item and calls the
     * {@link Item#beforeChange} method.
     *
     * * Integrate the struct so that other types/structs can see it
     * * Add this struct to y.os
     * * Check if this is struct deleted
     *
     * @param {Y} y
     *
     * @private
     */
    _integrate (y) {
      y._transaction.newTypes.add(this);
      /**
       * @type {any}
       */
      const parent = this._parent;
      /**
       * @type {any}
       */
      const selfID = this._id;
      const user = selfID === null ? y.userID : selfID.user;
      const userState = y.ss.getState(user);
      if (selfID === null) {
        this._id = y.ss.getNextID(this._length);
      } else if (selfID.user === RootFakeUserID) {
        // is parent
        return
      } else if (selfID.clock < userState) {
        // already applied..
        return
      } else if (selfID.clock === userState) {
        y.ss.setState(selfID.user, userState + this._length);
      } else {
        // missing content from user
        throw new Error('Can not apply yet!')
      }
      if (!parent._deleted && !y._transaction.changedTypes.has(parent) && !y._transaction.newTypes.has(parent)) {
        // this is the first time parent is updated
        // or this types is new
        parent._beforeChange();
      }

      /*
      # $this has to find a unique position between origin and the next known character
      # case 1: $origin equals $o.origin: the $creator parameter decides if left or right
      #         let $OL= [o1,o2,o3,o4], whereby $this is to be inserted between o1 and o4
      #         o2,o3 and o4 origin is 1 (the position of o2)
      #         there is the case that $this.creator < o2.creator, but o3.creator < $this.creator
      #         then o2 knows o3. Since on another client $OL could be [o1,o3,o4] the problem is complex
      #         therefore $this would be always to the right of o3
      # case 2: $origin < $o.origin
      #         if current $this insert_position > $o origin: $this ins
      #         else $insert_position will not change
      #         (maybe we encounter case 1 later, then this will be to the right of $o)
      # case 3: $origin > $o.origin
      #         $this insert_position is to the left of $o (forever!)
      */
      // handle conflicts
      let o;
      // set o to the first conflicting item
      if (this._left !== null) {
        o = this._left._right;
      } else if (this._parentSub !== null) {
        o = parent._map.get(this._parentSub) || null;
      } else {
        o = parent._start;
      }
      let conflictingItems = new Set();
      let itemsBeforeOrigin = new Set();
      // Let c in conflictingItems, b in itemsBeforeOrigin
      // ***{origin}bbbb{this}{c,b}{c,b}{o}***
      // Note that conflictingItems is a subset of itemsBeforeOrigin
      while (o !== null && o !== this._right) {
        itemsBeforeOrigin.add(o);
        conflictingItems.add(o);
        if (this._origin === o._origin) {
          // case 1
          if (o._id.user < this._id.user) {
            this._left = o;
            conflictingItems.clear();
          }
        } else if (itemsBeforeOrigin.has(o._origin)) {
          // case 2
          if (!conflictingItems.has(o._origin)) {
            this._left = o;
            conflictingItems.clear();
          }
        } else {
          break
        }
        // TODO: try to use right_origin instead.
        // Then you could basically omit conflictingItems!
        // Note: you probably can't use right_origin in every case.. only when setting _left
        o = o._right;
      }
      // reconnect left/right + update parent map/start if necessary
      const parentSub = this._parentSub;
      if (this._left === null) {
        let right;
        if (parentSub !== null) {
          const pmap = parent._map;
          right = pmap.get(parentSub) || null;
          pmap.set(parentSub, this);
        } else {
          right = parent._start;
          parent._start = this;
        }
        this._right = right;
        if (right !== null) {
          right._left = this;
        }
      } else {
        const left = this._left;
        const right = left._right;
        this._right = right;
        left._right = this;
        if (right !== null) {
          right._left = this;
        }
      }
      // adjust the length of parent
      if (parentSub === null && parent.length !== undefined && this._countable) {
        parent.length += this._length;
      }
      if (parent._deleted) {
        this._delete(y, false, true);
      }
      y.os.put(this);
      transactionTypeChanged(y, parent, parentSub);
      if (this._id.user !== RootFakeUserID) {
        writeStructToTransaction(y._transaction, this);
      }
    }

    /**
     * Transform the properties of this type to binary and write it to an
     * BinaryEncoder.
     *
     * This is called when this Item is sent to a remote peer.
     *
     * @param {encoding.Encoder} encoder The encoder to write data to.
     *
     * @private
     */
    _toBinary (encoder) {
      writeUint8(encoder, getStructReference(this.constructor));
      let info = 0;
      if (this._origin !== null) {
        info += 0b1; // origin is defined
      }
      // TODO: remove
      /* no longer send _left
      if (this._left !== this._origin) {
        info += 0b10 // do not copy origin to left
      }
      */
      if (this._right_origin !== null) {
        info += 0b100;
      }
      if (this._parentSub !== null) {
        info += 0b1000;
      }
      writeUint8(encoder, info);
      this._id.encode(encoder);
      if (info & 0b1) {
        this._origin._lastId.encode(encoder);
      }
      // TODO: remove
      /* see above
      if (info & 0b10) {
        encoder.writeID(this._left._lastId)
      }
      */
      if (info & 0b100) {
        this._right_origin._id.encode(encoder);
      }
      if ((info & 0b101) === 0) {
        // neither origin nor right is defined
        this._parent._id.encode(encoder);
      }
      if (info & 0b1000) {
        writeVarString(encoder, JSON.stringify(this._parentSub));
      }
    }

    /**
     * Read the next Item in a Decoder and fill this Item with the read data.
     *
     * This is called when data is received from a remote peer.
     *
     * @param {Y} y The Yjs instance that this Item belongs to.
     * @param {decoding.Decoder} decoder The decoder object to read data from.
     *
     * @private
     */
    _fromBinary (y, decoder) {
      let missing = [];
      const info = readUint8(decoder);
      const id = decode(decoder);
      this._id = id;
      // read origin
      if (info & 0b1) {
        // origin != null
        const originID = decode(decoder);
        // we have to query for left again because it might have been split/merged..
        const origin = y.os.getItemCleanEnd(originID);
        if (origin === null) {
          missing.push(originID);
        } else {
          this._origin = origin;
          this._left = this._origin;
        }
      }
      // read right
      if (info & 0b100) {
        // right != null
        const rightID = decode(decoder);
        // we have to query for right again because it might have been split/merged..
        const right = y.os.getItemCleanStart(rightID);
        if (right === null) {
          missing.push(rightID);
        } else {
          this._right = right;
          this._right_origin = right;
        }
      }
      // read parent
      if ((info & 0b101) === 0) {
        // neither origin nor right is defined
        const parentID = decode(decoder);
        // parent does not change, so we don't have to search for it again
        if (this._parent === null) {
          let parent;
          if (parentID.constructor === RootID) {
            parent = y.os.get(parentID);
          } else {
            parent = y.os.getItem(parentID);
          }
          if (parent === null) {
            missing.push(parentID);
          } else {
            this._parent = parent;
          }
        }
      } else if (this._parent === null) {
        if (this._origin !== null) {
          this._parent = this._origin._parent;
        } else if (this._right_origin !== null) {
          this._parent = this._right_origin._parent;
        }
      }
      if (info & 0b1000) {
        // TODO: maybe put this in read parent condition (you can also read parentsub from left/right)
        this._parentSub = JSON.parse(readVarString(decoder));
      }
      if (id instanceof ID && y.ss.getState(id.user) < id.clock) {
        missing.push(createID(id.user, id.clock - 1));
      }
      return missing
    }
  }

  /**
   * @module tree
   */

  const rotate = (tree, parent, newParent, n) => {
    if (parent === null) {
      tree.root = newParent;
      newParent._parent = null;
    } else if (parent.left === n) {
      parent.left = newParent;
    } else if (parent.right === n) {
      parent.right = newParent;
    } else {
      throw new Error('The elements are wrongly connected!')
    }
  };

  class N {
    // A created node is always red!
    constructor (val) {
      this.val = val;
      this.color = true;
      this._left = null;
      this._right = null;
      this._parent = null;
    }
    isRed () { return this.color }
    isBlack () { return !this.color }
    redden () { this.color = true; return this }
    blacken () { this.color = false; return this }
    get grandparent () {
      return this.parent.parent
    }
    get parent () {
      return this._parent
    }
    get sibling () {
      return (this === this.parent.left)
        ? this.parent.right : this.parent.left
    }
    get left () {
      return this._left
    }
    get right () {
      return this._right
    }
    set left (n) {
      if (n !== null) {
        n._parent = this;
      }
      this._left = n;
    }
    set right (n) {
      if (n !== null) {
        n._parent = this;
      }
      this._right = n;
    }
    rotateLeft (tree) {
      const parent = this.parent;
      const newParent = this.right;
      const newRight = this.right.left;
      newParent.left = this;
      this.right = newRight;
      rotate(tree, parent, newParent, this);
    }
    next () {
      if (this.right !== null) {
        // search the most left node in the right tree
        var o = this.right;
        while (o.left !== null) {
          o = o.left;
        }
        return o
      } else {
        var p = this;
        while (p.parent !== null && p !== p.parent.left) {
          p = p.parent;
        }
        return p.parent
      }
    }
    prev () {
      if (this.left !== null) {
        // search the most right node in the left tree
        var o = this.left;
        while (o.right !== null) {
          o = o.right;
        }
        return o
      } else {
        var p = this;
        while (p.parent !== null && p !== p.parent.right) {
          p = p.parent;
        }
        return p.parent
      }
    }
    rotateRight (tree) {
      const parent = this.parent;
      const newParent = this.left;
      const newLeft = this.left.right;
      newParent.right = this;
      this.left = newLeft;
      rotate(tree, parent, newParent, this);
    }
    getUncle () {
      // we can assume that grandparent exists when this is called!
      if (this.parent === this.parent.parent.left) {
        return this.parent.parent.right
      } else {
        return this.parent.parent.left
      }
    }
  }

  const isBlack = node =>
    node !== null ? node.isBlack() : true;

  const isRed = (node) =>
    node !== null ? node.isRed() : false;

  /*
   * This is a Red Black Tree implementation
   */
  class Tree {
    constructor () {
      this.root = null;
      this.length = 0;
    }
    findNext (id) {
      var nextID = id.clone();
      nextID.clock += 1;
      return this.findWithLowerBound(nextID)
    }
    findPrev (id) {
      let prevID = id.clone();
      prevID.clock -= 1;
      return this.findWithUpperBound(prevID)
    }
    findNodeWithLowerBound (from) {
      var o = this.root;
      if (o === null) {
        return null
      } else {
        while (true) {
          if (from === null || (from.lessThan(o.val._id) && o.left !== null)) {
            // o is included in the bound
            // try to find an element that is closer to the bound
            o = o.left;
          } else if (from !== null && o.val._id.lessThan(from)) {
            // o is not within the bound, maybe one of the right elements is..
            if (o.right !== null) {
              o = o.right;
            } else {
              // there is no right element. Search for the next bigger element,
              // this should be within the bounds
              return o.next()
            }
          } else {
            return o
          }
        }
      }
    }
    findNodeWithUpperBound (to) {
      if (to === void 0) {
        throw new Error('You must define from!')
      }
      var o = this.root;
      if (o === null) {
        return null
      } else {
        while (true) {
          if ((to === null || o.val._id.lessThan(to)) && o.right !== null) {
            // o is included in the bound
            // try to find an element that is closer to the bound
            o = o.right;
          } else if (to !== null && to.lessThan(o.val._id)) {
            // o is not within the bound, maybe one of the left elements is..
            if (o.left !== null) {
              o = o.left;
            } else {
              // there is no left element. Search for the prev smaller element,
              // this should be within the bounds
              return o.prev()
            }
          } else {
            return o
          }
        }
      }
    }
    findSmallestNode () {
      var o = this.root;
      while (o != null && o.left != null) {
        o = o.left;
      }
      return o
    }
    findWithLowerBound (from) {
      var n = this.findNodeWithLowerBound(from);
      return n == null ? null : n.val
    }
    findWithUpperBound (to) {
      var n = this.findNodeWithUpperBound(to);
      return n == null ? null : n.val
    }
    iterate (from, to, f) {
      var o;
      if (from === null) {
        o = this.findSmallestNode();
      } else {
        o = this.findNodeWithLowerBound(from);
      }
      while (
        o !== null &&
        (
          to === null || // eslint-disable-line no-unmodified-loop-condition
          o.val._id.lessThan(to) ||
          o.val._id.equals(to)
        )
      ) {
        f(o.val);
        o = o.next();
      }
    }
    find (id) {
      let n = this.findNode(id);
      if (n !== null) {
        return n.val
      } else {
        return null
      }
    }
    findNode (id) {
      var o = this.root;
      if (o === null) {
        return null
      } else {
        while (true) {
          if (o === null) {
            return null
          }
          if (id.lessThan(o.val._id)) {
            o = o.left;
          } else if (o.val._id.lessThan(id)) {
            o = o.right;
          } else {
            return o
          }
        }
      }
    }
    delete (id) {
      var d = this.findNode(id);
      if (d == null) {
        // throw new Error('Element does not exist!')
        return
      }
      this.length--;
      if (d.left !== null && d.right !== null) {
        // switch d with the greates element in the left subtree.
        // o should have at most one child.
        var o = d.left;
        // find
        while (o.right !== null) {
          o = o.right;
        }
        // switch
        d.val = o.val;
        d = o;
      }
      // d has at most one child
      // let n be the node that replaces d
      var isFakeChild;
      var child = d.left || d.right;
      if (child === null) {
        isFakeChild = true;
        child = new N(null);
        child.blacken();
        d.right = child;
      } else {
        isFakeChild = false;
      }

      if (d.parent === null) {
        if (!isFakeChild) {
          this.root = child;
          child.blacken();
          child._parent = null;
        } else {
          this.root = null;
        }
        return
      } else if (d.parent.left === d) {
        d.parent.left = child;
      } else if (d.parent.right === d) {
        d.parent.right = child;
      } else {
        throw new Error('Impossible!')
      }
      if (d.isBlack()) {
        if (child.isRed()) {
          child.blacken();
        } else {
          this._fixDelete(child);
        }
      }
      this.root.blacken();
      if (isFakeChild) {
        if (child.parent.left === child) {
          child.parent.left = null;
        } else if (child.parent.right === child) {
          child.parent.right = null;
        } else {
          throw new Error('Impossible #3')
        }
      }
    }
    _fixDelete (n) {
      if (n.parent === null) {
        // this can only be called after the first iteration of fixDelete.
        return
      }
      // d was already replaced by the child
      // d is not the root
      // d and child are black
      var sibling = n.sibling;
      if (isRed(sibling)) {
        // make sibling the grandfather
        n.parent.redden();
        sibling.blacken();
        if (n === n.parent.left) {
          n.parent.rotateLeft(this);
        } else if (n === n.parent.right) {
          n.parent.rotateRight(this);
        } else {
          throw new Error('Impossible #2')
        }
        sibling = n.sibling;
      }
      // parent, sibling, and children of n are black
      if (n.parent.isBlack() &&
        sibling.isBlack() &&
        isBlack(sibling.left) &&
        isBlack(sibling.right)
      ) {
        sibling.redden();
        this._fixDelete(n.parent);
      } else if (n.parent.isRed() &&
        sibling.isBlack() &&
        isBlack(sibling.left) &&
        isBlack(sibling.right)
      ) {
        sibling.redden();
        n.parent.blacken();
      } else {
        if (n === n.parent.left &&
          sibling.isBlack() &&
          isRed(sibling.left) &&
          isBlack(sibling.right)
        ) {
          sibling.redden();
          sibling.left.blacken();
          sibling.rotateRight(this);
          sibling = n.sibling;
        } else if (n === n.parent.right &&
          sibling.isBlack() &&
          isRed(sibling.right) &&
          isBlack(sibling.left)
        ) {
          sibling.redden();
          sibling.right.blacken();
          sibling.rotateLeft(this);
          sibling = n.sibling;
        }
        sibling.color = n.parent.color;
        n.parent.blacken();
        if (n === n.parent.left) {
          sibling.right.blacken();
          n.parent.rotateLeft(this);
        } else {
          sibling.left.blacken();
          n.parent.rotateRight(this);
        }
      }
    }
    put (v) {
      var node = new N(v);
      if (this.root !== null) {
        var p = this.root; // p abbrev. parent
        while (true) {
          if (node.val._id.lessThan(p.val._id)) {
            if (p.left === null) {
              p.left = node;
              break
            } else {
              p = p.left;
            }
          } else if (p.val._id.lessThan(node.val._id)) {
            if (p.right === null) {
              p.right = node;
              break
            } else {
              p = p.right;
            }
          } else {
            p.val = node.val;
            return p
          }
        }
        this._fixInsert(node);
      } else {
        this.root = node;
      }
      this.length++;
      this.root.blacken();
      return node
    }
    _fixInsert (n) {
      if (n.parent === null) {
        n.blacken();
        return
      } else if (n.parent.isBlack()) {
        return
      }
      var uncle = n.getUncle();
      if (uncle !== null && uncle.isRed()) {
        // Note: parent: red, uncle: red
        n.parent.blacken();
        uncle.blacken();
        n.grandparent.redden();
        this._fixInsert(n.grandparent);
      } else {
        // Note: parent: red, uncle: black or null
        // Now we transform the tree in such a way that
        // either of these holds:
        //   1) grandparent.left.isRed
        //     and grandparent.left.left.isRed
        //   2) grandparent.right.isRed
        //     and grandparent.right.right.isRed
        if (n === n.parent.right && n.parent === n.grandparent.left) {
          n.parent.rotateLeft(this);
          // Since we rotated and want to use the previous
          // cases, we need to set n in such a way that
          // n.parent.isRed again
          n = n.left;
        } else if (n === n.parent.left && n.parent === n.grandparent.right) {
          n.parent.rotateRight(this);
          // see above
          n = n.right;
        }
        // Case 1) or 2) hold from here on.
        // Now traverse grandparent, make parent a black node
        // on the highest level which holds two red nodes.
        n.parent.blacken();
        n.grandparent.redden();
        if (n === n.parent.left) {
          // Case 1
          n.grandparent.rotateRight(this);
        } else {
          // Case 2
          n.grandparent.rotateLeft(this);
        }
      }
    }
  }

  /**
   * @module utils
   */

  class DSNode {
    constructor (id, len, gc) {
      this._id = id;
      this.len = len;
      this.gc = gc;
    }
    clone () {
      return new DSNode(this._id, this.len, this.gc)
    }
  }

  class DeleteStore extends Tree {
    logTable () {
      const deletes = [];
      this.iterate(null, null, n => {
        deletes.push({
          user: n._id.user,
          clock: n._id.clock,
          len: n.len,
          gc: n.gc
        });
      });
      console.table(deletes);
    }
    isDeleted (id) {
      var n = this.findWithUpperBound(id);
      return n !== null && n._id.user === id.user && id.clock < n._id.clock + n.len
    }
    mark (id, length, gc) {
      if (length === 0) return
      // Step 1. Unmark range
      const leftD = this.findWithUpperBound(createID(id.user, id.clock - 1));
      // Resize left DSNode if necessary
      if (leftD !== null && leftD._id.user === id.user) {
        if (leftD._id.clock < id.clock && id.clock < leftD._id.clock + leftD.len) {
          // node is overlapping. need to resize
          if (id.clock + length < leftD._id.clock + leftD.len) {
            // overlaps new mark range and some more
            // create another DSNode to the right of new mark
            this.put(new DSNode(createID(id.user, id.clock + length), leftD._id.clock + leftD.len - id.clock - length, leftD.gc));
          }
          // resize left DSNode
          leftD.len = id.clock - leftD._id.clock;
        } // Otherwise there is no overlapping
      }
      // Resize right DSNode if necessary
      const upper = createID(id.user, id.clock + length - 1);
      const rightD = this.findWithUpperBound(upper);
      if (rightD !== null && rightD._id.user === id.user) {
        if (rightD._id.clock < id.clock + length && id.clock <= rightD._id.clock && id.clock + length < rightD._id.clock + rightD.len) { // we only consider the case where we resize the node
          const d = id.clock + length - rightD._id.clock;
          rightD._id = createID(rightD._id.user, rightD._id.clock + d);
          rightD.len -= d;
        }
      }
      // Now we only have to delete all inner marks
      const deleteNodeIds = [];
      this.iterate(id, upper, m => {
        deleteNodeIds.push(m._id);
      });
      for (let i = deleteNodeIds.length - 1; i >= 0; i--) {
        this.delete(deleteNodeIds[i]);
      }
      let newMark = new DSNode(id, length, gc);
      // Step 2. Check if we can extend left or right
      if (leftD !== null && leftD._id.user === id.user && leftD._id.clock + leftD.len === id.clock && leftD.gc === gc) {
        // We can extend left
        leftD.len += length;
        newMark = leftD;
      }
      const rightNext = this.find(createID(id.user, id.clock + length));
      if (rightNext !== null && rightNext._id.user === id.user && id.clock + length === rightNext._id.clock && gc === rightNext.gc) {
        // We can merge newMark and rightNext
        newMark.len += rightNext.len;
        this.delete(rightNext._id);
      }
      if (leftD !== newMark) {
        // only put if we didn't extend left
        this.put(newMark);
      }
    }
    // TODO: exchange markDeleted for mark()
    markDeleted (id, length) {
      this.mark(id, length, false);
    }
  }

  /**
   * @module utils
   */

  class OperationStore extends Tree {
    constructor (y) {
      super();
      this.y = y;
    }
    logTable () {
      const items = [];
      this.iterate(null, null, item => {
        if (item.constructor === GC) {
          items.push({
            id: stringifyItemID(item),
            content: item._length,
            deleted: 'GC'
          });
        } else {
          items.push({
            id: stringifyItemID(item),
            origin: item._origin === null ? '()' : stringifyID(item._origin._lastId),
            left: item._left === null ? '()' : stringifyID(item._left._lastId),
            right: stringifyItemID(item._right),
            right_origin: stringifyItemID(item._right_origin),
            parent: stringifyItemID(item._parent),
            parentSub: item._parentSub,
            deleted: item._deleted,
            content: JSON.stringify(item._content)
          });
        }
      });
      console.table(items);
    }
    get (id) {
      let struct = this.find(id);
      if (struct === null && id instanceof RootID) {
        const Constr = getStruct(id.type);
        const y = this.y;
        struct = new Constr();
        struct._id = id;
        struct._parent = y;
        y.transact(() => {
          struct._integrate(y);
        });
        this.put(struct);
      }
      return struct
    }
    // Use getItem for structs with _length > 1
    getItem (id) {
      var item = this.findWithUpperBound(id);
      if (item === null) {
        return null
      }
      const itemID = item._id;
      if (id.user === itemID.user && id.clock < itemID.clock + item._length) {
        return item
      } else {
        return null
      }
    }
    // Return an insertion such that id is the first element of content
    // This function manipulates an item, if necessary
    getItemCleanStart (id) {
      var ins = this.getItem(id);
      if (ins === null || ins._length === 1) {
        return ins
      }
      const insID = ins._id;
      if (insID.clock === id.clock) {
        return ins
      } else {
        return ins._splitAt(this.y, id.clock - insID.clock)
      }
    }
    // Return an insertion such that id is the last element of content
    // This function manipulates an operation, if necessary
    getItemCleanEnd (id) {
      var ins = this.getItem(id);
      if (ins === null || ins._length === 1) {
        return ins
      }
      const insID = ins._id;
      if (insID.clock + ins._length - 1 === id.clock) {
        return ins
      } else {
        ins._splitAt(this.y, id.clock - insID.clock + 1);
        return ins
      }
    }
  }

  /**
   * @module utils
   */

  /**
   * @typedef {Map<number, number>} StateSet
   */

  /**
   * @private
   */
  class StateStore {
    constructor (y) {
      this.y = y;
      this.state = new Map();
    }
    logTable () {
      const entries = [];
      for (let [user, state] of this.state) {
        entries.push({
          user, state
        });
      }
      console.table(entries);
    }
    getNextID (len) {
      const user = this.y.userID;
      const state = this.getState(user);
      this.setState(user, state + len);
      return createID(user, state)
    }
    updateRemoteState (struct) {
      let user = struct._id.user;
      let userState = this.state.get(user);
      while (struct !== null && struct._id.clock === userState) {
        userState += struct._length;
        struct = this.y.os.get(createID(user, userState));
      }
      this.state.set(user, userState);
    }
    getState (user) {
      let state = this.state.get(user);
      if (state == null) {
        return 0
      }
      return state
    }
    setState (user, state) {
      // TODO: modify missingi structs here
      const beforeState = this.y._transaction.beforeState;
      if (!beforeState.has(user)) {
        beforeState.set(user, this.getState(user));
      }
      this.state.set(user, state);
    }
  }

  /**
   * @module utils
   */

  /* global crypto */

  const generateRandomUint32 = () => {
    if (typeof crypto !== 'undefined' && crypto.getRandomValues != null) {
      // browser
      let arr = new Uint32Array(1);
      crypto.getRandomValues(arr);
      return arr[0]
    } else if (typeof crypto !== 'undefined' && crypto.randomBytes != null) {
      // node
      let buf = crypto.randomBytes(4);
      return new Uint32Array(buf.buffer)[0]
    } else {
      return Math.ceil(Math.random() * 0xFFFFFFFF)
    }
  };

  /**
   * Handles named events.
   */
  class NamedEventHandler {
    constructor () {
      this._eventListener = new Map();
      this._stateListener = new Map();
    }

    /**
     * @private
     * Returns all listeners that listen to a specified name.
     *
     * @param {String} name The query event name.
     */
    _getListener (name) {
      let listeners = this._eventListener.get(name);
      if (listeners === undefined) {
        listeners = {
          once: new Set(),
          on: new Set()
        };
        this._eventListener.set(name, listeners);
      }
      return listeners
    }

    /**
     * Adds a named event listener. The listener is removed after it has been
     * called once.
     *
     * @param {String} name The event name to listen to.
     * @param {Function} f The function that is executed when the event is fired.
     */
    once (name, f) {
      let listeners = this._getListener(name);
      listeners.once.add(f);
    }

    /**
     * Adds a named event listener.
     *
     * @param {String} name The event name to listen to.
     * @param {Function} f The function that is executed when the event is fired.
     */
    on (name, f) {
      let listeners = this._getListener(name);
      listeners.on.add(f);
    }

    /**
     * @private
     * Init the saved state for an event name.
     */
    _initStateListener (name) {
      let state = this._stateListener.get(name);
      if (state === undefined) {
        state = {};
        state.promise = new Promise(resolve => {
          state.resolve = resolve;
        });
        this._stateListener.set(name, state);
      }
      return state
    }

    /**
     * Returns a Promise that is resolved when the event name is called.
     * The Promise is immediately resolved when the event name was called in the
     * past.
     */
    when (name) {
      return this._initStateListener(name).promise
    }

    /**
     * Remove an event listener that was registered with either
     * {@link EventHandler#on} or {@link EventHandler#once}.
     */
    off (name, f) {
      if (name == null || f == null) {
        throw new Error('You must specify event name and function!')
      }
      const listener = this._eventListener.get(name);
      if (listener !== undefined) {
        listener.on.delete(f);
        listener.once.delete(f);
      }
    }

    /**
     * Emit a named event. All registered event listeners that listen to the
     * specified name will receive the event.
     *
     * @param {String} name The event name.
     * @param {Array} args The arguments that are applied to the event listener.
     */
    emit (name, ...args) {
      this._initStateListener(name).resolve();
      const listener = this._eventListener.get(name);
      if (listener !== undefined) {
        listener.on.forEach(f => f.apply(null, args));
        listener.once.forEach(f => f.apply(null, args));
        listener.once = new Set();
      } else if (name === 'error') {
        console.error(args[0]);
      }
    }
    destroy () {
      this._eventListener = null;
    }
  }

  /**
   * @module utils
   */

  /**
   * General event handler implementation.
   */
  class EventHandler {
    constructor () {
      this.eventListeners = [];
    }

    /**
     * To prevent memory leaks, call this method when the eventListeners won't be
     * used anymore.
     */
    destroy () {
      this.eventListeners = null;
    }

    /**
     * Adds an event listener that is called when
     * {@link EventHandler#callEventListeners} is called.
     *
     * @param {Function} f The event handler.
     */
    addEventListener (f) {
      this.eventListeners.push(f);
    }

    /**
     * Removes an event listener.
     *
     * @param {Function} f The event handler that was added with
     *                     {@link EventHandler#addEventListener}
     */
    removeEventListener (f) {
      this.eventListeners = this.eventListeners.filter(g => f !== g);
    }

    /**
     * Removes all event listeners.
     */
    removeAllEventListeners () {
      this.eventListeners = [];
    }

    /**
     * Call all event listeners that were added via
     * {@link EventHandler#addEventListener}.
     *
     * @param {Transaction} transaction The transaction object
     * @param {YEvent} event An event object that describes the change on a type.
     */
    callEventListeners (transaction, event) {
      for (var i = 0; i < this.eventListeners.length; i++) {
        try {
          const f = this.eventListeners[i];
          f(event, transaction);
        } catch (e) {
          /*
            Your observer threw an error. This error was caught so that Yjs
            can ensure data consistency! In order to debug this error you
            have to check "Pause On Caught Exceptions" in developer tools.
          */
          console.error(e);
        }
      }
    }
  }

  /**
   * @module utils
   */

  /**
   * YEvent describes the changes on a YType.
   */
  class YEvent {
    /**
     * @param {Type} target The changed type.
     */
    constructor (target) {
      /**
       * The type on which this event was created on.
       * @type {Type}
       */
      this.target = target;
      /**
       * The current target on which the observe callback is called.
       * @type {Type}
       */
      this.currentTarget = target;
    }

    /**
     * Computes the path from `y` to the changed type.
     *
     * The following property holds:
     * @example
     *   let type = y
     *   event.path.forEach(dir => {
     *     type = type.get(dir)
     *   })
     *   type === event.target // => true
     */
    get path () {
      return this.currentTarget.getPathTo(this.target)
    }
  }

  /**
   * @module structs
   */

  // restructure children as if they were inserted one after another
  const integrateChildren = (y, start) => {
    let right;
    do {
      right = start._right;
      start._right = null;
      start._right_origin = null;
      start._origin = start._left;
      start._integrate(y);
      start = right;
    } while (right !== null)
  };

  const gcChildren = (y, item) => {
    while (item !== null) {
      item._delete(y, false, true);
      item._gc(y);
      item = item._right;
    }
  };

  /**
   * Abstract Yjs Type class
   */
  class Type extends Item {
    constructor () {
      super();
      this._map = new Map();
      this._start = null;
      this._y = null;
      this._eventHandler = new EventHandler();
      this._deepEventHandler = new EventHandler();
    }

    /**
     * The first non-deleted item
     */
    get _first () {
      let n = this._start;
      while (n !== null && n._deleted) {
        n = n._right;
      }
      return n
    }

    /**
     * Compute the path from this type to the specified target.
     *
     * @example
     * It should be accessible via `this.get(result[0]).get(result[1])..`
     * const path = type.getPathTo(child)
     * // assuming `type instanceof YArray`
     * console.log(path) // might look like => [2, 'key1']
     * child === type.get(path[0]).get(path[1])
     *
     * @param {Type | Y | any} type Type target
     * @return {Array<string>} Path to the target
     */
    getPathTo (type) {
      if (type === this) {
        return []
      }
      const path = [];
      const y = this._y;
      while (type !== this && type !== y) {
        let parent = type._parent;
        if (type._parentSub !== null) {
          path.unshift(type._parentSub);
        } else {
          // parent is array-ish
          for (let [i, child] of parent) {
            if (child === type) {
              path.unshift(i);
              break
            }
          }
        }
        type = parent;
      }
      if (type !== this) {
        throw new Error('The type is not a child of this node')
      }
      return path
    }

    /**
     * Creates YArray Event and calls observers.
     * @private
     */
    _callObserver (transaction, parentSubs, remote) {
      this._callEventHandler(transaction, new YEvent(this));
    }

    /**
     * Call event listeners with an event. This will also add an event to all
     * parents (for `.observeDeep` handlers).
     * @private
     */
    _callEventHandler (transaction, event) {
      const changedParentTypes = transaction.changedParentTypes;
      this._eventHandler.callEventListeners(transaction, event);
      /**
       * @type {any}
       */
      let type = this;
      while (type !== this._y) {
        let events = changedParentTypes.get(type);
        if (events === undefined) {
          events = [];
          changedParentTypes.set(type, events);
        }
        events.push(event);
        type = type._parent;
      }
    }

    /**
     * Helper method to transact if the y instance is available.
     *
     * TODO: Currently event handlers are not thrown when a type is not registered
     *       with a Yjs instance.
     * @private
     */
    _transact (f) {
      const y = this._y;
      if (y !== null) {
        y.transact(f);
      } else {
        f(y);
      }
    }

    /**
     * Observe all events that are created on this type.
     *
     * @param {Function} f Observer function
     */
    observe (f) {
      this._eventHandler.addEventListener(f);
    }

    /**
     * Observe all events that are created by this type and its children.
     *
     * @param {Function} f Observer function
     */
    observeDeep (f) {
      this._deepEventHandler.addEventListener(f);
    }

    /**
     * Unregister an observer function.
     *
     * @param {Function} f Observer function
     */
    unobserve (f) {
      this._eventHandler.removeEventListener(f);
    }

    /**
     * Unregister an observer function.
     *
     * @param {Function} f Observer function
     */
    unobserveDeep (f) {
      this._deepEventHandler.removeEventListener(f);
    }

    /**
     * Integrate this type into the Yjs instance.
     *
     * * Save this struct in the os
     * * This type is sent to other client
     * * Observer functions are fired
     *
     * @param {Y} y The Yjs instance
     * @private
     */
    _integrate (y) {
      super._integrate(y);
      this._y = y;
      // when integrating children we must make sure to
      // integrate start
      const start = this._start;
      if (start !== null) {
        this._start = null;
        integrateChildren(y, start);
      }
      // integrate map children_integrate
      const map = this._map;
      this._map = new Map();
      for (let t of map.values()) {
        // TODO make sure that right elements are deleted!
        integrateChildren(y, t);
      }
    }

    _gcChildren (y) {
      gcChildren(y, this._start);
      this._start = null;
      this._map.forEach(item => {
        gcChildren(y, item);
      });
      this._map = new Map();
    }

    _gc (y) {
      this._gcChildren(y);
      super._gc(y);
    }

    /**
     * @abstract
     * @return {Object | Array | number | string}
     */
    toJSON () {}

    /**
     * Mark this Item as deleted.
     *
     * @param {Y} y The Yjs instance
     * @param {boolean} createDelete Whether to propagate a message that this
     *                               Type was deleted.
     * @param {boolean} [gcChildren=(y._hasUndoManager===false)] Whether to garbage
     *                                         collect the children of this type.
     * @private
     */
    _delete (y, createDelete, gcChildren) {
      if (gcChildren === undefined || !y.gcEnabled) {
        gcChildren = y._hasUndoManager === false && y.gcEnabled;
      }
      super._delete(y, createDelete, gcChildren);
      y._transaction.changedTypes.delete(this);
      // delete map types
      for (let value of this._map.values()) {
        if (value instanceof Item && !value._deleted) {
          value._delete(y, false, gcChildren);
        }
      }
      // delete array types
      let t = this._start;
      while (t !== null) {
        if (!t._deleted) {
          t._delete(y, false, gcChildren);
        }
        t = t._right;
      }
      if (gcChildren) {
        this._gcChildren(y);
      }
    }
  }

  /**
   * @module utils
   */
  /**
   * A transaction is created for every change on the Yjs model. It is possible
   * to bundle changes on the Yjs model in a single transaction to
   * minimize the number on messages sent and the number of observer calls.
   * If possible the user of this library should bundle as many changes as
   * possible. Here is an example to illustrate the advantages of bundling:
   *
   * @example
   * const map = y.define('map', YMap)
   * // Log content when change is triggered
   * map.observe(() => {
   *   console.log('change triggered')
   * })
   * // Each change on the map type triggers a log message:
   * map.set('a', 0) // => "change triggered"
   * map.set('b', 0) // => "change triggered"
   * // When put in a transaction, it will trigger the log after the transaction:
   * y.transact(() => {
   *   map.set('a', 1)
   *   map.set('b', 1)
   * }) // => "change triggered"
   *
   */
  class Transaction {
    constructor (y) {
      /**
       * @type {Y} The Yjs instance.
       */
      this.y = y;
      /**
       * All new types that are added during a transaction.
       * @type {Set<Item>}
       */
      this.newTypes = new Set();
      /**
       * All types that were directly modified (property added or child
       * inserted/deleted). New types are not included in this Set.
       * Maps from type to parentSubs (`item._parentSub = null` for YArray)
       * @type {Map<Type|Y,String>}
       */
      this.changedTypes = new Map();
      // TODO: rename deletedTypes
      /**
       * Set of all deleted Types and Structs.
       * @type {Set<Item>}
       */
      this.deletedStructs = new Set();
      /**
       * Saves the old state set of the Yjs instance. If a state was modified,
       * the original value is saved here.
       * @type {Map<Number,Number>}
       */
      this.beforeState = new Map();
      /**
       * Stores the events for the types that observe also child elements.
       * It is mainly used by `observeDeep`.
       * @type {Map<Type,Array<YEvent>>}
       */
      this.changedParentTypes = new Map();
      this.encodedStructsLen = 0;
      this.encodedStructs = createEncoder();
    }
  }

  /**
   * @module utils
   */

  class MissingEntry {
    constructor (decoder, missing, struct) {
      this.decoder = decoder;
      this.missing = missing.length;
      this.struct = struct;
    }
  }

  /**
   * @private
   * Integrate remote struct
   * When a remote struct is integrated, other structs might be ready to ready to
   * integrate.
   * @param {Y} y
   * @param {Item} struct
   */
  function _integrateRemoteStructHelper (y, struct) {
    const id = struct._id;
    if (id === undefined) {
      struct._integrate(y);
    } else {
      if (y.ss.getState(id.user) > id.clock) {
        return
      }
      if (!y.gcEnabled || struct.constructor === GC || (struct._parent.constructor !== GC && struct._parent._deleted === false)) {
        // Is either a GC or Item with an undeleted parent
        // save to integrate
        struct._integrate(y);
      } else {
        // Is an Item. parent was deleted.
        struct._gc(y);
      }
      let msu = y._missingStructs.get(id.user);
      if (msu != null) {
        let clock = id.clock;
        const finalClock = clock + struct._length;
        for (;clock < finalClock; clock++) {
          const missingStructs = msu.get(clock);
          if (missingStructs !== undefined) {
            missingStructs.forEach(missingDef => {
              missingDef.missing--;
              if (missingDef.missing === 0) {
                const decoder = missingDef.decoder;
                let oldPos = decoder.pos;
                let missing = missingDef.struct._fromBinary(y, decoder);
                decoder.pos = oldPos;
                if (missing.length === 0) {
                  y._readyToIntegrate.push(missingDef.struct);
                }
              }
            });
            msu.delete(clock);
          }
        }
        if (msu.size === 0) {
          y._missingStructs.delete(id.user);
        }
      }
    }
  }

  /**
   * @param {decoding.Decoder} decoder
   * @param {Y} y
   */
  const integrateRemoteStructs = (decoder, y) => {
    const len = readUint32(decoder);
    for (let i = 0; i < len; i++) {
      let reference = readVarUint(decoder);
      let Constr = getStruct(reference);
      let struct = new Constr();
      let decoderPos = decoder.pos;
      let missing = struct._fromBinary(y, decoder);
      if (missing.length === 0) {
        while (struct != null) {
          _integrateRemoteStructHelper(y, struct);
          struct = y._readyToIntegrate.shift();
        }
      } else {
        let _decoder = createDecoder(decoder.arr.buffer);
        _decoder.pos = decoderPos;
        let missingEntry = new MissingEntry(_decoder, missing, struct);
        let missingStructs = y._missingStructs;
        for (let i = missing.length - 1; i >= 0; i--) {
          let m = missing[i];
          if (!missingStructs.has(m.user)) {
            missingStructs.set(m.user, new Map());
          }
          let msu = missingStructs.get(m.user);
          if (!msu.has(m.clock)) {
            msu.set(m.clock, []);
          }
          let mArray = msu = msu.get(m.clock);
          mArray.push(missingEntry);
        }
      }
    }
  };

  // TODO: use this above / refactor
  /**
   * @param {decoding.Decoder} decoder
   * @param {Y} y
   */
  const integrateRemoteStruct = (decoder, y) => {
    let reference = readVarUint(decoder);
    let Constr = getStruct(reference);
    let struct = new Constr();
    let decoderPos = decoder.pos;
    let missing = struct._fromBinary(y, decoder);
    if (missing.length === 0) {
      while (struct != null) {
        _integrateRemoteStructHelper(y, struct);
        struct = y._readyToIntegrate.shift();
      }
    } else {
      let _decoder = createDecoder(decoder.arr.buffer);
      _decoder.pos = decoderPos;
      let missingEntry = new MissingEntry(_decoder, missing, struct);
      let missingStructs = y._missingStructs;
      for (let i = missing.length - 1; i >= 0; i--) {
        let m = missing[i];
        if (!missingStructs.has(m.user)) {
          missingStructs.set(m.user, new Map());
        }
        let msu = missingStructs.get(m.user);
        if (!msu.has(m.clock)) {
          msu.set(m.clock, []);
        }
        let mArray = msu = msu.get(m.clock);
        mArray.push(missingEntry);
      }
    }
  };

  /**
   * @module sync-protocol
   */

  /**
   * @typedef {Map<number, number>} StateSet
   */

  /**
   * Core Yjs only defines three message types:
   * • YjsSyncStep1: Includes the State Set of the sending client. When received, the client should reply with YjsSyncStep2.
   * • YjsSyncStep2: Includes all missing structs and the complete delete set. When received, the the client is assured that
   *   it received all information from the remote client.
   *
   * In a peer-to-peer network, you may want to introduce a SyncDone message type. Both parties should initiate the connection
   * with SyncStep1. When a client received SyncStep2, it should reply with SyncDone. When the local client received both
   * SyncStep2 and SyncDone, it is assured that it is synced to the remote client.
   *
   * In a client-server model, you want to handle this differently: The client should initiate the connection with SyncStep1.
   * When the server receives SyncStep1, it should reply with SyncStep2 immediately followed by SyncStep1. The client replies
   * with SyncStep2 when it receives SyncStep1. Optionally the server may send a SyncDone after it received SyncStep2, so the
   * client knows that the sync is finished.  There are two reasons for this more elaborated sync model: 1. This protocol can
   * easily be implemented on top of http and websockets. 2. The server shoul only reply to requests, and not initiate them.
   * Therefore it is necesarry that the client initiates the sync.
   *
   * Construction of a message:
   * [messageType : varUint, message definition..]
   *
   * Note: A message does not include information about the room name. This must to be handled by the upper layer protocol!
   *
   * stringify[messageType] stringifies a message definition (messageType is already read from the bufffer)
   */

  const messageYjsSyncStep1 = 0;
  const messageYjsSyncStep2 = 1;
  const messageYjsUpdate = 2;

  /**
   * Write the DeleteSet of a shared document to an Encoder.
   *
   * @param {encoding.Encoder} encoder
   * @param {Y} y
   */
  const writeDeleteSet = (encoder, y) => {
    let currentUser = null;
    let currentLength;
    let lastLenPos;
    let numberOfUsers = 0;
    const laterDSLenPus = length(encoder);
    writeUint32(encoder, 0);
    y.ds.iterate(null, null, n => {
      const user = n._id.user;
      const clock = n._id.clock;
      const len = n.len;
      const gc = n.gc;
      if (currentUser !== user) {
        numberOfUsers++;
        // a new user was foundimport { StateSet } from '../Store/StateStore.js' // eslint-disable-line

        if (currentUser !== null) { // happens on first iteration
          setUint32(encoder, lastLenPos, currentLength);
        }
        currentUser = user;
        writeVarUint(encoder, user);
        // pseudo-fill pos
        lastLenPos = length(encoder);
        writeUint32(encoder, 0);
        currentLength = 0;
      }
      writeVarUint(encoder, clock);
      writeVarUint(encoder, len);
      writeUint8(encoder, gc ? 1 : 0);
      currentLength++;
    });
    if (currentUser !== null) { // happens on first iteration
      setUint32(encoder, lastLenPos, currentLength);
    }
    setUint32(encoder, laterDSLenPus, numberOfUsers);
  };

  /**
   * Read delete set from Decoder and apply it to a shared document.
   *
   * @param {decoding.Decoder} decoder
   * @param {Y} y
   */
  const readDeleteSet = (decoder, y) => {
    const dsLength = readUint32(decoder);
    for (let i = 0; i < dsLength; i++) {
      const user = readVarUint(decoder);
      const dv = [];
      const dvLength = readUint32(decoder);
      for (let j = 0; j < dvLength; j++) {
        const from = readVarUint(decoder);
        const len = readVarUint(decoder);
        const gc = readUint8(decoder) === 1;
        dv.push({from, len, gc});
      }
      if (dvLength > 0) {
        const deletions = [];
        let pos = 0;
        let d = dv[pos];
        y.ds.iterate(createID(user, 0), createID(user, Number.MAX_VALUE), n => {
          // cases:
          // 1. d deletes something to the right of n
          //  => go to next n (break)
          // 2. d deletes something to the left of n
          //  => create deletions
          //  => reset d accordingly
          //  *)=> if d doesn't delete anything anymore, go to next d (continue)
          // 3. not 2) and d deletes something that also n deletes
          //  => reset d so that it doesn't contain n's deletion
          //  *)=> if d does not delete anything anymore, go to next d (continue)
          while (d != null) {
            var diff = 0; // describe the diff of length in 1) and 2)
            if (n._id.clock + n.len <= d.from) {
              // 1)
              break
            } else if (d.from < n._id.clock) {
              // 2)
              // delete maximum the len of d
              // else delete as much as possible
              diff = Math.min(n._id.clock - d.from, d.len);
              // deleteItemRange(y, user, d.from, diff, true)
              deletions.push([user, d.from, diff]);
            } else {
              // 3)
              diff = n._id.clock + n.len - d.from; // never null (see 1)
              if (d.gc && !n.gc) {
                // d marks as gc'd but n does not
                // then delete either way
                // deleteItemRange(y, user, d.from, Math.min(diff, d.len), true)
                deletions.push([user, d.from, Math.min(diff, d.len)]);
              }
            }
            if (d.len <= diff) {
              // d doesn't delete anything anymore
              d = dv[++pos];
            } else {
              d.from = d.from + diff; // reset pos
              d.len = d.len - diff; // reset length
            }
          }
        });
        // TODO: It would be more performant to apply the deletes in the above loop
        // Adapt the Tree implementation to support delete while iterating
        for (let i = deletions.length - 1; i >= 0; i--) {
          const del = deletions[i];
          deleteItemRange(y, del[0], del[1], del[2], true);
        }
        // for the rest.. just apply it
        for (; pos < dv.length; pos++) {
          d = dv[pos];
          deleteItemRange(y, user, d.from, d.len, true);
          // deletions.push([user, d.from, d.len, d.gc)
        }
      }
    }
  };

  /**
   * Write StateSet to Encoder
   *
   * @param {encoding.Encoder} encoder
   * @param {Y} y
   */
  const writeStateSet = (encoder, y) => {
    const state = y.ss.state;
    // write as fixed-size number to stay consistent with the other encode functions.
    // => anytime we write the number of objects that follow, encode as fixed-size number.
    writeUint32(encoder, state.size);
    state.forEach((clock, user) => {
      writeVarUint(encoder, user);
      writeVarUint(encoder, clock);
    });
  };

  /**
   * Read StateSet from Decoder and return as Map
   *
   * @param {decoding.Decoder} decoder
   * @return {StateSet}
   */
  const readStateSet = decoder => {
    const ss = new Map();
    const ssLength = readUint32(decoder);
    for (let i = 0; i < ssLength; i++) {
      const user = readVarUint(decoder);
      const clock = readVarUint(decoder);
      ss.set(user, clock);
    }
    return ss
  };

  /**
   * Write all Items that are not not included in ss to
   * the encoder object.
   *
   * @param {encoding.Encoder} encoder
   * @param {Y} y
   * @param {StateSet} ss State Set received from a remote client. Maps from client id to number of created operations by client id.
   */
  const writeStructs = (encoder, y, ss) => {
    const lenPos = length(encoder);
    writeUint32(encoder, 0);
    let len = 0;
    for (let user of y.ss.state.keys()) {
      let clock = ss.get(user) || 0;
      if (user !== RootFakeUserID) {
        const minBound = createID(user, clock);
        const overlappingLeft = y.os.findPrev(minBound);
        const rightID = overlappingLeft === null ? null : overlappingLeft._id;
        if (rightID !== null && rightID.user === user && rightID.clock + overlappingLeft._length > clock) {
          // TODO: only write partial content (only missing content)
          // const struct = overlappingLeft._clonePartial(clock - rightID.clock)
          const struct = overlappingLeft;
          struct._toBinary(encoder);
          len++;
        }
        y.os.iterate(minBound, createID(user, Number.MAX_VALUE), struct => {
          struct._toBinary(encoder);
          len++;
        });
      }
    }
    setUint32(encoder, lenPos, len);
  };

  /**
   * Read structs and delete operations from decoder and apply them on a shared document.
   *
   * @param {decoding.Decoder} decoder
   * @param {Y} y
   */
  const readStructs = (decoder, y) => {
    const len = readUint32(decoder);
    for (let i = 0; i < len; i++) {
      integrateRemoteStruct(decoder, y);
    }
  };

  /**
   * Create a sync step 1 message based on the state of the current shared document.
   *
   * @param {encoding.Encoder} encoder
   * @param {Y} y
   */
  const writeSyncStep1 = (encoder, y) => {
    writeVarUint(encoder, messageYjsSyncStep1);
    writeStateSet(encoder, y);
  };

  /**
   * Read SyncStep1 message and reply with SyncStep2.
   *
   * @param {decoding.Decoder} decoder The reply to the received message
   * @param {encoding.Encoder} encoder The received message
   * @param {Y} y
   */
  const readSyncStep1 = (decoder, encoder, y) => {
    // read sync step 1 message
    const ss = readStateSet(decoder);
    // write sync step 2
    writeVarUint(encoder, messageYjsSyncStep2);
    writeStructs(encoder, y, ss);
    writeDeleteSet(encoder, y);
  };

  /**
   * Read and apply Structs and then DeleteSet to a y instance.
   *
   * @param {decoding.Decoder} decoder
   * @param {Y} y
   */
  const readSyncStep2 = (decoder, y) => {
    readStructs(decoder, y);
    readDeleteSet(decoder, y);
  };

  /**
   * @param {encoding.Encoder} encoder
   * @param {number} numOfStructs
   * @param {encoding.Encoder} updates
   */
  const writeUpdate = (encoder, numOfStructs, updates) => {
    writeVarUint(encoder, messageYjsUpdate);
    writeUint32(encoder, numOfStructs);
    writeBinaryEncoder(encoder, updates);
  };

  const readUpdate = readStructs;

  /**
   * @param {decoding.Decoder} decoder A message received from another client
   * @param {encoding.Encoder} encoder The reply message. Will not be sent if empty.
   * @param {Y} y
   */
  const readSyncMessage = (decoder, encoder, y) => {
    const messageType = readVarUint(decoder);
    switch (messageType) {
      case messageYjsSyncStep1:
        readSyncStep1(decoder, encoder, y);
        break
      case messageYjsSyncStep2:
        y.transact(() => readSyncStep2(decoder, y), true);
        break
      case messageYjsUpdate:
        y.transact(() => readUpdate(decoder, y), true);
        break
      default:
        throw new Error('Unknown message type')
    }
    return messageType
  };

  /**
   * Anything that can be encoded with `JSON.stringify` and can be decoded with
   * `JSON.parse`.
   *
   * The following property should hold:
   * `JSON.parse(JSON.stringify(key))===key`
   *
   * At the moment the only safe values are number and string.
   *
   * @typedef {(number|string|Object)} encodable
   */

  /**
   * A Yjs instance handles the state of shared data.
   */
  class Y extends NamedEventHandler {
    /**
     * @param {Object} [conf] configuration
     */
    constructor (conf = {}) {
      super();
      this.gcEnabled = conf.gc || false;
      this._contentReady = false;
      this.userID = generateRandomUint32();
      // TODO: This should be a Map so we can use encodables as keys
      this._map = new Map();
      this.ds = new DeleteStore();
      this.os = new OperationStore(this);
      this.ss = new StateStore(this);
      this._missingStructs = new Map();
      this._readyToIntegrate = [];
      this._transaction = null;
      this.connected = false;
      // for compatibility with isParentOf
      this._parent = null;
      this._hasUndoManager = false;
      this._deleted = false; // for compatiblity of having this as a parent for types
      this._id = null;
    }

    /**
     * Read the Decoder and fill the Yjs instance with data in the decoder.
     *
     * @param {Decoder} decoder The BinaryDecoder to read from.
     */
    importModel (decoder) {
      this.transact(() => {
        integrateRemoteStructs(decoder, this);
        readDeleteSet(decoder, this);
      });
    }

    /**
     * Encode the Yjs model to ArrayBuffer
     *
     * @return {ArrayBuffer} The Yjs model as ArrayBuffer
     */
    exportModel () {
      const encoder = createEncoder();
      writeStructs(encoder, this, new Map());
      writeDeleteSet(encoder, this);
      return toBuffer(encoder)
    }
    _beforeChange () {}
    _callObserver (transaction, subs, remote) {}
    /**
     * Changes that happen inside of a transaction are bundled. This means that
     * the observer fires _after_ the transaction is finished and that all changes
     * that happened inside of the transaction are sent as one message to the
     * other peers.
     *
     * @param {Function} f The function that should be executed as a transaction
     * @param {?Boolean} remote Optional. Whether this transaction is initiated by
     *                          a remote peer. This should not be set manually!
     *                          Defaults to false.
     */
    transact (f, remote = false) {
      let initialCall = this._transaction === null;
      if (initialCall) {
        this._transaction = new Transaction(this);
        this.emit('beforeTransaction', this, this._transaction, remote);
      }
      try {
        f(this);
      } catch (e) {
        console.error(e);
      }
      if (initialCall) {
        this.emit('beforeObserverCalls', this, this._transaction, remote);
        const transaction = this._transaction;
        this._transaction = null;
        // emit change events on changed types
        transaction.changedTypes.forEach((subs, type) => {
          if (!type._deleted) {
            type._callObserver(transaction, subs, remote);
          }
        });
        transaction.changedParentTypes.forEach((events, type) => {
          if (!type._deleted) {
            events = events
              .filter(event =>
                !event.target._deleted
              );
            events
              .forEach(event => {
                event.currentTarget = type;
              });
            // we don't have to check for events.length
            // because there is no way events is empty..
            type._deepEventHandler.callEventListeners(transaction, events);
          }
        });
        // when all changes & events are processed, emit afterTransaction event
        this.emit('afterTransaction', this, transaction, remote);
      }
    }

    /**
     * Fake _start for root properties (y.set('name', type))
     *
     * @private
     */
    get _start () {
      return null
    }

    /**
     * Fake _start for root properties (y.set('name', type))
     *
     * @private
     */
    set _start (start) {}

    /**
     * Define a shared data type.
     *
     * Multiple calls of `y.define(name, TypeConstructor)` yield the same result
     * and do not overwrite each other. I.e.
     * `y.define(name, type) === y.define(name, type)`
     *
     * After this method is called, the type is also available on `y._map.get(name)`.
     *
     * *Best Practices:*
     * Either define all types right after the Yjs instance is created or always
     * use `y.define(..)` when accessing a type.
     *
     * @example
     *   // Option 1
     *   const y = new Y(..)
     *   y.define('myArray', YArray)
     *   y.define('myMap', YMap)
     *   // .. when accessing the type use y._map.get(name)
     *   y.share.myArray.insert(..)
     *   y.share.myMap.set(..)
     *
     *   // Option2
     *   const y = new Y(..)
     *   // .. when accessing the type use `y.define(..)`
     *   y.define('myArray', YArray).insert(..)
     *   y.define('myMap', YMap).set(..)
     *
     * @param {String} name
     * @param {Function} TypeConstructor The constructor of the type definition
     * @returns {Type} The created type. Constructed with TypeConstructor
     */
    define (name, TypeConstructor) {
      let id = createRootID(name, TypeConstructor);
      let type = this.os.get(id);
      if (this._map.get(name) === undefined) {
        this._map.set(name, type);
      } else if (this._map.get(name) !== type) {
        throw new Error('Type is already defined with a different constructor')
      }
      return type
    }

    /**
     * Get a defined type. The type must be defined locally. First define the
     * type with {@link define}.
     *
     * This returns the same value as `y.share[name]`
     *
     * @param {String} name The typename
     */
    get (name) {
      return this._map.get(name)
    }

    /**
     * Disconnect from the room, and destroy all traces of this Yjs instance.
     */
    destroy () {
      this.emit('destroyed', true);
      super.destroy();
      this._map = null;
      this.os = null;
      this.ds = null;
      this.ss = null;
    }
  }

  /**
   * @module structs
   */

  class ItemJSON extends Item {
    constructor () {
      super();
      this._content = null;
    }
    _copy () {
      let struct = super._copy();
      struct._content = this._content;
      return struct
    }
    get _length () {
      const c = this._content;
      return c !== null ? c.length : 0
    }
    /**
     * @param {Y} y
     * @param {decoding.Decoder} decoder
     */
    _fromBinary (y, decoder) {
      let missing = super._fromBinary(y, decoder);
      let len = readVarUint(decoder);
      this._content = new Array(len);
      for (let i = 0; i < len; i++) {
        const ctnt = readVarString(decoder);
        let parsed;
        if (ctnt === 'undefined') {
          parsed = undefined;
        } else {
          parsed = JSON.parse(ctnt);
        }
        this._content[i] = parsed;
      }
      return missing
    }
    /**
     * @param {encoding.Encoder} encoder
     */
    _toBinary (encoder) {
      super._toBinary(encoder);
      const len = this._length;
      writeVarUint(encoder, len);
      for (let i = 0; i < len; i++) {
        let encoded;
        const content = this._content[i];
        if (content === undefined) {
          encoded = 'undefined';
        } else {
          encoded = JSON.stringify(content);
        }
        writeVarString(encoder, encoded);
      }
    }
    /**
     * Transform this YXml Type to a readable format.
     * Useful for logging as all Items and Delete implement this method.
     *
     * @private
     */
    _logString () {
      return logItemHelper('ItemJSON', this, `content:${JSON.stringify(this._content)}`)
    }
    _splitAt (y, diff) {
      if (diff === 0) {
        return this
      } else if (diff >= this._length) {
        return this._right
      }
      let item = new ItemJSON();
      item._content = this._content.splice(diff);
      splitHelper(y, this, item, diff);
      return item
    }
  }

  /**
   * @module structs
   */

  class ItemString extends Item {
    constructor () {
      super();
      this._content = null;
    }
    _copy () {
      let struct = super._copy();
      struct._content = this._content;
      return struct
    }
    get _length () {
      return this._content.length
    }
    /**
     * @param {Y} y
     * @param {decoding.Decoder} decoder
     */
    _fromBinary (y, decoder) {
      let missing = super._fromBinary(y, decoder);
      this._content = readVarString(decoder);
      return missing
    }
    /**
     * @param {encoding.Encoder} encoder
     */
    _toBinary (encoder) {
      super._toBinary(encoder);
      writeVarString(encoder, this._content);
    }
    /**
     * Transform this YXml Type to a readable format.
     * Useful for logging as all Items and Delete implement this method.
     *
     * @private
     */
    _logString () {
      return logItemHelper('ItemString', this, `content:"${this._content}"`)
    }
    _splitAt (y, diff) {
      if (diff === 0) {
        return this
      } else if (diff >= this._length) {
        return this._right
      }
      let item = new ItemString();
      item._content = this._content.slice(diff);
      this._content = this._content.slice(0, diff);
      splitHelper(y, this, item, diff);
      return item
    }
  }

  /**
   * @module structs
   */

  class ItemFormat extends Item {
    constructor () {
      super();
      this.key = null;
      this.value = null;
    }
    _copy (undeleteChildren, copyPosition) {
      let struct = super._copy();
      struct.key = this.key;
      struct.value = this.value;
      return struct
    }
    get _length () {
      return 1
    }
    get _countable () {
      return false
    }
    /**
     * @param {Y} y
     * @param {decoding.Decoder} decoder
     */
    _fromBinary (y, decoder) {
      const missing = super._fromBinary(y, decoder);
      this.key = readVarString(decoder);
      this.value = JSON.parse(readVarString(decoder));
      return missing
    }
    /**
     * @param {encoding.Encoder} encoder
     */
    _toBinary (encoder) {
      super._toBinary(encoder);
      writeVarString(encoder, this.key);
      writeVarString(encoder, JSON.stringify(this.value));
    }
    /**
     * Transform this YXml Type to a readable format.
     * Useful for logging as all Items and Delete implement this method.
     *
     * @private
     */
    _logString () {
      return logItemHelper('ItemFormat', this, `key:${JSON.stringify(this.key)},value:${JSON.stringify(this.value)}`)
    }
  }

  /**
   * @module structs
   */

  class ItemEmbed extends Item {
    constructor () {
      super();
      this.embed = null;
    }
    _copy (undeleteChildren, copyPosition) {
      let struct = super._copy();
      struct.embed = this.embed;
      return struct
    }
    get _length () {
      return 1
    }
    /**
     * @param {Y} y
     * @param {decoding.Decoder} decoder
     */
    _fromBinary (y, decoder) {
      const missing = super._fromBinary(y, decoder);
      this.embed = JSON.parse(readVarString(decoder));
      return missing
    }
    /**
     * @param {encoding.Encoder} encoder
     */
    _toBinary (encoder) {
      super._toBinary(encoder);
      writeVarString(encoder, JSON.stringify(this.embed));
    }
    /**
     * Transform this YXml Type to a readable format.
     * Useful for logging as all Items and Delete implement this method.
     *
     * @private
     */
    _logString () {
      return logItemHelper('ItemEmbed', this, `embed:${JSON.stringify(this.embed)}`)
    }
  }

  /**
   * @module types
   */

  /**
   * Event that describes the changes on a YArray
   */
  class YArrayEvent extends YEvent {
    /**
     * @param {YArray} yarray The changed type
     * @param {Boolean} remote Whether the changed was caused by a remote peer
     * @param {Transaction} transaction The transaction object
     */
    constructor (yarray, remote, transaction) {
      super(yarray);
      this.remote = remote;
      this._transaction = transaction;
      this._addedElements = null;
      this._removedElements = null;
    }

    /**
     * Child elements that were added in this transaction.
     *
     * @return {Set}
     */
    get addedElements () {
      if (this._addedElements === null) {
        const target = this.target;
        const transaction = this._transaction;
        const addedElements = new Set();
        transaction.newTypes.forEach(type => {
          if (type._parent === target && !transaction.deletedStructs.has(type)) {
            addedElements.add(type);
          }
        });
        this._addedElements = addedElements;
      }
      return this._addedElements
    }

    /**
     * Child elements that were removed in this transaction.
     *
     * @return {Set}
     */
    get removedElements () {
      if (this._removedElements === null) {
        const target = this.target;
        const transaction = this._transaction;
        const removedElements = new Set();
        transaction.deletedStructs.forEach(struct => {
          if (struct._parent === target && !transaction.newTypes.has(struct)) {
            removedElements.add(struct);
          }
        });
        this._removedElements = removedElements;
      }
      return this._removedElements
    }
  }

  /**
   * A shared Array implementation.
   */
  class YArray extends Type {
    constructor () {
      super();
      this.length = 0;
    }
    /**
     * Creates YArray Event and calls observers.
     *
     * @private
     */
    _callObserver (transaction, parentSubs, remote) {
      this._callEventHandler(transaction, new YArrayEvent(this, remote, transaction));
    }

    /**
     * Returns the i-th element from a YArray.
     *
     * @param {number} index The index of the element to return from the YArray
     */
    get (index) {
      let n = this._start;
      while (n !== null) {
        if (!n._deleted && n._countable) {
          if (index < n._length) {
            switch (n.constructor) {
              case ItemJSON:
              case ItemString:
                return n._content[index]
              default:
                return n
            }
          }
          index -= n._length;
        }
        n = n._right;
      }
    }

    /**
     * Transforms this YArray to a JavaScript Array.
     *
     * @return {Array}
     */
    toArray () {
      return this.map(c => c)
    }

    /**
     * Transforms this Shared Type to a JSON object.
     *
     * @return {Array}
     */
    toJSON () {
      return this.map(c => {
        if (c instanceof Type) {
          return c.toJSON()
        }
        return c
      })
    }

    /**
     * Returns an Array with the result of calling a provided function on every
     * element of this YArray.
     *
     * @param {Function} f Function that produces an element of the new Array
     * @return {Array} A new array with each element being the result of the
     *                 callback function
     */
    map (f) {
      const res = [];
      this.forEach((c, i) => {
        res.push(f(c, i, this));
      });
      return res
    }

    /**
     * Executes a provided function on once on overy element of this YArray.
     *
     * @param {Function} f A function to execute on every element of this YArray.
     */
    forEach (f) {
      let index = 0;
      let n = this._start;
      while (n !== null) {
        if (!n._deleted && n._countable) {
          if (n instanceof Type) {
            f(n, index++, this);
          } else {
            const content = n._content;
            const contentLen = content.length;
            for (let i = 0; i < contentLen; i++) {
              index++;
              f(content[i], index, this);
            }
          }
        }
        n = n._right;
      }
    }

    [Symbol.iterator] () {
      return {
        next: function () {
          while (this._item !== null && (this._item._deleted || this._item._length <= this._itemElement)) {
            // item is deleted or itemElement does not exist (is deleted)
            this._item = this._item._right;
            this._itemElement = 0;
          }
          if (this._item === null) {
            return {
              done: true
            }
          }
          let content;
          if (this._item instanceof Type) {
            content = this._item;
          } else {
            content = this._item._content[this._itemElement++];
          }
          return {
            value: content,
            done: false
          }
        },
        _item: this._start,
        _itemElement: 0,
        _count: 0
      }
    }

    /**
     * Deletes elements starting from an index.
     *
     * @param {number} index Index at which to start deleting elements
     * @param {number} length The number of elements to remove. Defaults to 1.
     */
    delete (index, length = 1) {
      this._y.transact(() => {
        let item = this._start;
        let count = 0;
        while (item !== null && length > 0) {
          if (!item._deleted && item._countable) {
            if (count <= index && index < count + item._length) {
              const diffDel = index - count;
              item = item._splitAt(this._y, diffDel);
              item._splitAt(this._y, length);
              length -= item._length;
              item._delete(this._y);
              count += diffDel;
            } else {
              count += item._length;
            }
          }
          item = item._right;
        }
      });
      if (length > 0) {
        throw new Error('Delete exceeds the range of the YArray')
      }
    }

    /**
     * Inserts content after an element container.
     *
     * @private
     * @param {Item} left The element container to use as a reference.
     * @param {Array} content The Array of content to insert (see {@see insert})
     */
    insertAfter (left, content) {
      this._transact(y => {
        let right;
        if (left === null) {
          right = this._start;
        } else {
          right = left._right;
        }
        let prevJsonIns = null;
        for (let i = 0; i < content.length; i++) {
          let c = content[i];
          if (typeof c === 'function') {
            c = new c(); // eslint-disable-line new-cap
          }
          if (c instanceof Type) {
            if (prevJsonIns !== null) {
              if (y !== null) {
                prevJsonIns._integrate(y);
              }
              left = prevJsonIns;
              prevJsonIns = null;
            }
            c._origin = left;
            c._left = left;
            c._right = right;
            c._right_origin = right;
            c._parent = this;
            if (y !== null) {
              c._integrate(y);
            } else if (left === null) {
              this._start = c;
            } else {
              left._right = c;
            }
            left = c;
          } else {
            if (prevJsonIns === null) {
              prevJsonIns = new ItemJSON();
              prevJsonIns._origin = left;
              prevJsonIns._left = left;
              prevJsonIns._right = right;
              prevJsonIns._right_origin = right;
              prevJsonIns._parent = this;
              prevJsonIns._content = [];
            }
            prevJsonIns._content.push(c);
          }
        }
        if (prevJsonIns !== null) {
          if (y !== null) {
            prevJsonIns._integrate(y);
          } else if (prevJsonIns._left === null) {
            this._start = prevJsonIns;
          }
        }
      });
      return content
    }

    /**
     * Inserts new content at an index.
     *
     * Important: This function expects an array of content. Not just a content
     * object. The reason for this "weirdness" is that inserting several elements
     * is very efficient when it is done as a single operation.
     *
     * @example
     *  // Insert character 'a' at position 0
     *  yarray.insert(0, ['a'])
     *  // Insert numbers 1, 2 at position 1
     *  yarray.insert(2, [1, 2])
     *
     * @param {number} index The index to insert content at.
     * @param {Array} content The array of content
     */
    insert (index, content) {
      this._transact(() => {
        let left = null;
        let right = this._start;
        let count = 0;
        const y = this._y;
        while (right !== null) {
          const rightLen = right._deleted ? 0 : (right._length - 1);
          if (count <= index && index <= count + rightLen) {
            const splitDiff = index - count;
            right = right._splitAt(y, splitDiff);
            left = right._left;
            count += splitDiff;
            break
          }
          if (!right._deleted) {
            count += right._length;
          }
          left = right;
          right = right._right;
        }
        if (index > count) {
          throw new Error('Index exceeds array range!')
        }
        this.insertAfter(left, content);
      });
    }

    /**
     * Appends content to this YArray.
     *
     * @param {Array} content Array of content to append.
     */
    push (content) {
      let n = this._start;
      let lastUndeleted = null;
      while (n !== null) {
        if (!n._deleted) {
          lastUndeleted = n;
        }
        n = n._right;
      }
      this.insertAfter(lastUndeleted, content);
    }

    /**
     * Transform this YXml Type to a readable format.
     * Useful for logging as all Items and Delete implement this method.
     *
     * @private
     */
    _logString () {
      return logItemHelper('YArray', this, `start:${stringifyItemID(this._start)}"`)
    }
  }

  /**
   * @module types
   */

  /**
   * Event that describes the changes on a YMap.
   */
  class YMapEvent extends YEvent {
    /**
     * @param {YMap} ymap The YArray that changed.
     * @param {Set<any>} subs The keys that changed.
     * @param {boolean} remote Whether the change was created by a remote peer.
     */
    constructor (ymap, subs, remote) {
      super(ymap);
      this.keysChanged = subs;
      this.remote = remote;
    }
  }

  /**
   * A shared Map implementation.
   */
  class YMap extends Type {
    /**
     * Creates YMap Event and calls observers.
     *
     * @private
     */
    _callObserver (transaction, parentSubs, remote) {
      this._callEventHandler(transaction, new YMapEvent(this, parentSubs, remote));
    }

    /**
     * Transforms this Shared Type to a JSON object.
     *
     * @return {Object}
     */
    toJSON () {
      const map = {};
      for (let [key, item] of this._map) {
        if (!item._deleted) {
          let res;
          if (item instanceof Type) {
            if (item.toJSON !== undefined) {
              res = item.toJSON();
            } else {
              res = item.toString();
            }
          } else {
            res = item._content[0];
          }
          map[key] = res;
        }
      }
      return map
    }

    /**
     * Returns the keys for each element in the YMap Type.
     *
     * @return {Array}
     */
    keys () {
      // TODO: Should return either Iterator or Set!
      let keys = [];
      for (let [key, value] of this._map) {
        if (!value._deleted) {
          keys.push(key);
        }
      }
      return keys
    }

    /**
     * Remove a specified element from this YMap.
     *
     * @param {string} key The key of the element to remove.
     */
    delete (key) {
      this._transact((y) => {
        let c = this._map.get(key);
        if (y !== null && c !== undefined) {
          c._delete(y);
        }
      });
    }

    /**
     * Adds or updates an element with a specified key and value.
     *
     * @param {string} key The key of the element to add to this YMap
     * @param {Object | string | number | Type} value The value of the element to add
     */
    set (key, value) {
      this._transact(y => {
        const old = this._map.get(key) || null;
        if (old !== null) {
          if (
            old.constructor === ItemJSON &&
            !old._deleted && old._content[0] === value
          ) {
            // Trying to overwrite with same value
            // break here
            return value
          }
          if (y !== null) {
            old._delete(y);
          }
        }
        let v;
        if (typeof value === 'function') {
          v = new value(); // eslint-disable-line new-cap
          value = v;
        } else if (value instanceof Item) {
          v = value;
        } else {
          v = new ItemJSON();
          v._content = [value];
        }
        v._right = old;
        v._right_origin = old;
        v._parent = this;
        v._parentSub = key;
        if (y !== null) {
          v._integrate(y);
        } else {
          this._map.set(key, v);
        }
      });
      return value
    }

    /**
     * Returns a specified element from this YMap.
     *
     * @param {string} key The key of the element to return.
     */
    get (key) {
      let v = this._map.get(key);
      if (v === undefined || v._deleted) {
        return undefined
      }
      if (v instanceof Type) {
        return v
      } else {
        return v._content[v._content.length - 1]
      }
    }

    /**
     * Returns a boolean indicating whether the specified key exists or not.
     *
     * @param {string} key The key to test.
     */
    has (key) {
      let v = this._map.get(key);
      if (v === undefined || v._deleted) {
        return false
      } else {
        return true
      }
    }

    /**
     * Transform this YXml Type to a readable format.
     * Useful for logging as all Items and Delete implement this method.
     *
     * @private
     */
    _logString () {
      return logItemHelper('YMap', this, `mapSize:${this._map.size}`)
    }
  }

  /**
   * @module types
   */

  /**
   * @private
   */
  const integrateItem = (item, parent, y, left, right) => {
    item._origin = left;
    item._left = left;
    item._right = right;
    item._right_origin = right;
    item._parent = parent;
    if (y !== null) {
      item._integrate(y);
    } else if (left === null) {
      parent._start = item;
    } else {
      left._right = item;
    }
  };

  /**
   * @private
   */
  const findNextPosition = (currentAttributes, parent, left, right, count) => {
    while (right !== null && count > 0) {
      switch (right.constructor) {
        case ItemEmbed:
        case ItemString:
          const rightLen = right._deleted ? 0 : (right._length - 1);
          if (count <= rightLen) {
            right = right._splitAt(parent._y, count);
            left = right._left;
            return [left, right, currentAttributes]
          }
          if (right._deleted === false) {
            count -= right._length;
          }
          break
        case ItemFormat:
          if (right._deleted === false) {
            updateCurrentAttributes(currentAttributes, right);
          }
          break
      }
      left = right;
      right = right._right;
    }
    return [left, right, currentAttributes]
  };

  /**
   * @private
   */
  const findPosition = (parent, index) => {
    let currentAttributes = new Map();
    let left = null;
    let right = parent._start;
    return findNextPosition(currentAttributes, parent, left, right, index)
  };

  /**
   * Negate applied formats
   *
   * @private
   */
  const insertNegatedAttributes = (y, parent, left, right, negatedAttributes) => {
    // check if we really need to remove attributes
    while (
      right !== null && (
        right._deleted === true || (
          right.constructor === ItemFormat &&
          (negatedAttributes.get(right.key) === right.value)
        )
      )
    ) {
      if (right._deleted === false) {
        negatedAttributes.delete(right.key);
      }
      left = right;
      right = right._right;
    }
    for (let [key, val] of negatedAttributes) {
      let format = new ItemFormat();
      format.key = key;
      format.value = val;
      integrateItem(format, parent, y, left, right);
      left = format;
    }
    return [left, right]
  };

  /**
   * @private
   */
  const updateCurrentAttributes = (currentAttributes, item) => {
    const value = item.value;
    const key = item.key;
    if (value === null) {
      currentAttributes.delete(key);
    } else {
      currentAttributes.set(key, value);
    }
  };

  /**
   * @private
   */
  const minimizeAttributeChanges = (left, right, currentAttributes, attributes) => {
    // go right while attributes[right.key] === right.value (or right is deleted)
    while (true) {
      if (right === null) {
        break
      } else if (right._deleted === true) ; else if (right.constructor === ItemFormat && (attributes[right.key] || null) === right.value) {
        // found a format, update currentAttributes and continue
        updateCurrentAttributes(currentAttributes, right);
      } else {
        break
      }
      left = right;
      right = right._right;
    }
    return [left, right]
  };

  /**
   * @private
   */
  const insertAttributes = (y, parent, left, right, attributes, currentAttributes) => {
    const negatedAttributes = new Map();
    // insert format-start items
    for (let key in attributes) {
      const val = attributes[key];
      const currentVal = currentAttributes.get(key);
      if (currentVal !== val) {
        // save negated attribute (set null if currentVal undefined)
        negatedAttributes.set(key, currentVal || null);
        let format = new ItemFormat();
        format.key = key;
        format.value = val;
        integrateItem(format, parent, y, left, right);
        left = format;
      }
    }
    return [left, right, negatedAttributes]
  };

  /**
   * @private
   */
  const insertText = (y, text, parent, left, right, currentAttributes, attributes) => {
    for (let [key] of currentAttributes) {
      if (attributes[key] === undefined) {
        attributes[key] = null;
      }
    }
    [left, right] = minimizeAttributeChanges(left, right, currentAttributes, attributes);
    let negatedAttributes;
    [left, right, negatedAttributes] = insertAttributes(y, parent, left, right, attributes, currentAttributes);
    // insert content
    let item;
    if (text.constructor === String) {
      item = new ItemString();
      item._content = text;
    } else {
      item = new ItemEmbed();
      item.embed = text;
    }
    integrateItem(item, parent, y, left, right);
    left = item;
    return insertNegatedAttributes(y, parent, left, right, negatedAttributes)
  };

  /**
   * @private
   */
  const formatText = (y, length, parent, left, right, currentAttributes, attributes) => {
    [left, right] = minimizeAttributeChanges(left, right, currentAttributes, attributes);
    let negatedAttributes;
    [left, right, negatedAttributes] = insertAttributes(y, parent, left, right, attributes, currentAttributes);
    // iterate until first non-format or null is found
    // delete all formats with attributes[format.key] != null
    while (length > 0 && right !== null) {
      if (right._deleted === false) {
        switch (right.constructor) {
          case ItemFormat:
            const attr = attributes[right.key];
            if (attr !== undefined) {
              if (attr === right.value) {
                negatedAttributes.delete(right.key);
              } else {
                negatedAttributes.set(right.key, right.value);
              }
              right._delete(y);
            }
            updateCurrentAttributes(currentAttributes, right);
            break
          case ItemEmbed:
          case ItemString:
            right._splitAt(y, length);
            length -= right._length;
            break
        }
      }
      left = right;
      right = right._right;
    }
    return insertNegatedAttributes(y, parent, left, right, negatedAttributes)
  };

  /**
   * @private
   */
  const deleteText = (y, length, parent, left, right, currentAttributes) => {
    while (length > 0 && right !== null) {
      if (right._deleted === false) {
        switch (right.constructor) {
          case ItemFormat:
            updateCurrentAttributes(currentAttributes, right);
            break
          case ItemEmbed:
          case ItemString:
            right._splitAt(y, length);
            length -= right._length;
            right._delete(y);
            break
        }
      }
      left = right;
      right = right._right;
    }
    return [left, right]
  };

  // TODO: In the quill delta representation we should also use the format {ops:[..]}
  /**
   * The Quill Delta format represents changes on a text document with
   * formatting information. For mor information visit {@link https://quilljs.com/docs/delta/|Quill Delta}
   *
   * @example
   *   {
   *     ops: [
   *       { insert: 'Gandalf', attributes: { bold: true } },
   *       { insert: ' the ' },
   *       { insert: 'Grey', attributes: { color: '#cccccc' } }
   *     ]
   *   }
   *
   * @typedef {Array<Object>} Delta
   */

  /**
    * Attributes that can be assigned to a selection of text.
    *
    * @example
    *   {
    *     bold: true,
    *     font-size: '40px'
    *   }
    *
    * @typedef {Object} TextAttributes
    */

  /**
   * Event that describes the changes on a YText type.
   *
   * @private
   */
  class YTextEvent extends YArrayEvent {
    constructor (ytext, remote, transaction) {
      super(ytext, remote, transaction);
      this._delta = null;
    }
    // TODO: Should put this in a separate function. toDelta shouldn't be included
    //       in every Yjs distribution
    /**
     * Compute the changes in the delta format.
     *
     * @return {Delta} A {@link https://quilljs.com/docs/delta/|Quill Delta}) that
     *                 represents the changes on the document.
     *
     * @public
     */
    get delta () {
      if (this._delta === null) {
        const y = this.target._y;
        y.transact(() => {
          let item = this.target._start;
          const delta = [];
          const added = this.addedElements;
          const removed = this.removedElements;
          this._delta = delta;
          let action = null;
          let attributes = {}; // counts added or removed new attributes for retain
          const currentAttributes = new Map(); // saves all current attributes for insert
          const oldAttributes = new Map();
          let insert = '';
          let retain = 0;
          let deleteLen = 0;
          const addOp = function addOp () {
            if (action !== null) {
              /**
               * @type {any}
               */
              let op;
              switch (action) {
                case 'delete':
                  op = { delete: deleteLen };
                  deleteLen = 0;
                  break
                case 'insert':
                  op = { insert };
                  if (currentAttributes.size > 0) {
                    op.attributes = {};
                    for (let [key, value] of currentAttributes) {
                      if (value !== null) {
                        op.attributes[key] = value;
                      }
                    }
                  }
                  insert = '';
                  break
                case 'retain':
                  op = { retain };
                  if (Object.keys(attributes).length > 0) {
                    op.attributes = {};
                    for (let key in attributes) {
                      op.attributes[key] = attributes[key];
                    }
                  }
                  retain = 0;
                  break
              }
              delta.push(op);
              action = null;
            }
          };
          while (item !== null) {
            switch (item.constructor) {
              case ItemEmbed:
                if (added.has(item)) {
                  addOp();
                  action = 'insert';
                  insert = item.embed;
                  addOp();
                } else if (removed.has(item)) {
                  if (action !== 'delete') {
                    addOp();
                    action = 'delete';
                  }
                  deleteLen += 1;
                } else if (item._deleted === false) {
                  if (action !== 'retain') {
                    addOp();
                    action = 'retain';
                  }
                  retain += 1;
                }
                break
              case ItemString:
                if (added.has(item)) {
                  if (action !== 'insert') {
                    addOp();
                    action = 'insert';
                  }
                  insert += item._content;
                } else if (removed.has(item)) {
                  if (action !== 'delete') {
                    addOp();
                    action = 'delete';
                  }
                  deleteLen += item._length;
                } else if (item._deleted === false) {
                  if (action !== 'retain') {
                    addOp();
                    action = 'retain';
                  }
                  retain += item._length;
                }
                break
              case ItemFormat:
                if (added.has(item)) {
                  const curVal = currentAttributes.get(item.key) || null;
                  if (curVal !== item.value) {
                    if (action === 'retain') {
                      addOp();
                    }
                    if (item.value === (oldAttributes.get(item.key) || null)) {
                      delete attributes[item.key];
                    } else {
                      attributes[item.key] = item.value;
                    }
                  } else {
                    item._delete(y);
                  }
                } else if (removed.has(item)) {
                  oldAttributes.set(item.key, item.value);
                  const curVal = currentAttributes.get(item.key) || null;
                  if (curVal !== item.value) {
                    if (action === 'retain') {
                      addOp();
                    }
                    attributes[item.key] = curVal;
                  }
                } else if (item._deleted === false) {
                  oldAttributes.set(item.key, item.value);
                  const attr = attributes[item.key];
                  if (attr !== undefined) {
                    if (attr !== item.value) {
                      if (action === 'retain') {
                        addOp();
                      }
                      if (item.value === null) {
                        attributes[item.key] = item.value;
                      } else {
                        delete attributes[item.key];
                      }
                    } else {
                      item._delete(y);
                    }
                  }
                }
                if (item._deleted === false) {
                  if (action === 'insert') {
                    addOp();
                  }
                  updateCurrentAttributes(currentAttributes, item);
                }
                break
            }
            item = item._right;
          }
          addOp();
          while (this._delta.length > 0) {
            let lastOp = this._delta[this._delta.length - 1];
            if (lastOp.retain !== undefined && lastOp.attributes === undefined) {
              // retain delta's if they don't assign attributes
              this._delta.pop();
            } else {
              break
            }
          }
        });
      }
      return this._delta
    }
  }

  /**
   * Type that represents text with formatting information.
   *
   * This type replaces y-richtext as this implementation is able to handle
   * block formats (format information on a paragraph), embeds (complex elements
   * like pictures and videos), and text formats (**bold**, *italic*).
   */
  class YText extends YArray {
    /**
     * @param {String} [string] The initial value of the YText.
     */
    constructor (string) {
      super();
      if (typeof string === 'string') {
        const start = new ItemString();
        start._parent = this;
        start._content = string;
        this._start = start;
      }
    }

    /**
     * Creates YMap Event and calls observers.
     *
     * @private
     */
    _callObserver (transaction, parentSubs, remote) {
      this._callEventHandler(transaction, new YTextEvent(this, remote, transaction));
    }

    toDom () {
      return document.createTextNode(this.toString())
    }

    /**
     * Returns the unformatted string representation of this YText type.
     *
     * @public
     */
    toString () {
      let str = '';
      /**
       * @type {any}
       */
      let n = this._start;
      while (n !== null) {
        if (!n._deleted && n._countable) {
          str += n._content;
        }
        n = n._right;
      }
      return str
    }

    toDomString () {
      return this.toDelta().map(delta => {
        const nestedNodes = [];
        for (let nodeName in delta.attributes) {
          const attrs = [];
          for (let key in delta.attributes[nodeName]) {
            attrs.push({key, value: delta.attributes[nodeName][key]});
          }
          // sort attributes to get a unique order
          attrs.sort((a, b) => a.key < b.key ? -1 : 1);
          nestedNodes.push({ nodeName, attrs });
        }
        // sort node order to get a unique order
        nestedNodes.sort((a, b) => a.nodeName < b.nodeName ? -1 : 1);
        // now convert to dom string
        let str = '';
        for (let i = 0; i < nestedNodes.length; i++) {
          const node = nestedNodes[i];
          str += `<${node.nodeName}`;
          for (let j = 0; j < node.attrs.length; j++) {
            const attr = node.attrs[i];
            str += ` ${attr.key}="${attr.value}"`;
          }
          str += '>';
        }
        str += delta.insert;
        for (let i = nestedNodes.length - 1; i >= 0; i--) {
          str += `</${nestedNodes[i].nodeName}>`;
        }
        return str
      })
    }

    /**
     * Apply a {@link Delta} on this shared YText type.
     *
     * @param {Delta} delta The changes to apply on this element.
     *
     * @public
     */
    applyDelta (delta) {
      this._transact(y => {
        let left = null;
        let right = this._start;
        const currentAttributes = new Map();
        for (let i = 0; i < delta.length; i++) {
          let op = delta[i];
          if (op.insert !== undefined) {
  [left, right] = insertText(y, op.insert, this, left, right, currentAttributes, op.attributes || {});
          } else if (op.retain !== undefined) {
  [left, right] = formatText(y, op.retain, this, left, right, currentAttributes, op.attributes || {});
          } else if (op.delete !== undefined) {
  [left, right] = deleteText(y, op.delete, this, left, right, currentAttributes);
          }
        }
      });
    }

    /**
     * Returns the Delta representation of this YText type.
     *
     * @return {Delta} The Delta representation of this type.
     *
     * @public
     */
    toDelta () {
      let ops = [];
      let currentAttributes = new Map();
      let str = '';
      /**
       * @type {any}
       */
      let n = this._start;
      function packStr () {
        if (str.length > 0) {
          // pack str with attributes to ops
          let attributes = {};
          let addAttributes = false;
          for (let [key, value] of currentAttributes) {
            addAttributes = true;
            attributes[key] = value;
          }
          let op = { insert: str };
          if (addAttributes) {
            op.attributes = attributes;
          }
          ops.push(op);
          str = '';
        }
      }
      while (n !== null) {
        if (!n._deleted) {
          switch (n.constructor) {
            case ItemString:
              str += n._content;
              break
            case ItemFormat:
              packStr();
              updateCurrentAttributes(currentAttributes, n);
              break
          }
        }
        n = n._right;
      }
      packStr();
      return ops
    }

    /**
     * Insert text at a given index.
     *
     * @param {number} index The index at which to start inserting.
     * @param {String} text The text to insert at the specified position.
     * @param {TextAttributes} attributes Optionally define some formatting
     *                                    information to apply on the inserted
     *                                    Text.
     * @public
     */
    insert (index, text, attributes = {}) {
      if (text.length <= 0) {
        return
      }
      this._transact(y => {
        let [left, right, currentAttributes] = findPosition(this, index);
        insertText(y, text, this, left, right, currentAttributes, attributes);
      });
    }

    /**
     * Inserts an embed at a index.
     *
     * @param {number} index The index to insert the embed at.
     * @param {Object} embed The Object that represents the embed.
     * @param {TextAttributes} attributes Attribute information to apply on the
     *                                    embed
     *
     * @public
     */
    insertEmbed (index, embed, attributes = {}) {
      if (embed.constructor !== Object) {
        throw new Error('Embed must be an Object')
      }
      this._transact(y => {
        let [left, right, currentAttributes] = findPosition(this, index);
        insertText(y, embed, this, left, right, currentAttributes, attributes);
      });
    }

    /**
     * Deletes text starting from an index.
     *
     * @param {number} index Index at which to start deleting.
     * @param {number} length The number of characters to remove. Defaults to 1.
     *
     * @public
     */
    delete (index, length) {
      if (length === 0) {
        return
      }
      this._transact(y => {
        let [left, right, currentAttributes] = findPosition(this, index);
        deleteText(y, length, this, left, right, currentAttributes);
      });
    }

    /**
     * Assigns properties to a range of text.
     *
     * @param {number} index The position where to start formatting.
     * @param {number} length The amount of characters to assign properties to.
     * @param {TextAttributes} attributes Attribute information to apply on the
     *                                    text.
     *
     * @public
     */
    format (index, length, attributes) {
      this._transact(y => {
        let [left, right, currentAttributes] = findPosition(this, index);
        if (right === null) {
          return
        }
        formatText(y, length, this, left, right, currentAttributes, attributes);
      });
    }
    // TODO: De-duplicate code. The following code is in every type.
    /**
     * Transform this YText to a readable format.
     * Useful for logging as all Items implement this method.
     *
     * @private
     */
    _logString () {
      return logItemHelper('YText', this)
    }
  }

  /**
   * @module utils
   */

  /**
   * Creates a mutual exclude function with the following property:
   *
   * @example
   * const mutex = createMutex()
   * mutex(() => {
   *   // This function is immediately executed
   *   mutex(() => {
   *     // This function is not executed, as the mutex is already active.
   *   })
   * })
   *
   * @return {Function} A mutual exclude function
   * @public
   */
  const createMutex = () => {
    let token = true;
    return (f, g) => {
      if (token) {
        token = false;
        try {
          f();
        } finally {
          token = true;
        }
      } else if (g !== undefined) {
        g();
      }
    }
  };

  /**
   * @module bindings/dom
   */

  /**
   * @module types
   */

  /**
   * Define the elements to which a set of CSS queries apply.
   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors|CSS_Selectors}
   *
   * @example
   *   query = '.classSelector'
   *   query = 'nodeSelector'
   *   query = '#idSelector'
   *
   * @typedef {string} CSS_Selector
   */

  /**
   * Represents a subset of the nodes of a YXmlElement / YXmlFragment and a
   * position within them.
   *
   * Can be created with {@link YXmlFragment#createTreeWalker}
   *
   * @public
   */
  class YXmlTreeWalker {
    constructor (root, f) {
      this._filter = f || (() => true);
      this._root = root;
      this._currentNode = root;
      this._firstCall = true;
    }
    [Symbol.iterator] () {
      return this
    }
    /**
     * Get the next node.
     *
     * @return {YXmlElement} The next node.
     *
     * @public
     */
    next () {
      let n = this._currentNode;
      if (this._firstCall) {
        this._firstCall = false;
        if (!n._deleted && this._filter(n)) {
          return { value: n, done: false }
        }
      }
      do {
        if (!n._deleted && (n.constructor === YXmlElement || n.constructor === YXmlFragment) && n._start !== null) {
          // walk down in the tree
          n = n._start;
        } else {
          // walk right or up in the tree
          while (n !== this._root) {
            if (n._right !== null) {
              n = n._right;
              break
            }
            n = n._parent;
          }
          if (n === this._root) {
            n = null;
          }
        }
        if (n === this._root) {
          break
        }
      } while (n !== null && (n._deleted || !this._filter(n)))
      this._currentNode = n;
      if (n === null) {
        return { done: true }
      } else {
        return { value: n, done: false }
      }
    }
  }

  /**
   * @module types
   */

  /**
   * An Event that describes changes on a YXml Element or Yxml Fragment
   *
   * @protected
   */
  class YXmlEvent extends YEvent {
    /**
     * @param {Type} target The target on which the event is created.
     * @param {Set} subs The set of changed attributes. `null` is included if the
     *                   child list changed.
     * @param {Boolean} remote Whether this change was created by a remote peer.
     * @param {Transaction} transaction The transaction instance with wich the
     *                                  change was created.
     */
    constructor (target, subs, remote, transaction) {
      super(target);
      /**
       * The transaction instance for the computed change.
       * @type {Transaction}
       */
      this._transaction = transaction;
      /**
       * Whether the children changed.
       * @type {Boolean}
       */
      this.childListChanged = false;
      /**
       * Set of all changed attributes.
       * @type {Set}
       */
      this.attributesChanged = new Set();
      /**
       * Whether this change was created by a remote peer.
       * @type {Boolean}
       */
      this.remote = remote;
      subs.forEach((sub) => {
        if (sub === null) {
          this.childListChanged = true;
        } else {
          this.attributesChanged.add(sub);
        }
      });
    }
  }

  /**
   * @module types
   */

  /**
   * Dom filter function.
   *
   * @callback domFilter
   * @param {string} nodeName The nodeName of the element
   * @param {Map} attributes The map of attributes.
   * @return {boolean} Whether to include the Dom node in the YXmlElement.
   */

  /**
   * Define the elements to which a set of CSS queries apply.
   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors|CSS_Selectors}
   *
   * @example
   *   query = '.classSelector'
   *   query = 'nodeSelector'
   *   query = '#idSelector'
   *
   * @typedef {string} CSS_Selector
   *//**
   * @module types
   */

  /**
   * Represents a list of {@link YXmlElement}.and {@link YXmlText} types.
   * A YxmlFragment is similar to a {@link YXmlElement}, but it does not have a
   * nodeName and it does not have attributes. Though it can be bound to a DOM
   * element - in this case the attributes and the nodeName are not shared.
   *
   * @public
   */
  class YXmlFragment extends YArray {
    /**
     * Create a subtree of childNodes.
     *
     * @example
     * const walker = elem.createTreeWalker(dom => dom.nodeName === 'div')
     * for (let node in walker) {
     *   // `node` is a div node
     *   nop(node)
     * }
     *
     * @param {Function} filter Function that is called on each child element and
     *                          returns a Boolean indicating whether the child
     *                          is to be included in the subtree.
     * @return {YXmlTreeWalker} A subtree and a position within it.
     *
     * @public
     */
    createTreeWalker (filter) {
      return new YXmlTreeWalker(this, filter)
    }

    /**
     * Returns the first YXmlElement that matches the query.
     * Similar to DOM's {@link querySelector}.
     *
     * Query support:
     *   - tagname
     * TODO:
     *   - id
     *   - attribute
     *
     * @param {CSS_Selector} query The query on the children.
     * @return {YXmlElement} The first element that matches the query or null.
     *
     * @public
     */
    querySelector (query) {
      query = query.toUpperCase();
      const iterator = new YXmlTreeWalker(this, element => element.nodeName === query);
      const next = iterator.next();
      if (next.done) {
        return null
      } else {
        return next.value
      }
    }

    /**
     * Returns all YXmlElements that match the query.
     * Similar to Dom's {@link querySelectorAll}.
     *
     * TODO: Does not yet support all queries. Currently only query by tagName.
     *
     * @param {CSS_Selector} query The query on the children
     * @return {Array<YXmlElement>} The elements that match this query.
     *
     * @public
     */
    querySelectorAll (query) {
      query = query.toUpperCase();
      return Array.from(new YXmlTreeWalker(this, element => element.nodeName === query))
    }

    /**
     * Creates YArray Event and calls observers.
     *
     * @private
     */
    _callObserver (transaction, parentSubs, remote) {
      this._callEventHandler(transaction, new YXmlEvent(this, parentSubs, remote, transaction));
    }

    toString () {
      return this.toDomString()
    }

    /**
     * Get the string representation of all the children of this YXmlFragment.
     *
     * @return {string} The string representation of all children.
     */
    toDomString () {
      return this.map(xml => xml.toDomString()).join('')
    }

    /**
     * Creates a Dom Element that mirrors this YXmlElement.
     *
     * @param {Document} [_document=document] The document object (you must define
     *                                        this when calling this method in
     *                                        nodejs)
     * @param {Object.<string, any>} [hooks={}] Optional property to customize how hooks
     *                                             are presented in the // TODO: include all tests

     * @param {DomBinding} [binding] You should not set this property. T// TODO: include all tests

     *                               used if DomBinding wants to create // TODO: include all tests

     *                               association to the created DOM type// TODO: include all tests

     * @return {DocumentFragment} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}
     *
     * @public
     */
    toDom (_document = document, hooks = {}, binding) {
      const fragment = _document.createDocumentFragment();
      createAssociation(binding, fragment, this);
      this.forEach(xmlType => {
        fragment.insertBefore(xmlType.toDom(_document, hooks, binding), null);
      });
      return fragment
    }
    /**
     * Transform this YXml Type to a readable format.
     * Useful for logging as all Items and Delete implement this method.
     *
     * @private
     */
    _logString () {
      return logItemHelper('YXml', this)
    }
  }

  /**
   * An YXmlElement imitates the behavior of a
   * {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}.
   *
   * * An YXmlElement has attributes (key value pairs)
   * * An YXmlElement has childElements that must inherit from YXmlElement
   */
  class YXmlElement extends YXmlFragment {
    constructor (nodeName = 'UNDEFINED') {
      super();
      this.nodeName = nodeName.toUpperCase();
    }

    /**
     * Creates an Item with the same effect as this Item (without position effect)
     *
     * @private
     */
    _copy () {
      let struct = super._copy();
      struct.nodeName = this.nodeName;
      return struct
    }

    /**
     * Read the next Item in a Decoder and fill this Item with the read data.
     *
     * This is called when data is received from a remote peer.
     *
     * @private
     * @param {Y} y The Yjs instance that this Item belongs to.
     * @param {decoding.Decoder} decoder The decoder object to read data from.
     */
    _fromBinary (y, decoder) {
      const missing = super._fromBinary(y, decoder);
      this.nodeName = readVarString(decoder);
      return missing
    }

    /**
     * Transform the properties of this type to binary and write it to an
     * BinaryEncoder.
     *
     * This is called when this Item is sent to a remote peer.
     *
     * @private
     * @param {encoding.Encoder} encoder The encoder to write data to.
     */
    _toBinary (encoder) {
      super._toBinary(encoder);
      writeVarString(encoder, this.nodeName);
    }

    /**
     * Integrates this Item into the shared structure.
     *
     * This method actually applies the change to the Yjs instance. In case of
     * Item it connects _left and _right to this Item and calls the
     * {@link Item#beforeChange} method.
     *
     * * Checks for nodeName
     * * Sets domFilter
     *
     * @private
     * @param {Y} y The Yjs instance
     */
    _integrate (y) {
      if (this.nodeName === null) {
        throw new Error('nodeName must be defined!')
      }
      super._integrate(y);
    }

    toString () {
      return this.toDomString()
    }

    /**
     * Returns the string representation of this YXmlElement.
     * The attributes are ordered by attribute-name, so you can easily use this
     * method to compare YXmlElements
     *
     * @return {String} The string representation of this type.
     *
     * @public
     */
    toDomString () {
      const attrs = this.getAttributes();
      const stringBuilder = [];
      const keys = [];
      for (let key in attrs) {
        keys.push(key);
      }
      keys.sort();
      const keysLen = keys.length;
      for (let i = 0; i < keysLen; i++) {
        const key = keys[i];
        stringBuilder.push(key + '="' + attrs[key] + '"');
      }
      const nodeName = this.nodeName.toLocaleLowerCase();
      const attrsString = stringBuilder.length > 0 ? ' ' + stringBuilder.join(' ') : '';
      return `<${nodeName}${attrsString}>${super.toDomString()}</${nodeName}>`
    }

    /**
     * Removes an attribute from this YXmlElement.
     *
     * @param {String} attributeName The attribute name that is to be removed.
     *
     * @public
     */
    removeAttribute (attributeName) {
      return YMap.prototype.delete.call(this, attributeName)
    }

    /**
     * Sets or updates an attribute.
     *
     * @param {String} attributeName The attribute name that is to be set.
     * @param {String} attributeValue The attribute value that is to be set.
     *
     * @public
     */
    setAttribute (attributeName, attributeValue) {
      return YMap.prototype.set.call(this, attributeName, attributeValue)
    }

    /**
     * Returns an attribute value that belongs to the attribute name.
     *
     * @param {String} attributeName The attribute name that identifies the
     *                               queried value.
     * @return {String} The queried attribute value.
     *
     * @public
     */
    getAttribute (attributeName) {
      return YMap.prototype.get.call(this, attributeName)
    }

    /**
     * Returns all attribute name/value pairs in a JSON Object.
     *
     * @return {Object} A JSON Object that describes the attributes.
     *
     * @public
     */
    getAttributes () {
      const obj = {};
      for (let [key, value] of this._map) {
        if (!value._deleted) {
          obj[key] = value._content[0];
        }
      }
      return obj
    }
    // TODO: outsource the binding property.
    /**
     * Creates a Dom Element that mirrors this YXmlElement.
     *
     * @param {Document} [_document=document] The document object (you must define
     *                                        this when calling this method in
     *                                        nodejs)
     * @param {Object<string, any>} [hooks={}] Optional property to customize how hooks
     *                                             are presented in the DOM
     * @param {DomBinding} [binding] You should not set this property. This is
     *                               used if DomBinding wants to create a
     *                               association to the created DOM type.
     * @return {Element} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}
     *
     * @public
     */
    toDom (_document = document, hooks = {}, binding) {
      const dom = _document.createElement(this.nodeName);
      let attrs = this.getAttributes();
      for (let key in attrs) {
        dom.setAttribute(key, attrs[key]);
      }
      this.forEach(yxml => {
        dom.appendChild(yxml.toDom(_document, hooks, binding));
      });
      createAssociation(binding, dom, this);
      return dom
    }
  }

  /**
   * @module utils
   */

  /**
   * @module bindings/dom
   */

  /**
   * @module bindings/dom
   */

  /**
   * @module diff
   */

  /**
   * @module bindings/dom
   */

  /**
   * @module bindings/dom
   */

  /**
   * A filter defines which elements and attributes to share.
   * Return null if the node should be filtered. Otherwise return the Map of
   * accepted attributes.
   *
   * @callback FilterFunction
   * @param {string} nodeName
   * @param {Map} attrs
   * @return {Map|null}
   */

  /**
   * @module types
   */

  /**
   * You can manage binding to a custom type with YXmlHook.
   *
   * @public
   */
  class YXmlHook extends YMap {
    /**
     * @param {String} hookName nodeName of the Dom Node.
     */
    constructor (hookName) {
      super();
      this.hookName = null;
      if (hookName !== undefined) {
        this.hookName = hookName;
      }
    }

    /**
     * Creates an Item with the same effect as this Item (without position effect)
     *
     * @private
     */
    _copy () {
      const struct = super._copy();
      struct.hookName = this.hookName;
      return struct
    }

    /**
     * Creates a Dom Element that mirrors this YXmlElement.
     *
     * @param {Document} [_document=document] The document object (you must define
     *                                        this when calling this method in
     *                                        nodejs)
     * @param {Object.<string, any>} [hooks] Optional property to customize how hooks
     *                                             are presented in the DOM
     * @param {DomBinding} [binding] You should not set this property. This is
     *                               used if DomBinding wants to create a
     *                               association to the created DOM type
     * @return {Element} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}
     *
     * @public
     */
    toDom (_document = document, hooks = {}, binding) {
      const hook = hooks[this.hookName];
      let dom;
      if (hook !== undefined) {
        dom = hook.createDom(this);
      } else {
        dom = document.createElement(this.hookName);
      }
      dom.setAttribute('data-yjs-hook', this.hookName);
      createAssociation(binding, dom, this);
      return dom
    }

    /**
     * Read the next Item in a Decoder and fill this Item with the read data.
     *
     * This is called when data is received from a remote peer.
     *
     * @param {Y} y The Yjs instance that this Item belongs to.
     * @param {decoding.Decoder} decoder The decoder object to read data from.
     *
     * @private
     */
    _fromBinary (y, decoder) {
      const missing = super._fromBinary(y, decoder);
      this.hookName = readVarString(decoder);
      return missing
    }

    /**
     * Transform the properties of this type to binary and write it to an
     * BinaryEncoder.
     *
     * This is called when this Item is sent to a remote peer.
     *
     * @param {encoding.Encoder} encoder The encoder to write data to.
     *
     * @private
     */
    _toBinary (encoder) {
      super._toBinary(encoder);
      writeVarString(encoder, this.hookName);
    }

    /**
     * Integrate this type into the Yjs instance.
     *
     * * Save this struct in the os
     * * This type is sent to other client
     * * Observer functions are fired
     *
     * @param {Y} y The Yjs instance
     *
     * @private
     */
    _integrate (y) {
      if (this.hookName === null) {
        throw new Error('hookName must be defined!')
      }
      super._integrate(y);
    }
  }

  /**
   * @module bindings/dom
   */

  /**
   * @module bindings/dom
   */

  /**
   * Creates an association (the information that a DOM element belongs to a
   * type).
   *
   * @private
   * @function
   * @param {DomBinding} domBinding The binding object
   * @param {DocumentFragment|Element|Text} dom The dom that is to be associated with type
   * @param {YXmlFragment|YXmlElement|YXmlHook|YXmlText} type The type that is to be associated with dom
   *
   */
  const createAssociation = (domBinding, dom, type) => {
    if (domBinding !== undefined) {
      domBinding.domToType.set(dom, type);
      domBinding.typeToDom.set(type, dom);
    }
  };

  /**
   * @module types
   */

  /**
   * Represents text in a Dom Element. In the future this type will also handle
   * simple formatting information like bold and italic.
   */
  class YXmlText extends YText {
    /**
     * Creates a Dom Element that mirrors this YXmlText.
     *
     * @param {Document} [_document=document] The document object (you must define
     *                                        this when calling this method in
     *                                        nodejs)
     * @param {Object<string, any>} [hooks] Optional property to customize how hooks
     *                                             are presented in the DOM
     * @param {DomBinding} [binding] You should not set this property. This is
     *                               used if DomBinding wants to create a
     *                               association to the created DOM type.
     * @return {Text} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}
     *
     * @public
     */
    toDom (_document = document, hooks, binding) {
      const dom = _document.createTextNode(this.toString());
      createAssociation(binding, dom, this);
      return dom
    }

    /**
     * Mark this Item as deleted.
     *
     * @param {Y} y The Yjs instance
     * @param {boolean} createDelete Whether to propagate a message that this
     *                               Type was deleted.
     * @param {boolean} [gcChildren=y._hasUndoManager===false] Whether to garbage
     *                                         collect the children of this type.
     *
     * @private
     */
    _delete (y, createDelete, gcChildren) {
      super._delete(y, createDelete, gcChildren);
    }
  }

  /**
   * @module awareness-protocol
   */

  const messageUsersStateChanged = 0;

  /**
   * @typedef {Object} UserStateUpdate
   * @property {number} UserStateUpdate.userID
   * @property {Object} UserStateUpdate.state
   */

  /**
   * @param {encoding.Encoder} encoder
   * @param {Array<UserStateUpdate>} stateUpdates
   */
  const writeUsersStateChange = (encoder, stateUpdates) => {
    const len = stateUpdates.length;
    writeVarUint(encoder, messageUsersStateChanged);
    writeVarUint(encoder, len);
    for (let i = 0; i < len; i++) {
      const {userID, state} = stateUpdates[i];
      writeVarUint(encoder, userID);
      writeVarString(encoder, JSON.stringify(state));
    }
  };

  const readUsersStateChange = (decoder, y) => {
    const added = [];
    const updated = [];
    const removed = [];
    const len = readVarUint(decoder);
    for (let i = 0; i < len; i++) {
      const userID = readVarUint(decoder);
      const state = JSON.parse(readVarString(decoder));
      if (userID !== y.userID) {
        if (state === null) {
          if (y.awareness.has(userID)) {
            y.awareness.delete(userID);
            removed.push(userID);
          }
        } else {
          if (y.awareness.has(userID)) {
            updated.push(userID);
          } else {
            added.push(userID);
          }
          y.awareness.set(userID, state);
        }
      }
    }
    if (added.length > 0 || updated.length > 0 || removed.length > 0) {
      y.emit('awareness', {
        added, updated, removed
      });
    }
  };

  /**
   * @param {decoding.Decoder} decoder
   * @param {Y} y
   */
  const readAwarenessMessage = (decoder, y) => {
    switch (readVarUint(decoder)) {
      case messageUsersStateChanged:
        readUsersStateChange(decoder, y);
        break
    }
  };

  const messagePermissionDenied = 0;

  /**
   * @callback PermissionDeniedHandler
   * @param {any} y
   * @param {string} reason
   */

  /**
   *
   * @param {decoding.Decoder} decoder
   * @param {Y} y
   * @param {PermissionDeniedHandler} permissionDeniedHandler
   */
  const readAuthMessage = (decoder, y, permissionDeniedHandler) => {
    switch (readVarUint(decoder)) {
      case messagePermissionDenied: permissionDeniedHandler(y, readVarString(decoder));
    }
  };

  registerStruct(0, GC);
  registerStruct(1, ItemJSON);
  registerStruct(2, ItemString);
  registerStruct(3, ItemFormat);
  registerStruct(4, Delete);

  registerStruct(5, YArray);
  registerStruct(6, YMap);
  registerStruct(7, YText);
  registerStruct(8, YXmlFragment);
  registerStruct(9, YXmlElement);
  registerStruct(10, YXmlText);
  registerStruct(11, YXmlHook);
  registerStruct(12, ItemEmbed);

  /**
   * @module string
   */

  const fromCharCode = String.fromCharCode;

  /* eslint-env browser */

  /**
   * @param {Uint8Array} bytes
   * @return {string}
   */
  const toBase64 = bytes => {
    let s = '';
    for (let i = 0; i < bytes.byteLength; i++) {
      s += fromCharCode(bytes[i]);
    }
    return btoa(s)
  };

  /**
   * @param {string} s
   * @return {Uint8Array}
   */
  const fromBase64 = s => {
    const a = atob(s);
    const bytes = createUint8ArrayFromLen(a.length);
    for (let i = 0; i < a.length; i++) {
      bytes[i] = a.charCodeAt(i);
    }
    return bytes
  };

  /* eslint-env browser */

  /**
   * @typedef {Object} Channel
   * @property {Set<Function>} Channel.subs
   * @property {BC} Channel.bc
   */

  /**
   * @type {Map<string, Channel>}
   */
  const channels = new Map();

  class LocalStoragePolyfill {
    constructor (room) {
      this.room = room;
      this.onmessage = null;
      addEventListener('storage', e => e.key === room && this.onmessage !== null && this.onmessage({ data: fromBase64(e.newValue) }));
    }
    /**
     * @param {ArrayBuffer} data
     */
    postMessage (buf) {
      if (typeof localStorage !== 'undefined') {
        localStorage.setItem(this.room, toBase64(createUint8ArrayFromArrayBuffer(buf)));
      }
    }
  }

  // Use BroadcastChannel or Polyfill
  const BC = typeof BroadcastChannel === 'undefined' ? LocalStoragePolyfill : BroadcastChannel;

  /**
   * @param {string} room
   * @return {Channel}
   */
  const getChannel = room => {
    let c = channels.get(room);
    if (c === undefined) {
      const subs = new Set();
      const bc = new BC(room);
      bc.onmessage = e => subs.forEach(sub => sub(e.data));
      c = {
        bc, subs
      };
      channels.set(room, c);
    }
    return c
  };

  /**
   * @function
   * @param {string} room
   * @param {Function} f
   */
  const subscribe = (room, f) => getChannel(room).subs.add(f);

  /**
   * Publish data to all subscribers (including subscribers on this tab)
   *
   * @function
   * @param {string} room
   * @param {ArrayBuffer} data
   */
  const publish = (room, data) => {
    const c = getChannel(room);
    c.bc.postMessage(data);
    c.subs.forEach(sub => sub(data));
  };

  /*
  Unlike stated in the LICENSE file, it is not necessary to include the copyright notice and permission notice when you copy code from this file.
  */

  const messageSync = 0;
  const messageAwareness = 1;
  const messageAuth = 2;

  const reconnectTimeout = 3000;

  /**
   * @param {WebsocketsSharedDocument} doc
   * @param {string} reason
   */
  const permissionDeniedHandler = (doc, reason) => console.warn(`Permission denied to access ${doc.url}.\n${reason}`);

  /**
   * @param {WebsocketsSharedDocument} doc
   * @param {ArrayBuffer} buf
   * @return {Y.encoding.Encoder}
   */
  const readMessage = (doc, buf) => {
    const decoder = createDecoder(buf);
    const encoder = createEncoder();
    const messageType = readVarUint(decoder);
    switch (messageType) {
      case messageSync:
        writeVarUint(encoder, messageSync);
        doc.mux(() =>
          readSyncMessage(decoder, encoder, doc)
        );
        break
      case messageAwareness:
        readAwarenessMessage(decoder, doc);
        break
      case messageAuth:
        readAuthMessage(decoder, doc, permissionDeniedHandler);
    }
    return encoder
  };

  const setupWS = (doc, url) => {
    const websocket = new WebSocket(url);
    websocket.binaryType = 'arraybuffer';
    doc.ws = websocket;
    websocket.onmessage = event => {
      const encoder = readMessage(doc, event.data);
      if (length(encoder) > 1) {
        websocket.send(toBuffer(encoder));
      }
    };
    websocket.onclose = () => {
      doc.ws = null;
      doc.wsconnected = false;
      doc.emit('status', {
        status: 'connected'
      });
      setTimeout(setupWS, reconnectTimeout, doc, url);
    };
    websocket.onopen = () => {
      doc.wsconnected = true;
      doc.emit('status', {
        status: 'disconnected'
      });
      // always send sync step 1 when connected
      const encoder = createEncoder();
      writeVarUint(encoder, messageSync);
      writeSyncStep1(encoder, doc);
      websocket.send(toBuffer(encoder));
      // force send stored awareness info
      doc.setAwarenessField(null, null);
    };
  };

  const broadcastUpdate = (y, transaction) => {
    if (transaction.encodedStructsLen > 0) {
      y.mux(() => {
        const encoder = createEncoder();
        writeVarUint(encoder, messageSync);
        writeUpdate(encoder, transaction.encodedStructsLen, transaction.encodedStructs);
        const buf = toBuffer(encoder);
        if (y.wsconnected) {
          y.ws.send(buf);
        }
        publish(y.url, buf);
      });
    }
  };

  class WebsocketsSharedDocument extends Y {
    constructor (url) {
      super();
      this.url = url;
      this.wsconnected = false;
      this.mux = createMutex();
      this.ws = null;
      this._localAwarenessState = {};
      this.awareness = new Map();
      setupWS(this, url);
      this.on('afterTransaction', broadcastUpdate);
      this._bcSubscriber = data => {
        const encoder = readMessage(this, data); // already muxed
        this.mux(() => {
          if (length(encoder) > 1) {
              publish(url, toBuffer(encoder));
          }
        });
      };
      subscribe(url, this._bcSubscriber);
      // send sync step1 to bc
      this.mux(() => {
        const encoder = createEncoder();
        writeVarUint(encoder, messageSync);
        writeSyncStep1(encoder, this);
        publish(url, toBuffer(encoder));
      });
    }
    getLocalAwarenessInfo () {
      return this._localAwarenessState
    }
    getAwarenessInfo () {
      return this.awareness
    }
    setAwarenessField (field, value) {
      if (field !== null) {
        this._localAwarenessState[field] = value;
      }
      if (this.wsconnected) {
        const encoder = createEncoder();
        writeVarUint(encoder, messageAwareness);
        writeUsersStateChange(encoder, [{ userID: this.userID, state: this._localAwarenessState }]);
        const buf = toBuffer(encoder);
        this.ws.send(buf);
      }
    }
  }

  /**
   * Websocket Provider for Yjs. Creates a single websocket connection to each document.
   * The document name is attached to the provided url. I.e. the following example
   * creates a websocket connection to http://localhost:1234/my-document-name
   *
   * @example
   *   import { WebsocketProvider } from 'yjs/provider/websocket/client.js'
   *   const provider = new WebsocketProvider('http://localhost:1234')
   *   const ydocument = provider.get('my-document-name')
   */
  class WebsocketProvider {
    constructor (url) {
      // ensure that url is always ends with /
      while (url[url.length - 1] === '/') {
        url = url.slice(0, url.length - 1);
      }
      this.url = url + '/';
      /**
       * @type {Map<string, WebsocketsSharedDocument>}
       */
      this.docs = new Map();
    }
    /**
     * @param {string} name
     * @return {WebsocketsSharedDocument}
     */
    get (name) {
      let doc = this.docs.get(name);
      if (doc === undefined) {
        doc = new WebsocketsSharedDocument(this.url + name);
      }
      return doc
    }
  }

  /**
   * @module provider/websocket
   */

  /**
   * @module bindings/quill
   */

  const typeObserver$1 = function (event) {
    const quill = this.target;
    // Force flush Quill changes.
    quill.update('yjs');
    this._mutualExclude(() => {
      // Apply computed delta.
      quill.updateContents(event.delta, 'yjs');
      // Force flush Quill changes. Ignore applied changes.
      quill.update('yjs');
    });
  };

  const quillObserver = function (delta) {
    this._mutualExclude(() => {
      this.type.applyDelta(delta.ops);
    });
  };

  /**
   * A Binding that binds a YText type to a Quill editor.
   *
   * @example
   * const quill = new Quill(document.createElement('div'))
   * const type = y.define('quill', Y.Text)
   * const binding = new Y.QuillBinding(quill, type)
   * // Now modifications on the DOM will be reflected in the Type, and the other
   * // way around!
   */
  class QuillBinding {
    /**
     * @param {YText} textType
     * @param {Quill} quill
     */
    constructor (textType, quill) {
      // Binding handles textType as this.type and quill as this.target.
      /**
       * The Yjs type that is bound to `target`
       * @type {YText}
       */
      this.type = textType;
      /**
       * The target that `type` is bound to.
       * @type {Quill}
       */
      this.target = quill;
      /**
       * @private
       */
      this._mutualExclude = createMutex();
      // Set initial value.
      quill.setContents(textType.toDelta(), 'yjs');
      // Observers are handled by this class.
      this._typeObserver = typeObserver$1.bind(this);
      this._quillObserver = quillObserver.bind(this);
      textType.observe(this._typeObserver);
      quill.on('text-change', this._quillObserver);
    }
    destroy () {
      // Remove everything that is handled by this class.
      this.type.unobserve(this._typeObserver);
      this.target.off('text-change', this._quillObserver);
      this.type = null;
      this.target = null;
    }
  }

  /* eslint-env browser */

  const isDeployed = location.hostname === 'yjs.website';

  if (!isDeployed) {
    console.log('%cYjs: Start your local websocket server by running %c`npm run websocket-server`', 'color:blue', 'color: grey; font-weight: bold');
  }

  const serverAddress = isDeployed ? 'wss://api.yjs.website' : 'ws://localhost:1234';

  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function unwrapExports (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var quill = createCommonjsModule(function (module, exports) {
  /*!
   * Quill Editor v1.3.6
   * https://quilljs.com/
   * Copyright (c) 2014, Jason Chen
   * Copyright (c) 2013, salesforce.com
   */
  (function webpackUniversalModuleDefinition(root, factory) {
  	module.exports = factory();
  })(typeof self !== 'undefined' ? self : commonjsGlobal, function() {
  return /******/ (function(modules) { // webpackBootstrap
  /******/ 	// The module cache
  /******/ 	var installedModules = {};
  /******/
  /******/ 	// The require function
  /******/ 	function __webpack_require__(moduleId) {
  /******/
  /******/ 		// Check if module is in cache
  /******/ 		if(installedModules[moduleId]) {
  /******/ 			return installedModules[moduleId].exports;
  /******/ 		}
  /******/ 		// Create a new module (and put it into the cache)
  /******/ 		var module = installedModules[moduleId] = {
  /******/ 			i: moduleId,
  /******/ 			l: false,
  /******/ 			exports: {}
  /******/ 		};
  /******/
  /******/ 		// Execute the module function
  /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
  /******/
  /******/ 		// Flag the module as loaded
  /******/ 		module.l = true;
  /******/
  /******/ 		// Return the exports of the module
  /******/ 		return module.exports;
  /******/ 	}
  /******/
  /******/
  /******/ 	// expose the modules object (__webpack_modules__)
  /******/ 	__webpack_require__.m = modules;
  /******/
  /******/ 	// expose the module cache
  /******/ 	__webpack_require__.c = installedModules;
  /******/
  /******/ 	// define getter function for harmony exports
  /******/ 	__webpack_require__.d = function(exports, name, getter) {
  /******/ 		if(!__webpack_require__.o(exports, name)) {
  /******/ 			Object.defineProperty(exports, name, {
  /******/ 				configurable: false,
  /******/ 				enumerable: true,
  /******/ 				get: getter
  /******/ 			});
  /******/ 		}
  /******/ 	};
  /******/
  /******/ 	// getDefaultExport function for compatibility with non-harmony modules
  /******/ 	__webpack_require__.n = function(module) {
  /******/ 		var getter = module && module.__esModule ?
  /******/ 			function getDefault() { return module['default']; } :
  /******/ 			function getModuleExports() { return module; };
  /******/ 		__webpack_require__.d(getter, 'a', getter);
  /******/ 		return getter;
  /******/ 	};
  /******/
  /******/ 	// Object.prototype.hasOwnProperty.call
  /******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
  /******/
  /******/ 	// __webpack_public_path__
  /******/ 	__webpack_require__.p = "";
  /******/
  /******/ 	// Load entry module and return exports
  /******/ 	return __webpack_require__(__webpack_require__.s = 109);
  /******/ })
  /************************************************************************/
  /******/ ([
  /* 0 */
  /***/ (function(module, exports, __webpack_require__) {

  Object.defineProperty(exports, "__esModule", { value: true });
  var container_1 = __webpack_require__(17);
  var format_1 = __webpack_require__(18);
  var leaf_1 = __webpack_require__(19);
  var scroll_1 = __webpack_require__(45);
  var inline_1 = __webpack_require__(46);
  var block_1 = __webpack_require__(47);
  var embed_1 = __webpack_require__(48);
  var text_1 = __webpack_require__(49);
  var attributor_1 = __webpack_require__(12);
  var class_1 = __webpack_require__(32);
  var style_1 = __webpack_require__(33);
  var store_1 = __webpack_require__(31);
  var Registry = __webpack_require__(1);
  var Parchment = {
      Scope: Registry.Scope,
      create: Registry.create,
      find: Registry.find,
      query: Registry.query,
      register: Registry.register,
      Container: container_1.default,
      Format: format_1.default,
      Leaf: leaf_1.default,
      Embed: embed_1.default,
      Scroll: scroll_1.default,
      Block: block_1.default,
      Inline: inline_1.default,
      Text: text_1.default,
      Attributor: {
          Attribute: attributor_1.default,
          Class: class_1.default,
          Style: style_1.default,
          Store: store_1.default,
      },
  };
  exports.default = Parchment;


  /***/ }),
  /* 1 */
  /***/ (function(module, exports, __webpack_require__) {

  var __extends = (this && this.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var ParchmentError = /** @class */ (function (_super) {
      __extends(ParchmentError, _super);
      function ParchmentError(message) {
          var _this = this;
          message = '[Parchment] ' + message;
          _this = _super.call(this, message) || this;
          _this.message = message;
          _this.name = _this.constructor.name;
          return _this;
      }
      return ParchmentError;
  }(Error));
  exports.ParchmentError = ParchmentError;
  var attributes = {};
  var classes = {};
  var tags = {};
  var types = {};
  exports.DATA_KEY = '__blot';
  var Scope;
  (function (Scope) {
      Scope[Scope["TYPE"] = 3] = "TYPE";
      Scope[Scope["LEVEL"] = 12] = "LEVEL";
      Scope[Scope["ATTRIBUTE"] = 13] = "ATTRIBUTE";
      Scope[Scope["BLOT"] = 14] = "BLOT";
      Scope[Scope["INLINE"] = 7] = "INLINE";
      Scope[Scope["BLOCK"] = 11] = "BLOCK";
      Scope[Scope["BLOCK_BLOT"] = 10] = "BLOCK_BLOT";
      Scope[Scope["INLINE_BLOT"] = 6] = "INLINE_BLOT";
      Scope[Scope["BLOCK_ATTRIBUTE"] = 9] = "BLOCK_ATTRIBUTE";
      Scope[Scope["INLINE_ATTRIBUTE"] = 5] = "INLINE_ATTRIBUTE";
      Scope[Scope["ANY"] = 15] = "ANY";
  })(Scope = exports.Scope || (exports.Scope = {}));
  function create(input, value) {
      var match = query(input);
      if (match == null) {
          throw new ParchmentError("Unable to create " + input + " blot");
      }
      var BlotClass = match;
      var node = 
      // @ts-ignore
      input instanceof Node || input['nodeType'] === Node.TEXT_NODE ? input : BlotClass.create(value);
      return new BlotClass(node, value);
  }
  exports.create = create;
  function find(node, bubble) {
      if (bubble === void 0) { bubble = false; }
      if (node == null)
          return null;
      // @ts-ignore
      if (node[exports.DATA_KEY] != null)
          return node[exports.DATA_KEY].blot;
      if (bubble)
          return find(node.parentNode, bubble);
      return null;
  }
  exports.find = find;
  function query(query, scope) {
      if (scope === void 0) { scope = Scope.ANY; }
      var match;
      if (typeof query === 'string') {
          match = types[query] || attributes[query];
          // @ts-ignore
      }
      else if (query instanceof Text || query['nodeType'] === Node.TEXT_NODE) {
          match = types['text'];
      }
      else if (typeof query === 'number') {
          if (query & Scope.LEVEL & Scope.BLOCK) {
              match = types['block'];
          }
          else if (query & Scope.LEVEL & Scope.INLINE) {
              match = types['inline'];
          }
      }
      else if (query instanceof HTMLElement) {
          var names = (query.getAttribute('class') || '').split(/\s+/);
          for (var i in names) {
              match = classes[names[i]];
              if (match)
                  break;
          }
          match = match || tags[query.tagName];
      }
      if (match == null)
          return null;
      // @ts-ignore
      if (scope & Scope.LEVEL & match.scope && scope & Scope.TYPE & match.scope)
          return match;
      return null;
  }
  exports.query = query;
  function register() {
      var Definitions = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          Definitions[_i] = arguments[_i];
      }
      if (Definitions.length > 1) {
          return Definitions.map(function (d) {
              return register(d);
          });
      }
      var Definition = Definitions[0];
      if (typeof Definition.blotName !== 'string' && typeof Definition.attrName !== 'string') {
          throw new ParchmentError('Invalid definition');
      }
      else if (Definition.blotName === 'abstract') {
          throw new ParchmentError('Cannot register abstract class');
      }
      types[Definition.blotName || Definition.attrName] = Definition;
      if (typeof Definition.keyName === 'string') {
          attributes[Definition.keyName] = Definition;
      }
      else {
          if (Definition.className != null) {
              classes[Definition.className] = Definition;
          }
          if (Definition.tagName != null) {
              if (Array.isArray(Definition.tagName)) {
                  Definition.tagName = Definition.tagName.map(function (tagName) {
                      return tagName.toUpperCase();
                  });
              }
              else {
                  Definition.tagName = Definition.tagName.toUpperCase();
              }
              var tagNames = Array.isArray(Definition.tagName) ? Definition.tagName : [Definition.tagName];
              tagNames.forEach(function (tag) {
                  if (tags[tag] == null || Definition.className == null) {
                      tags[tag] = Definition;
                  }
              });
          }
      }
      return Definition;
  }
  exports.register = register;


  /***/ }),
  /* 2 */
  /***/ (function(module, exports, __webpack_require__) {

  var diff = __webpack_require__(51);
  var equal = __webpack_require__(11);
  var extend = __webpack_require__(3);
  var op = __webpack_require__(20);


  var NULL_CHARACTER = String.fromCharCode(0);  // Placeholder char for embed in diff()


  var Delta = function (ops) {
    // Assume we are given a well formed ops
    if (Array.isArray(ops)) {
      this.ops = ops;
    } else if (ops != null && Array.isArray(ops.ops)) {
      this.ops = ops.ops;
    } else {
      this.ops = [];
    }
  };


  Delta.prototype.insert = function (text, attributes) {
    var newOp = {};
    if (text.length === 0) return this;
    newOp.insert = text;
    if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {
      newOp.attributes = attributes;
    }
    return this.push(newOp);
  };

  Delta.prototype['delete'] = function (length) {
    if (length <= 0) return this;
    return this.push({ 'delete': length });
  };

  Delta.prototype.retain = function (length, attributes) {
    if (length <= 0) return this;
    var newOp = { retain: length };
    if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {
      newOp.attributes = attributes;
    }
    return this.push(newOp);
  };

  Delta.prototype.push = function (newOp) {
    var index = this.ops.length;
    var lastOp = this.ops[index - 1];
    newOp = extend(true, {}, newOp);
    if (typeof lastOp === 'object') {
      if (typeof newOp['delete'] === 'number' && typeof lastOp['delete'] === 'number') {
        this.ops[index - 1] = { 'delete': lastOp['delete'] + newOp['delete'] };
        return this;
      }
      // Since it does not matter if we insert before or after deleting at the same index,
      // always prefer to insert first
      if (typeof lastOp['delete'] === 'number' && newOp.insert != null) {
        index -= 1;
        lastOp = this.ops[index - 1];
        if (typeof lastOp !== 'object') {
          this.ops.unshift(newOp);
          return this;
        }
      }
      if (equal(newOp.attributes, lastOp.attributes)) {
        if (typeof newOp.insert === 'string' && typeof lastOp.insert === 'string') {
          this.ops[index - 1] = { insert: lastOp.insert + newOp.insert };
          if (typeof newOp.attributes === 'object') this.ops[index - 1].attributes = newOp.attributes;
          return this;
        } else if (typeof newOp.retain === 'number' && typeof lastOp.retain === 'number') {
          this.ops[index - 1] = { retain: lastOp.retain + newOp.retain };
          if (typeof newOp.attributes === 'object') this.ops[index - 1].attributes = newOp.attributes;
          return this;
        }
      }
    }
    if (index === this.ops.length) {
      this.ops.push(newOp);
    } else {
      this.ops.splice(index, 0, newOp);
    }
    return this;
  };

  Delta.prototype.chop = function () {
    var lastOp = this.ops[this.ops.length - 1];
    if (lastOp && lastOp.retain && !lastOp.attributes) {
      this.ops.pop();
    }
    return this;
  };

  Delta.prototype.filter = function (predicate) {
    return this.ops.filter(predicate);
  };

  Delta.prototype.forEach = function (predicate) {
    this.ops.forEach(predicate);
  };

  Delta.prototype.map = function (predicate) {
    return this.ops.map(predicate);
  };

  Delta.prototype.partition = function (predicate) {
    var passed = [], failed = [];
    this.forEach(function(op) {
      var target = predicate(op) ? passed : failed;
      target.push(op);
    });
    return [passed, failed];
  };

  Delta.prototype.reduce = function (predicate, initial) {
    return this.ops.reduce(predicate, initial);
  };

  Delta.prototype.changeLength = function () {
    return this.reduce(function (length, elem) {
      if (elem.insert) {
        return length + op.length(elem);
      } else if (elem.delete) {
        return length - elem.delete;
      }
      return length;
    }, 0);
  };

  Delta.prototype.length = function () {
    return this.reduce(function (length, elem) {
      return length + op.length(elem);
    }, 0);
  };

  Delta.prototype.slice = function (start, end) {
    start = start || 0;
    if (typeof end !== 'number') end = Infinity;
    var ops = [];
    var iter = op.iterator(this.ops);
    var index = 0;
    while (index < end && iter.hasNext()) {
      var nextOp;
      if (index < start) {
        nextOp = iter.next(start - index);
      } else {
        nextOp = iter.next(end - index);
        ops.push(nextOp);
      }
      index += op.length(nextOp);
    }
    return new Delta(ops);
  };


  Delta.prototype.compose = function (other) {
    var thisIter = op.iterator(this.ops);
    var otherIter = op.iterator(other.ops);
    var delta = new Delta();
    while (thisIter.hasNext() || otherIter.hasNext()) {
      if (otherIter.peekType() === 'insert') {
        delta.push(otherIter.next());
      } else if (thisIter.peekType() === 'delete') {
        delta.push(thisIter.next());
      } else {
        var length = Math.min(thisIter.peekLength(), otherIter.peekLength());
        var thisOp = thisIter.next(length);
        var otherOp = otherIter.next(length);
        if (typeof otherOp.retain === 'number') {
          var newOp = {};
          if (typeof thisOp.retain === 'number') {
            newOp.retain = length;
          } else {
            newOp.insert = thisOp.insert;
          }
          // Preserve null when composing with a retain, otherwise remove it for inserts
          var attributes = op.attributes.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === 'number');
          if (attributes) newOp.attributes = attributes;
          delta.push(newOp);
        // Other op should be delete, we could be an insert or retain
        // Insert + delete cancels out
        } else if (typeof otherOp['delete'] === 'number' && typeof thisOp.retain === 'number') {
          delta.push(otherOp);
        }
      }
    }
    return delta.chop();
  };

  Delta.prototype.concat = function (other) {
    var delta = new Delta(this.ops.slice());
    if (other.ops.length > 0) {
      delta.push(other.ops[0]);
      delta.ops = delta.ops.concat(other.ops.slice(1));
    }
    return delta;
  };

  Delta.prototype.diff = function (other, index) {
    if (this.ops === other.ops) {
      return new Delta();
    }
    var strings = [this, other].map(function (delta) {
      return delta.map(function (op) {
        if (op.insert != null) {
          return typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;
        }
        var prep = (delta === other) ? 'on' : 'with';
        throw new Error('diff() called ' + prep + ' non-document');
      }).join('');
    });
    var delta = new Delta();
    var diffResult = diff(strings[0], strings[1], index);
    var thisIter = op.iterator(this.ops);
    var otherIter = op.iterator(other.ops);
    diffResult.forEach(function (component) {
      var length = component[1].length;
      while (length > 0) {
        var opLength = 0;
        switch (component[0]) {
          case diff.INSERT:
            opLength = Math.min(otherIter.peekLength(), length);
            delta.push(otherIter.next(opLength));
            break;
          case diff.DELETE:
            opLength = Math.min(length, thisIter.peekLength());
            thisIter.next(opLength);
            delta['delete'](opLength);
            break;
          case diff.EQUAL:
            opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);
            var thisOp = thisIter.next(opLength);
            var otherOp = otherIter.next(opLength);
            if (equal(thisOp.insert, otherOp.insert)) {
              delta.retain(opLength, op.attributes.diff(thisOp.attributes, otherOp.attributes));
            } else {
              delta.push(otherOp)['delete'](opLength);
            }
            break;
        }
        length -= opLength;
      }
    });
    return delta.chop();
  };

  Delta.prototype.eachLine = function (predicate, newline) {
    newline = newline || '\n';
    var iter = op.iterator(this.ops);
    var line = new Delta();
    var i = 0;
    while (iter.hasNext()) {
      if (iter.peekType() !== 'insert') return;
      var thisOp = iter.peek();
      var start = op.length(thisOp) - iter.peekLength();
      var index = typeof thisOp.insert === 'string' ?
        thisOp.insert.indexOf(newline, start) - start : -1;
      if (index < 0) {
        line.push(iter.next());
      } else if (index > 0) {
        line.push(iter.next(index));
      } else {
        if (predicate(line, iter.next(1).attributes || {}, i) === false) {
          return;
        }
        i += 1;
        line = new Delta();
      }
    }
    if (line.length() > 0) {
      predicate(line, {}, i);
    }
  };

  Delta.prototype.transform = function (other, priority) {
    priority = !!priority;
    if (typeof other === 'number') {
      return this.transformPosition(other, priority);
    }
    var thisIter = op.iterator(this.ops);
    var otherIter = op.iterator(other.ops);
    var delta = new Delta();
    while (thisIter.hasNext() || otherIter.hasNext()) {
      if (thisIter.peekType() === 'insert' && (priority || otherIter.peekType() !== 'insert')) {
        delta.retain(op.length(thisIter.next()));
      } else if (otherIter.peekType() === 'insert') {
        delta.push(otherIter.next());
      } else {
        var length = Math.min(thisIter.peekLength(), otherIter.peekLength());
        var thisOp = thisIter.next(length);
        var otherOp = otherIter.next(length);
        if (thisOp['delete']) {
          // Our delete either makes their delete redundant or removes their retain
          continue;
        } else if (otherOp['delete']) {
          delta.push(otherOp);
        } else {
          // We retain either their retain or insert
          delta.retain(length, op.attributes.transform(thisOp.attributes, otherOp.attributes, priority));
        }
      }
    }
    return delta.chop();
  };

  Delta.prototype.transformPosition = function (index, priority) {
    priority = !!priority;
    var thisIter = op.iterator(this.ops);
    var offset = 0;
    while (thisIter.hasNext() && offset <= index) {
      var length = thisIter.peekLength();
      var nextType = thisIter.peekType();
      thisIter.next();
      if (nextType === 'delete') {
        index -= Math.min(length, index - offset);
        continue;
      } else if (nextType === 'insert' && (offset < index || !priority)) {
        index += length;
      }
      offset += length;
    }
    return index;
  };


  module.exports = Delta;


  /***/ }),
  /* 3 */
  /***/ (function(module, exports) {

  var hasOwn = Object.prototype.hasOwnProperty;
  var toStr = Object.prototype.toString;

  var isArray = function isArray(arr) {
  	if (typeof Array.isArray === 'function') {
  		return Array.isArray(arr);
  	}

  	return toStr.call(arr) === '[object Array]';
  };

  var isPlainObject = function isPlainObject(obj) {
  	if (!obj || toStr.call(obj) !== '[object Object]') {
  		return false;
  	}

  	var hasOwnConstructor = hasOwn.call(obj, 'constructor');
  	var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
  	// Not own constructor property must be Object
  	if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
  		return false;
  	}

  	// Own properties are enumerated firstly, so to speed up,
  	// if last one is own, then all properties are own.
  	var key;
  	for (key in obj) { /**/ }

  	return typeof key === 'undefined' || hasOwn.call(obj, key);
  };

  module.exports = function extend() {
  	var options, name, src, copy, copyIsArray, clone;
  	var target = arguments[0];
  	var i = 1;
  	var length = arguments.length;
  	var deep = false;

  	// Handle a deep copy situation
  	if (typeof target === 'boolean') {
  		deep = target;
  		target = arguments[1] || {};
  		// skip the boolean and the target
  		i = 2;
  	}
  	if (target == null || (typeof target !== 'object' && typeof target !== 'function')) {
  		target = {};
  	}

  	for (; i < length; ++i) {
  		options = arguments[i];
  		// Only deal with non-null/undefined values
  		if (options != null) {
  			// Extend the base object
  			for (name in options) {
  				src = target[name];
  				copy = options[name];

  				// Prevent never-ending loop
  				if (target !== copy) {
  					// Recurse if we're merging plain objects or arrays
  					if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
  						if (copyIsArray) {
  							copyIsArray = false;
  							clone = src && isArray(src) ? src : [];
  						} else {
  							clone = src && isPlainObject(src) ? src : {};
  						}

  						// Never move original objects, clone them
  						target[name] = extend(deep, clone, copy);

  					// Don't bring in undefined values
  					} else if (typeof copy !== 'undefined') {
  						target[name] = copy;
  					}
  				}
  			}
  		}
  	}

  	// Return the modified object
  	return target;
  };


  /***/ }),
  /* 4 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.BlockEmbed = exports.bubbleFormats = undefined;

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _extend = __webpack_require__(3);

  var _extend2 = _interopRequireDefault(_extend);

  var _quillDelta = __webpack_require__(2);

  var _quillDelta2 = _interopRequireDefault(_quillDelta);

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _break = __webpack_require__(16);

  var _break2 = _interopRequireDefault(_break);

  var _inline = __webpack_require__(6);

  var _inline2 = _interopRequireDefault(_inline);

  var _text = __webpack_require__(7);

  var _text2 = _interopRequireDefault(_text);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var NEWLINE_LENGTH = 1;

  var BlockEmbed = function (_Parchment$Embed) {
    _inherits(BlockEmbed, _Parchment$Embed);

    function BlockEmbed() {
      _classCallCheck(this, BlockEmbed);

      return _possibleConstructorReturn(this, (BlockEmbed.__proto__ || Object.getPrototypeOf(BlockEmbed)).apply(this, arguments));
    }

    _createClass(BlockEmbed, [{
      key: 'attach',
      value: function attach() {
        _get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), 'attach', this).call(this);
        this.attributes = new _parchment2.default.Attributor.Store(this.domNode);
      }
    }, {
      key: 'delta',
      value: function delta() {
        return new _quillDelta2.default().insert(this.value(), (0, _extend2.default)(this.formats(), this.attributes.values()));
      }
    }, {
      key: 'format',
      value: function format(name, value) {
        var attribute = _parchment2.default.query(name, _parchment2.default.Scope.BLOCK_ATTRIBUTE);
        if (attribute != null) {
          this.attributes.attribute(attribute, value);
        }
      }
    }, {
      key: 'formatAt',
      value: function formatAt(index, length, name, value) {
        this.format(name, value);
      }
    }, {
      key: 'insertAt',
      value: function insertAt(index, value, def) {
        if (typeof value === 'string' && value.endsWith('\n')) {
          var block = _parchment2.default.create(Block.blotName);
          this.parent.insertBefore(block, index === 0 ? this : this.next);
          block.insertAt(0, value.slice(0, -1));
        } else {
          _get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), 'insertAt', this).call(this, index, value, def);
        }
      }
    }]);

    return BlockEmbed;
  }(_parchment2.default.Embed);

  BlockEmbed.scope = _parchment2.default.Scope.BLOCK_BLOT;
  // It is important for cursor behavior BlockEmbeds use tags that are block level elements


  var Block = function (_Parchment$Block) {
    _inherits(Block, _Parchment$Block);

    function Block(domNode) {
      _classCallCheck(this, Block);

      var _this2 = _possibleConstructorReturn(this, (Block.__proto__ || Object.getPrototypeOf(Block)).call(this, domNode));

      _this2.cache = {};
      return _this2;
    }

    _createClass(Block, [{
      key: 'delta',
      value: function delta() {
        if (this.cache.delta == null) {
          this.cache.delta = this.descendants(_parchment2.default.Leaf).reduce(function (delta, leaf) {
            if (leaf.length() === 0) {
              return delta;
            } else {
              return delta.insert(leaf.value(), bubbleFormats(leaf));
            }
          }, new _quillDelta2.default()).insert('\n', bubbleFormats(this));
        }
        return this.cache.delta;
      }
    }, {
      key: 'deleteAt',
      value: function deleteAt(index, length) {
        _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'deleteAt', this).call(this, index, length);
        this.cache = {};
      }
    }, {
      key: 'formatAt',
      value: function formatAt(index, length, name, value) {
        if (length <= 0) return;
        if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {
          if (index + length === this.length()) {
            this.format(name, value);
          }
        } else {
          _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'formatAt', this).call(this, index, Math.min(length, this.length() - index - 1), name, value);
        }
        this.cache = {};
      }
    }, {
      key: 'insertAt',
      value: function insertAt(index, value, def) {
        if (def != null) return _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertAt', this).call(this, index, value, def);
        if (value.length === 0) return;
        var lines = value.split('\n');
        var text = lines.shift();
        if (text.length > 0) {
          if (index < this.length() - 1 || this.children.tail == null) {
            _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertAt', this).call(this, Math.min(index, this.length() - 1), text);
          } else {
            this.children.tail.insertAt(this.children.tail.length(), text);
          }
          this.cache = {};
        }
        var block = this;
        lines.reduce(function (index, line) {
          block = block.split(index, true);
          block.insertAt(0, line);
          return line.length;
        }, index + text.length);
      }
    }, {
      key: 'insertBefore',
      value: function insertBefore(blot, ref) {
        var head = this.children.head;
        _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertBefore', this).call(this, blot, ref);
        if (head instanceof _break2.default) {
          head.remove();
        }
        this.cache = {};
      }
    }, {
      key: 'length',
      value: function length() {
        if (this.cache.length == null) {
          this.cache.length = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'length', this).call(this) + NEWLINE_LENGTH;
        }
        return this.cache.length;
      }
    }, {
      key: 'moveChildren',
      value: function moveChildren(target, ref) {
        _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'moveChildren', this).call(this, target, ref);
        this.cache = {};
      }
    }, {
      key: 'optimize',
      value: function optimize(context) {
        _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'optimize', this).call(this, context);
        this.cache = {};
      }
    }, {
      key: 'path',
      value: function path(index) {
        return _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'path', this).call(this, index, true);
      }
    }, {
      key: 'removeChild',
      value: function removeChild(child) {
        _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'removeChild', this).call(this, child);
        this.cache = {};
      }
    }, {
      key: 'split',
      value: function split(index) {
        var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (force && (index === 0 || index >= this.length() - NEWLINE_LENGTH)) {
          var clone = this.clone();
          if (index === 0) {
            this.parent.insertBefore(clone, this);
            return this;
          } else {
            this.parent.insertBefore(clone, this.next);
            return clone;
          }
        } else {
          var next = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'split', this).call(this, index, force);
          this.cache = {};
          return next;
        }
      }
    }]);

    return Block;
  }(_parchment2.default.Block);

  Block.blotName = 'block';
  Block.tagName = 'P';
  Block.defaultChild = 'break';
  Block.allowedChildren = [_inline2.default, _parchment2.default.Embed, _text2.default];

  function bubbleFormats(blot) {
    var formats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (blot == null) return formats;
    if (typeof blot.formats === 'function') {
      formats = (0, _extend2.default)(formats, blot.formats());
    }
    if (blot.parent == null || blot.parent.blotName == 'scroll' || blot.parent.statics.scope !== blot.statics.scope) {
      return formats;
    }
    return bubbleFormats(blot.parent, formats);
  }

  exports.bubbleFormats = bubbleFormats;
  exports.BlockEmbed = BlockEmbed;
  exports.default = Block;

  /***/ }),
  /* 5 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.overload = exports.expandConfig = undefined;

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  __webpack_require__(50);

  var _quillDelta = __webpack_require__(2);

  var _quillDelta2 = _interopRequireDefault(_quillDelta);

  var _editor = __webpack_require__(14);

  var _editor2 = _interopRequireDefault(_editor);

  var _emitter3 = __webpack_require__(8);

  var _emitter4 = _interopRequireDefault(_emitter3);

  var _module = __webpack_require__(9);

  var _module2 = _interopRequireDefault(_module);

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _selection = __webpack_require__(15);

  var _selection2 = _interopRequireDefault(_selection);

  var _extend = __webpack_require__(3);

  var _extend2 = _interopRequireDefault(_extend);

  var _logger = __webpack_require__(10);

  var _logger2 = _interopRequireDefault(_logger);

  var _theme = __webpack_require__(34);

  var _theme2 = _interopRequireDefault(_theme);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var debug = (0, _logger2.default)('quill');

  var Quill = function () {
    _createClass(Quill, null, [{
      key: 'debug',
      value: function debug(limit) {
        if (limit === true) {
          limit = 'log';
        }
        _logger2.default.level(limit);
      }
    }, {
      key: 'find',
      value: function find(node) {
        return node.__quill || _parchment2.default.find(node);
      }
    }, {
      key: 'import',
      value: function _import(name) {
        if (this.imports[name] == null) {
          debug.error('Cannot import ' + name + '. Are you sure it was registered?');
        }
        return this.imports[name];
      }
    }, {
      key: 'register',
      value: function register(path, target) {
        var _this = this;

        var overwrite = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        if (typeof path !== 'string') {
          var name = path.attrName || path.blotName;
          if (typeof name === 'string') {
            // register(Blot | Attributor, overwrite)
            this.register('formats/' + name, path, target);
          } else {
            Object.keys(path).forEach(function (key) {
              _this.register(key, path[key], target);
            });
          }
        } else {
          if (this.imports[path] != null && !overwrite) {
            debug.warn('Overwriting ' + path + ' with', target);
          }
          this.imports[path] = target;
          if ((path.startsWith('blots/') || path.startsWith('formats/')) && target.blotName !== 'abstract') {
            _parchment2.default.register(target);
          } else if (path.startsWith('modules') && typeof target.register === 'function') {
            target.register();
          }
        }
      }
    }]);

    function Quill(container) {
      var _this2 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, Quill);

      this.options = expandConfig(container, options);
      this.container = this.options.container;
      if (this.container == null) {
        return debug.error('Invalid Quill container', container);
      }
      if (this.options.debug) {
        Quill.debug(this.options.debug);
      }
      var html = this.container.innerHTML.trim();
      this.container.classList.add('ql-container');
      this.container.innerHTML = '';
      this.container.__quill = this;
      this.root = this.addContainer('ql-editor');
      this.root.classList.add('ql-blank');
      this.root.setAttribute('data-gramm', false);
      this.scrollingContainer = this.options.scrollingContainer || this.root;
      this.emitter = new _emitter4.default();
      this.scroll = _parchment2.default.create(this.root, {
        emitter: this.emitter,
        whitelist: this.options.formats
      });
      this.editor = new _editor2.default(this.scroll);
      this.selection = new _selection2.default(this.scroll, this.emitter);
      this.theme = new this.options.theme(this, this.options);
      this.keyboard = this.theme.addModule('keyboard');
      this.clipboard = this.theme.addModule('clipboard');
      this.history = this.theme.addModule('history');
      this.theme.init();
      this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function (type) {
        if (type === _emitter4.default.events.TEXT_CHANGE) {
          _this2.root.classList.toggle('ql-blank', _this2.editor.isBlank());
        }
      });
      this.emitter.on(_emitter4.default.events.SCROLL_UPDATE, function (source, mutations) {
        var range = _this2.selection.lastRange;
        var index = range && range.length === 0 ? range.index : undefined;
        modify.call(_this2, function () {
          return _this2.editor.update(null, mutations, index);
        }, source);
      });
      var contents = this.clipboard.convert('<div class=\'ql-editor\' style="white-space: normal;">' + html + '<p><br></p></div>');
      this.setContents(contents);
      this.history.clear();
      if (this.options.placeholder) {
        this.root.setAttribute('data-placeholder', this.options.placeholder);
      }
      if (this.options.readOnly) {
        this.disable();
      }
    }

    _createClass(Quill, [{
      key: 'addContainer',
      value: function addContainer(container) {
        var refNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        if (typeof container === 'string') {
          var className = container;
          container = document.createElement('div');
          container.classList.add(className);
        }
        this.container.insertBefore(container, refNode);
        return container;
      }
    }, {
      key: 'blur',
      value: function blur() {
        this.selection.setRange(null);
      }
    }, {
      key: 'deleteText',
      value: function deleteText(index, length, source) {
        var _this3 = this;

        var _overload = overload(index, length, source);

        var _overload2 = _slicedToArray(_overload, 4);

        index = _overload2[0];
        length = _overload2[1];
        source = _overload2[3];

        return modify.call(this, function () {
          return _this3.editor.deleteText(index, length);
        }, source, index, -1 * length);
      }
    }, {
      key: 'disable',
      value: function disable() {
        this.enable(false);
      }
    }, {
      key: 'enable',
      value: function enable() {
        var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        this.scroll.enable(enabled);
        this.container.classList.toggle('ql-disabled', !enabled);
      }
    }, {
      key: 'focus',
      value: function focus() {
        var scrollTop = this.scrollingContainer.scrollTop;
        this.selection.focus();
        this.scrollingContainer.scrollTop = scrollTop;
        this.scrollIntoView();
      }
    }, {
      key: 'format',
      value: function format(name, value) {
        var _this4 = this;

        var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;

        return modify.call(this, function () {
          var range = _this4.getSelection(true);
          var change = new _quillDelta2.default();
          if (range == null) {
            return change;
          } else if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {
            change = _this4.editor.formatLine(range.index, range.length, _defineProperty({}, name, value));
          } else if (range.length === 0) {
            _this4.selection.format(name, value);
            return change;
          } else {
            change = _this4.editor.formatText(range.index, range.length, _defineProperty({}, name, value));
          }
          _this4.setSelection(range, _emitter4.default.sources.SILENT);
          return change;
        }, source);
      }
    }, {
      key: 'formatLine',
      value: function formatLine(index, length, name, value, source) {
        var _this5 = this;

        var formats = void 0;

        var _overload3 = overload(index, length, name, value, source);

        var _overload4 = _slicedToArray(_overload3, 4);

        index = _overload4[0];
        length = _overload4[1];
        formats = _overload4[2];
        source = _overload4[3];

        return modify.call(this, function () {
          return _this5.editor.formatLine(index, length, formats);
        }, source, index, 0);
      }
    }, {
      key: 'formatText',
      value: function formatText(index, length, name, value, source) {
        var _this6 = this;

        var formats = void 0;

        var _overload5 = overload(index, length, name, value, source);

        var _overload6 = _slicedToArray(_overload5, 4);

        index = _overload6[0];
        length = _overload6[1];
        formats = _overload6[2];
        source = _overload6[3];

        return modify.call(this, function () {
          return _this6.editor.formatText(index, length, formats);
        }, source, index, 0);
      }
    }, {
      key: 'getBounds',
      value: function getBounds(index) {
        var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        var bounds = void 0;
        if (typeof index === 'number') {
          bounds = this.selection.getBounds(index, length);
        } else {
          bounds = this.selection.getBounds(index.index, index.length);
        }
        var containerBounds = this.container.getBoundingClientRect();
        return {
          bottom: bounds.bottom - containerBounds.top,
          height: bounds.height,
          left: bounds.left - containerBounds.left,
          right: bounds.right - containerBounds.left,
          top: bounds.top - containerBounds.top,
          width: bounds.width
        };
      }
    }, {
      key: 'getContents',
      value: function getContents() {
        var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;

        var _overload7 = overload(index, length);

        var _overload8 = _slicedToArray(_overload7, 2);

        index = _overload8[0];
        length = _overload8[1];

        return this.editor.getContents(index, length);
      }
    }, {
      key: 'getFormat',
      value: function getFormat() {
        var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getSelection(true);
        var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        if (typeof index === 'number') {
          return this.editor.getFormat(index, length);
        } else {
          return this.editor.getFormat(index.index, index.length);
        }
      }
    }, {
      key: 'getIndex',
      value: function getIndex(blot) {
        return blot.offset(this.scroll);
      }
    }, {
      key: 'getLength',
      value: function getLength() {
        return this.scroll.length();
      }
    }, {
      key: 'getLeaf',
      value: function getLeaf(index) {
        return this.scroll.leaf(index);
      }
    }, {
      key: 'getLine',
      value: function getLine(index) {
        return this.scroll.line(index);
      }
    }, {
      key: 'getLines',
      value: function getLines() {
        var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;

        if (typeof index !== 'number') {
          return this.scroll.lines(index.index, index.length);
        } else {
          return this.scroll.lines(index, length);
        }
      }
    }, {
      key: 'getModule',
      value: function getModule(name) {
        return this.theme.modules[name];
      }
    }, {
      key: 'getSelection',
      value: function getSelection() {
        var focus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        if (focus) this.focus();
        this.update(); // Make sure we access getRange with editor in consistent state
        return this.selection.getRange()[0];
      }
    }, {
      key: 'getText',
      value: function getText() {
        var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;

        var _overload9 = overload(index, length);

        var _overload10 = _slicedToArray(_overload9, 2);

        index = _overload10[0];
        length = _overload10[1];

        return this.editor.getText(index, length);
      }
    }, {
      key: 'hasFocus',
      value: function hasFocus() {
        return this.selection.hasFocus();
      }
    }, {
      key: 'insertEmbed',
      value: function insertEmbed(index, embed, value) {
        var _this7 = this;

        var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Quill.sources.API;

        return modify.call(this, function () {
          return _this7.editor.insertEmbed(index, embed, value);
        }, source, index);
      }
    }, {
      key: 'insertText',
      value: function insertText(index, text, name, value, source) {
        var _this8 = this;

        var formats = void 0;

        var _overload11 = overload(index, 0, name, value, source);

        var _overload12 = _slicedToArray(_overload11, 4);

        index = _overload12[0];
        formats = _overload12[2];
        source = _overload12[3];

        return modify.call(this, function () {
          return _this8.editor.insertText(index, text, formats);
        }, source, index, text.length);
      }
    }, {
      key: 'isEnabled',
      value: function isEnabled() {
        return !this.container.classList.contains('ql-disabled');
      }
    }, {
      key: 'off',
      value: function off() {
        return this.emitter.off.apply(this.emitter, arguments);
      }
    }, {
      key: 'on',
      value: function on() {
        return this.emitter.on.apply(this.emitter, arguments);
      }
    }, {
      key: 'once',
      value: function once() {
        return this.emitter.once.apply(this.emitter, arguments);
      }
    }, {
      key: 'pasteHTML',
      value: function pasteHTML(index, html, source) {
        this.clipboard.dangerouslyPasteHTML(index, html, source);
      }
    }, {
      key: 'removeFormat',
      value: function removeFormat(index, length, source) {
        var _this9 = this;

        var _overload13 = overload(index, length, source);

        var _overload14 = _slicedToArray(_overload13, 4);

        index = _overload14[0];
        length = _overload14[1];
        source = _overload14[3];

        return modify.call(this, function () {
          return _this9.editor.removeFormat(index, length);
        }, source, index);
      }
    }, {
      key: 'scrollIntoView',
      value: function scrollIntoView() {
        this.selection.scrollIntoView(this.scrollingContainer);
      }
    }, {
      key: 'setContents',
      value: function setContents(delta) {
        var _this10 = this;

        var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;

        return modify.call(this, function () {
          delta = new _quillDelta2.default(delta);
          var length = _this10.getLength();
          var deleted = _this10.editor.deleteText(0, length);
          var applied = _this10.editor.applyDelta(delta);
          var lastOp = applied.ops[applied.ops.length - 1];
          if (lastOp != null && typeof lastOp.insert === 'string' && lastOp.insert[lastOp.insert.length - 1] === '\n') {
            _this10.editor.deleteText(_this10.getLength() - 1, 1);
            applied.delete(1);
          }
          var ret = deleted.compose(applied);
          return ret;
        }, source);
      }
    }, {
      key: 'setSelection',
      value: function setSelection(index, length, source) {
        if (index == null) {
          this.selection.setRange(null, length || Quill.sources.API);
        } else {
          var _overload15 = overload(index, length, source);

          var _overload16 = _slicedToArray(_overload15, 4);

          index = _overload16[0];
          length = _overload16[1];
          source = _overload16[3];

          this.selection.setRange(new _selection.Range(index, length), source);
          if (source !== _emitter4.default.sources.SILENT) {
            this.selection.scrollIntoView(this.scrollingContainer);
          }
        }
      }
    }, {
      key: 'setText',
      value: function setText(text) {
        var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;

        var delta = new _quillDelta2.default().insert(text);
        return this.setContents(delta, source);
      }
    }, {
      key: 'update',
      value: function update() {
        var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;

        var change = this.scroll.update(source); // Will update selection before selection.update() does if text changes
        this.selection.update(source);
        return change;
      }
    }, {
      key: 'updateContents',
      value: function updateContents(delta) {
        var _this11 = this;

        var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;

        return modify.call(this, function () {
          delta = new _quillDelta2.default(delta);
          return _this11.editor.applyDelta(delta, source);
        }, source, true);
      }
    }]);

    return Quill;
  }();

  Quill.DEFAULTS = {
    bounds: null,
    formats: null,
    modules: {},
    placeholder: '',
    readOnly: false,
    scrollingContainer: null,
    strict: true,
    theme: 'default'
  };
  Quill.events = _emitter4.default.events;
  Quill.sources = _emitter4.default.sources;
  // eslint-disable-next-line no-undef
  Quill.version =  "1.3.6";

  Quill.imports = {
    'delta': _quillDelta2.default,
    'parchment': _parchment2.default,
    'core/module': _module2.default,
    'core/theme': _theme2.default
  };

  function expandConfig(container, userConfig) {
    userConfig = (0, _extend2.default)(true, {
      container: container,
      modules: {
        clipboard: true,
        keyboard: true,
        history: true
      }
    }, userConfig);
    if (!userConfig.theme || userConfig.theme === Quill.DEFAULTS.theme) {
      userConfig.theme = _theme2.default;
    } else {
      userConfig.theme = Quill.import('themes/' + userConfig.theme);
      if (userConfig.theme == null) {
        throw new Error('Invalid theme ' + userConfig.theme + '. Did you register it?');
      }
    }
    var themeConfig = (0, _extend2.default)(true, {}, userConfig.theme.DEFAULTS);
    [themeConfig, userConfig].forEach(function (config) {
      config.modules = config.modules || {};
      Object.keys(config.modules).forEach(function (module) {
        if (config.modules[module] === true) {
          config.modules[module] = {};
        }
      });
    });
    var moduleNames = Object.keys(themeConfig.modules).concat(Object.keys(userConfig.modules));
    var moduleConfig = moduleNames.reduce(function (config, name) {
      var moduleClass = Quill.import('modules/' + name);
      if (moduleClass == null) {
        debug.error('Cannot load ' + name + ' module. Are you sure you registered it?');
      } else {
        config[name] = moduleClass.DEFAULTS || {};
      }
      return config;
    }, {});
    // Special case toolbar shorthand
    if (userConfig.modules != null && userConfig.modules.toolbar && userConfig.modules.toolbar.constructor !== Object) {
      userConfig.modules.toolbar = {
        container: userConfig.modules.toolbar
      };
    }
    userConfig = (0, _extend2.default)(true, {}, Quill.DEFAULTS, { modules: moduleConfig }, themeConfig, userConfig);
    ['bounds', 'container', 'scrollingContainer'].forEach(function (key) {
      if (typeof userConfig[key] === 'string') {
        userConfig[key] = document.querySelector(userConfig[key]);
      }
    });
    userConfig.modules = Object.keys(userConfig.modules).reduce(function (config, name) {
      if (userConfig.modules[name]) {
        config[name] = userConfig.modules[name];
      }
      return config;
    }, {});
    return userConfig;
  }

  // Handle selection preservation and TEXT_CHANGE emission
  // common to modification APIs
  function modify(modifier, source, index, shift) {
    if (this.options.strict && !this.isEnabled() && source === _emitter4.default.sources.USER) {
      return new _quillDelta2.default();
    }
    var range = index == null ? null : this.getSelection();
    var oldDelta = this.editor.delta;
    var change = modifier();
    if (range != null) {
      if (index === true) index = range.index;
      if (shift == null) {
        range = shiftRange(range, change, source);
      } else if (shift !== 0) {
        range = shiftRange(range, index, shift, source);
      }
      this.setSelection(range, _emitter4.default.sources.SILENT);
    }
    if (change.length() > 0) {
      var _emitter;

      var args = [_emitter4.default.events.TEXT_CHANGE, change, oldDelta, source];
      (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));
      if (source !== _emitter4.default.sources.SILENT) {
        var _emitter2;

        (_emitter2 = this.emitter).emit.apply(_emitter2, args);
      }
    }
    return change;
  }

  function overload(index, length, name, value, source) {
    var formats = {};
    if (typeof index.index === 'number' && typeof index.length === 'number') {
      // Allow for throwaway end (used by insertText/insertEmbed)
      if (typeof length !== 'number') {
        source = value, value = name, name = length, length = index.length, index = index.index;
      } else {
        length = index.length, index = index.index;
      }
    } else if (typeof length !== 'number') {
      source = value, value = name, name = length, length = 0;
    }
    // Handle format being object, two format name/value strings or excluded
    if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
      formats = name;
      source = value;
    } else if (typeof name === 'string') {
      if (value != null) {
        formats[name] = value;
      } else {
        source = name;
      }
    }
    // Handle optional source
    source = source || _emitter4.default.sources.API;
    return [index, length, formats, source];
  }

  function shiftRange(range, index, length, source) {
    if (range == null) return null;
    var start = void 0,
        end = void 0;
    if (index instanceof _quillDelta2.default) {
      var _map = [range.index, range.index + range.length].map(function (pos) {
        return index.transformPosition(pos, source !== _emitter4.default.sources.USER);
      });

      var _map2 = _slicedToArray(_map, 2);

      start = _map2[0];
      end = _map2[1];
    } else {
      var _map3 = [range.index, range.index + range.length].map(function (pos) {
        if (pos < index || pos === index && source === _emitter4.default.sources.USER) return pos;
        if (length >= 0) {
          return pos + length;
        } else {
          return Math.max(index, pos + length);
        }
      });

      var _map4 = _slicedToArray(_map3, 2);

      start = _map4[0];
      end = _map4[1];
    }
    return new _selection.Range(start, end - start);
  }

  exports.expandConfig = expandConfig;
  exports.overload = overload;
  exports.default = Quill;

  /***/ }),
  /* 6 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _text = __webpack_require__(7);

  var _text2 = _interopRequireDefault(_text);

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Inline = function (_Parchment$Inline) {
    _inherits(Inline, _Parchment$Inline);

    function Inline() {
      _classCallCheck(this, Inline);

      return _possibleConstructorReturn(this, (Inline.__proto__ || Object.getPrototypeOf(Inline)).apply(this, arguments));
    }

    _createClass(Inline, [{
      key: 'formatAt',
      value: function formatAt(index, length, name, value) {
        if (Inline.compare(this.statics.blotName, name) < 0 && _parchment2.default.query(name, _parchment2.default.Scope.BLOT)) {
          var blot = this.isolate(index, length);
          if (value) {
            blot.wrap(name, value);
          }
        } else {
          _get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), 'formatAt', this).call(this, index, length, name, value);
        }
      }
    }, {
      key: 'optimize',
      value: function optimize(context) {
        _get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), 'optimize', this).call(this, context);
        if (this.parent instanceof Inline && Inline.compare(this.statics.blotName, this.parent.statics.blotName) > 0) {
          var parent = this.parent.isolate(this.offset(), this.length());
          this.moveChildren(parent);
          parent.wrap(this);
        }
      }
    }], [{
      key: 'compare',
      value: function compare(self, other) {
        var selfIndex = Inline.order.indexOf(self);
        var otherIndex = Inline.order.indexOf(other);
        if (selfIndex >= 0 || otherIndex >= 0) {
          return selfIndex - otherIndex;
        } else if (self === other) {
          return 0;
        } else if (self < other) {
          return -1;
        } else {
          return 1;
        }
      }
    }]);

    return Inline;
  }(_parchment2.default.Inline);

  Inline.allowedChildren = [Inline, _parchment2.default.Embed, _text2.default];
  // Lower index means deeper in the DOM tree, since not found (-1) is for embeds
  Inline.order = ['cursor', 'inline', // Must be lower
  'underline', 'strike', 'italic', 'bold', 'script', 'link', 'code' // Must be higher
  ];

  exports.default = Inline;

  /***/ }),
  /* 7 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var TextBlot = function (_Parchment$Text) {
    _inherits(TextBlot, _Parchment$Text);

    function TextBlot() {
      _classCallCheck(this, TextBlot);

      return _possibleConstructorReturn(this, (TextBlot.__proto__ || Object.getPrototypeOf(TextBlot)).apply(this, arguments));
    }

    return TextBlot;
  }(_parchment2.default.Text);

  exports.default = TextBlot;

  /***/ }),
  /* 8 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _eventemitter = __webpack_require__(54);

  var _eventemitter2 = _interopRequireDefault(_eventemitter);

  var _logger = __webpack_require__(10);

  var _logger2 = _interopRequireDefault(_logger);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var debug = (0, _logger2.default)('quill:events');

  var EVENTS = ['selectionchange', 'mousedown', 'mouseup', 'click'];

  EVENTS.forEach(function (eventName) {
    document.addEventListener(eventName, function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      [].slice.call(document.querySelectorAll('.ql-container')).forEach(function (node) {
        // TODO use WeakMap
        if (node.__quill && node.__quill.emitter) {
          var _node$__quill$emitter;

          (_node$__quill$emitter = node.__quill.emitter).handleDOM.apply(_node$__quill$emitter, args);
        }
      });
    });
  });

  var Emitter = function (_EventEmitter) {
    _inherits(Emitter, _EventEmitter);

    function Emitter() {
      _classCallCheck(this, Emitter);

      var _this = _possibleConstructorReturn(this, (Emitter.__proto__ || Object.getPrototypeOf(Emitter)).call(this));

      _this.listeners = {};
      _this.on('error', debug.error);
      return _this;
    }

    _createClass(Emitter, [{
      key: 'emit',
      value: function emit() {
        debug.log.apply(debug, arguments);
        _get(Emitter.prototype.__proto__ || Object.getPrototypeOf(Emitter.prototype), 'emit', this).apply(this, arguments);
      }
    }, {
      key: 'handleDOM',
      value: function handleDOM(event) {
        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        (this.listeners[event.type] || []).forEach(function (_ref) {
          var node = _ref.node,
              handler = _ref.handler;

          if (event.target === node || node.contains(event.target)) {
            handler.apply(undefined, [event].concat(args));
          }
        });
      }
    }, {
      key: 'listenDOM',
      value: function listenDOM(eventName, node, handler) {
        if (!this.listeners[eventName]) {
          this.listeners[eventName] = [];
        }
        this.listeners[eventName].push({ node: node, handler: handler });
      }
    }]);

    return Emitter;
  }(_eventemitter2.default);

  Emitter.events = {
    EDITOR_CHANGE: 'editor-change',
    SCROLL_BEFORE_UPDATE: 'scroll-before-update',
    SCROLL_OPTIMIZE: 'scroll-optimize',
    SCROLL_UPDATE: 'scroll-update',
    SELECTION_CHANGE: 'selection-change',
    TEXT_CHANGE: 'text-change'
  };
  Emitter.sources = {
    API: 'api',
    SILENT: 'silent',
    USER: 'user'
  };

  exports.default = Emitter;

  /***/ }),
  /* 9 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var Module = function Module(quill) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Module);

    this.quill = quill;
    this.options = options;
  };

  Module.DEFAULTS = {};

  exports.default = Module;

  /***/ }),
  /* 10 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var levels = ['error', 'warn', 'log', 'info'];
  var level = 'warn';

  function debug(method) {
    if (levels.indexOf(method) <= levels.indexOf(level)) {
      var _console;

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      (_console = console)[method].apply(_console, args); // eslint-disable-line no-console
    }
  }

  function namespace(ns) {
    return levels.reduce(function (logger, method) {
      logger[method] = debug.bind(console, method, ns);
      return logger;
    }, {});
  }

  debug.level = namespace.level = function (newLevel) {
    level = newLevel;
  };

  exports.default = namespace;

  /***/ }),
  /* 11 */
  /***/ (function(module, exports, __webpack_require__) {

  var pSlice = Array.prototype.slice;
  var objectKeys = __webpack_require__(52);
  var isArguments = __webpack_require__(53);

  var deepEqual = module.exports = function (actual, expected, opts) {
    if (!opts) opts = {};
    // 7.1. All identical values are equivalent, as determined by ===.
    if (actual === expected) {
      return true;

    } else if (actual instanceof Date && expected instanceof Date) {
      return actual.getTime() === expected.getTime();

    // 7.3. Other pairs that do not both pass typeof value == 'object',
    // equivalence is determined by ==.
    } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
      return opts.strict ? actual === expected : actual == expected;

    // 7.4. For all other Object pairs, including Array objects, equivalence is
    // determined by having the same number of owned properties (as verified
    // with Object.prototype.hasOwnProperty.call), the same set of keys
    // (although not necessarily the same order), equivalent values for every
    // corresponding key, and an identical 'prototype' property. Note: this
    // accounts for both named and indexed properties on Arrays.
    } else {
      return objEquiv(actual, expected, opts);
    }
  };

  function isUndefinedOrNull(value) {
    return value === null || value === undefined;
  }

  function isBuffer (x) {
    if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
    if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
      return false;
    }
    if (x.length > 0 && typeof x[0] !== 'number') return false;
    return true;
  }

  function objEquiv(a, b, opts) {
    var i, key;
    if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
      return false;
    // an identical 'prototype' property.
    if (a.prototype !== b.prototype) return false;
    //~~~I've managed to break Object.keys through screwy arguments passing.
    //   Converting to array solves the problem.
    if (isArguments(a)) {
      if (!isArguments(b)) {
        return false;
      }
      a = pSlice.call(a);
      b = pSlice.call(b);
      return deepEqual(a, b, opts);
    }
    if (isBuffer(a)) {
      if (!isBuffer(b)) {
        return false;
      }
      if (a.length !== b.length) return false;
      for (i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) return false;
      }
      return true;
    }
    try {
      var ka = objectKeys(a),
          kb = objectKeys(b);
    } catch (e) {//happens when one is a string literal and the other isn't
      return false;
    }
    // having the same number of owned properties (keys incorporates
    // hasOwnProperty)
    if (ka.length != kb.length)
      return false;
    //the same set of keys (although not necessarily the same order),
    ka.sort();
    kb.sort();
    //~~~cheap key test
    for (i = ka.length - 1; i >= 0; i--) {
      if (ka[i] != kb[i])
        return false;
    }
    //equivalent values for every corresponding key, and
    //~~~possibly expensive deep test
    for (i = ka.length - 1; i >= 0; i--) {
      key = ka[i];
      if (!deepEqual(a[key], b[key], opts)) return false;
    }
    return typeof a === typeof b;
  }


  /***/ }),
  /* 12 */
  /***/ (function(module, exports, __webpack_require__) {

  Object.defineProperty(exports, "__esModule", { value: true });
  var Registry = __webpack_require__(1);
  var Attributor = /** @class */ (function () {
      function Attributor(attrName, keyName, options) {
          if (options === void 0) { options = {}; }
          this.attrName = attrName;
          this.keyName = keyName;
          var attributeBit = Registry.Scope.TYPE & Registry.Scope.ATTRIBUTE;
          if (options.scope != null) {
              // Ignore type bits, force attribute bit
              this.scope = (options.scope & Registry.Scope.LEVEL) | attributeBit;
          }
          else {
              this.scope = Registry.Scope.ATTRIBUTE;
          }
          if (options.whitelist != null)
              this.whitelist = options.whitelist;
      }
      Attributor.keys = function (node) {
          return [].map.call(node.attributes, function (item) {
              return item.name;
          });
      };
      Attributor.prototype.add = function (node, value) {
          if (!this.canAdd(node, value))
              return false;
          node.setAttribute(this.keyName, value);
          return true;
      };
      Attributor.prototype.canAdd = function (node, value) {
          var match = Registry.query(node, Registry.Scope.BLOT & (this.scope | Registry.Scope.TYPE));
          if (match == null)
              return false;
          if (this.whitelist == null)
              return true;
          if (typeof value === 'string') {
              return this.whitelist.indexOf(value.replace(/["']/g, '')) > -1;
          }
          else {
              return this.whitelist.indexOf(value) > -1;
          }
      };
      Attributor.prototype.remove = function (node) {
          node.removeAttribute(this.keyName);
      };
      Attributor.prototype.value = function (node) {
          var value = node.getAttribute(this.keyName);
          if (this.canAdd(node, value) && value) {
              return value;
          }
          return '';
      };
      return Attributor;
  }());
  exports.default = Attributor;


  /***/ }),
  /* 13 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Code = undefined;

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _quillDelta = __webpack_require__(2);

  var _quillDelta2 = _interopRequireDefault(_quillDelta);

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _block = __webpack_require__(4);

  var _block2 = _interopRequireDefault(_block);

  var _inline = __webpack_require__(6);

  var _inline2 = _interopRequireDefault(_inline);

  var _text = __webpack_require__(7);

  var _text2 = _interopRequireDefault(_text);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Code = function (_Inline) {
    _inherits(Code, _Inline);

    function Code() {
      _classCallCheck(this, Code);

      return _possibleConstructorReturn(this, (Code.__proto__ || Object.getPrototypeOf(Code)).apply(this, arguments));
    }

    return Code;
  }(_inline2.default);

  Code.blotName = 'code';
  Code.tagName = 'CODE';

  var CodeBlock = function (_Block) {
    _inherits(CodeBlock, _Block);

    function CodeBlock() {
      _classCallCheck(this, CodeBlock);

      return _possibleConstructorReturn(this, (CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock)).apply(this, arguments));
    }

    _createClass(CodeBlock, [{
      key: 'delta',
      value: function delta() {
        var _this3 = this;

        var text = this.domNode.textContent;
        if (text.endsWith('\n')) {
          // Should always be true
          text = text.slice(0, -1);
        }
        return text.split('\n').reduce(function (delta, frag) {
          return delta.insert(frag).insert('\n', _this3.formats());
        }, new _quillDelta2.default());
      }
    }, {
      key: 'format',
      value: function format(name, value) {
        if (name === this.statics.blotName && value) return;

        var _descendant = this.descendant(_text2.default, this.length() - 1),
            _descendant2 = _slicedToArray(_descendant, 1),
            text = _descendant2[0];

        if (text != null) {
          text.deleteAt(text.length() - 1, 1);
        }
        _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'format', this).call(this, name, value);
      }
    }, {
      key: 'formatAt',
      value: function formatAt(index, length, name, value) {
        if (length === 0) return;
        if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK) == null || name === this.statics.blotName && value === this.statics.formats(this.domNode)) {
          return;
        }
        var nextNewline = this.newlineIndex(index);
        if (nextNewline < 0 || nextNewline >= index + length) return;
        var prevNewline = this.newlineIndex(index, true) + 1;
        var isolateLength = nextNewline - prevNewline + 1;
        var blot = this.isolate(prevNewline, isolateLength);
        var next = blot.next;
        blot.format(name, value);
        if (next instanceof CodeBlock) {
          next.formatAt(0, index - prevNewline + length - isolateLength, name, value);
        }
      }
    }, {
      key: 'insertAt',
      value: function insertAt(index, value, def) {
        if (def != null) return;

        var _descendant3 = this.descendant(_text2.default, index),
            _descendant4 = _slicedToArray(_descendant3, 2),
            text = _descendant4[0],
            offset = _descendant4[1];

        text.insertAt(offset, value);
      }
    }, {
      key: 'length',
      value: function length() {
        var length = this.domNode.textContent.length;
        if (!this.domNode.textContent.endsWith('\n')) {
          return length + 1;
        }
        return length;
      }
    }, {
      key: 'newlineIndex',
      value: function newlineIndex(searchIndex) {
        var reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (!reverse) {
          var offset = this.domNode.textContent.slice(searchIndex).indexOf('\n');
          return offset > -1 ? searchIndex + offset : -1;
        } else {
          return this.domNode.textContent.slice(0, searchIndex).lastIndexOf('\n');
        }
      }
    }, {
      key: 'optimize',
      value: function optimize(context) {
        if (!this.domNode.textContent.endsWith('\n')) {
          this.appendChild(_parchment2.default.create('text', '\n'));
        }
        _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'optimize', this).call(this, context);
        var next = this.next;
        if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && this.statics.formats(this.domNode) === next.statics.formats(next.domNode)) {
          next.optimize(context);
          next.moveChildren(this);
          next.remove();
        }
      }
    }, {
      key: 'replace',
      value: function replace(target) {
        _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'replace', this).call(this, target);
        [].slice.call(this.domNode.querySelectorAll('*')).forEach(function (node) {
          var blot = _parchment2.default.find(node);
          if (blot == null) {
            node.parentNode.removeChild(node);
          } else if (blot instanceof _parchment2.default.Embed) {
            blot.remove();
          } else {
            blot.unwrap();
          }
        });
      }
    }], [{
      key: 'create',
      value: function create(value) {
        var domNode = _get(CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock), 'create', this).call(this, value);
        domNode.setAttribute('spellcheck', false);
        return domNode;
      }
    }, {
      key: 'formats',
      value: function formats() {
        return true;
      }
    }]);

    return CodeBlock;
  }(_block2.default);

  CodeBlock.blotName = 'code-block';
  CodeBlock.tagName = 'PRE';
  CodeBlock.TAB = '  ';

  exports.Code = Code;
  exports.default = CodeBlock;

  /***/ }),
  /* 14 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _quillDelta = __webpack_require__(2);

  var _quillDelta2 = _interopRequireDefault(_quillDelta);

  var _op = __webpack_require__(20);

  var _op2 = _interopRequireDefault(_op);

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _code = __webpack_require__(13);

  var _code2 = _interopRequireDefault(_code);

  var _cursor = __webpack_require__(24);

  var _cursor2 = _interopRequireDefault(_cursor);

  var _block = __webpack_require__(4);

  var _block2 = _interopRequireDefault(_block);

  var _break = __webpack_require__(16);

  var _break2 = _interopRequireDefault(_break);

  var _clone = __webpack_require__(21);

  var _clone2 = _interopRequireDefault(_clone);

  var _deepEqual = __webpack_require__(11);

  var _deepEqual2 = _interopRequireDefault(_deepEqual);

  var _extend = __webpack_require__(3);

  var _extend2 = _interopRequireDefault(_extend);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var ASCII = /^[ -~]*$/;

  var Editor = function () {
    function Editor(scroll) {
      _classCallCheck(this, Editor);

      this.scroll = scroll;
      this.delta = this.getDelta();
    }

    _createClass(Editor, [{
      key: 'applyDelta',
      value: function applyDelta(delta) {
        var _this = this;

        var consumeNextNewline = false;
        this.scroll.update();
        var scrollLength = this.scroll.length();
        this.scroll.batchStart();
        delta = normalizeDelta(delta);
        delta.reduce(function (index, op) {
          var length = op.retain || op.delete || op.insert.length || 1;
          var attributes = op.attributes || {};
          if (op.insert != null) {
            if (typeof op.insert === 'string') {
              var text = op.insert;
              if (text.endsWith('\n') && consumeNextNewline) {
                consumeNextNewline = false;
                text = text.slice(0, -1);
              }
              if (index >= scrollLength && !text.endsWith('\n')) {
                consumeNextNewline = true;
              }
              _this.scroll.insertAt(index, text);

              var _scroll$line = _this.scroll.line(index),
                  _scroll$line2 = _slicedToArray(_scroll$line, 2),
                  line = _scroll$line2[0],
                  offset = _scroll$line2[1];

              var formats = (0, _extend2.default)({}, (0, _block.bubbleFormats)(line));
              if (line instanceof _block2.default) {
                var _line$descendant = line.descendant(_parchment2.default.Leaf, offset),
                    _line$descendant2 = _slicedToArray(_line$descendant, 1),
                    leaf = _line$descendant2[0];

                formats = (0, _extend2.default)(formats, (0, _block.bubbleFormats)(leaf));
              }
              attributes = _op2.default.attributes.diff(formats, attributes) || {};
            } else if (_typeof(op.insert) === 'object') {
              var key = Object.keys(op.insert)[0]; // There should only be one key
              if (key == null) return index;
              _this.scroll.insertAt(index, key, op.insert[key]);
            }
            scrollLength += length;
          }
          Object.keys(attributes).forEach(function (name) {
            _this.scroll.formatAt(index, length, name, attributes[name]);
          });
          return index + length;
        }, 0);
        delta.reduce(function (index, op) {
          if (typeof op.delete === 'number') {
            _this.scroll.deleteAt(index, op.delete);
            return index;
          }
          return index + (op.retain || op.insert.length || 1);
        }, 0);
        this.scroll.batchEnd();
        return this.update(delta);
      }
    }, {
      key: 'deleteText',
      value: function deleteText(index, length) {
        this.scroll.deleteAt(index, length);
        return this.update(new _quillDelta2.default().retain(index).delete(length));
      }
    }, {
      key: 'formatLine',
      value: function formatLine(index, length) {
        var _this2 = this;

        var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        this.scroll.update();
        Object.keys(formats).forEach(function (format) {
          if (_this2.scroll.whitelist != null && !_this2.scroll.whitelist[format]) return;
          var lines = _this2.scroll.lines(index, Math.max(length, 1));
          var lengthRemaining = length;
          lines.forEach(function (line) {
            var lineLength = line.length();
            if (!(line instanceof _code2.default)) {
              line.format(format, formats[format]);
            } else {
              var codeIndex = index - line.offset(_this2.scroll);
              var codeLength = line.newlineIndex(codeIndex + lengthRemaining) - codeIndex + 1;
              line.formatAt(codeIndex, codeLength, format, formats[format]);
            }
            lengthRemaining -= lineLength;
          });
        });
        this.scroll.optimize();
        return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));
      }
    }, {
      key: 'formatText',
      value: function formatText(index, length) {
        var _this3 = this;

        var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        Object.keys(formats).forEach(function (format) {
          _this3.scroll.formatAt(index, length, format, formats[format]);
        });
        return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));
      }
    }, {
      key: 'getContents',
      value: function getContents(index, length) {
        return this.delta.slice(index, index + length);
      }
    }, {
      key: 'getDelta',
      value: function getDelta() {
        return this.scroll.lines().reduce(function (delta, line) {
          return delta.concat(line.delta());
        }, new _quillDelta2.default());
      }
    }, {
      key: 'getFormat',
      value: function getFormat(index) {
        var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        var lines = [],
            leaves = [];
        if (length === 0) {
          this.scroll.path(index).forEach(function (path) {
            var _path = _slicedToArray(path, 1),
                blot = _path[0];

            if (blot instanceof _block2.default) {
              lines.push(blot);
            } else if (blot instanceof _parchment2.default.Leaf) {
              leaves.push(blot);
            }
          });
        } else {
          lines = this.scroll.lines(index, length);
          leaves = this.scroll.descendants(_parchment2.default.Leaf, index, length);
        }
        var formatsArr = [lines, leaves].map(function (blots) {
          if (blots.length === 0) return {};
          var formats = (0, _block.bubbleFormats)(blots.shift());
          while (Object.keys(formats).length > 0) {
            var blot = blots.shift();
            if (blot == null) return formats;
            formats = combineFormats((0, _block.bubbleFormats)(blot), formats);
          }
          return formats;
        });
        return _extend2.default.apply(_extend2.default, formatsArr);
      }
    }, {
      key: 'getText',
      value: function getText(index, length) {
        return this.getContents(index, length).filter(function (op) {
          return typeof op.insert === 'string';
        }).map(function (op) {
          return op.insert;
        }).join('');
      }
    }, {
      key: 'insertEmbed',
      value: function insertEmbed(index, embed, value) {
        this.scroll.insertAt(index, embed, value);
        return this.update(new _quillDelta2.default().retain(index).insert(_defineProperty({}, embed, value)));
      }
    }, {
      key: 'insertText',
      value: function insertText(index, text) {
        var _this4 = this;

        var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        text = text.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
        this.scroll.insertAt(index, text);
        Object.keys(formats).forEach(function (format) {
          _this4.scroll.formatAt(index, text.length, format, formats[format]);
        });
        return this.update(new _quillDelta2.default().retain(index).insert(text, (0, _clone2.default)(formats)));
      }
    }, {
      key: 'isBlank',
      value: function isBlank() {
        if (this.scroll.children.length == 0) return true;
        if (this.scroll.children.length > 1) return false;
        var block = this.scroll.children.head;
        if (block.statics.blotName !== _block2.default.blotName) return false;
        if (block.children.length > 1) return false;
        return block.children.head instanceof _break2.default;
      }
    }, {
      key: 'removeFormat',
      value: function removeFormat(index, length) {
        var text = this.getText(index, length);

        var _scroll$line3 = this.scroll.line(index + length),
            _scroll$line4 = _slicedToArray(_scroll$line3, 2),
            line = _scroll$line4[0],
            offset = _scroll$line4[1];

        var suffixLength = 0,
            suffix = new _quillDelta2.default();
        if (line != null) {
          if (!(line instanceof _code2.default)) {
            suffixLength = line.length() - offset;
          } else {
            suffixLength = line.newlineIndex(offset) - offset + 1;
          }
          suffix = line.delta().slice(offset, offset + suffixLength - 1).insert('\n');
        }
        var contents = this.getContents(index, length + suffixLength);
        var diff = contents.diff(new _quillDelta2.default().insert(text).concat(suffix));
        var delta = new _quillDelta2.default().retain(index).concat(diff);
        return this.applyDelta(delta);
      }
    }, {
      key: 'update',
      value: function update(change) {
        var mutations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var cursorIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

        var oldDelta = this.delta;
        if (mutations.length === 1 && mutations[0].type === 'characterData' && mutations[0].target.data.match(ASCII) && _parchment2.default.find(mutations[0].target)) {
          // Optimization for character changes
          var textBlot = _parchment2.default.find(mutations[0].target);
          var formats = (0, _block.bubbleFormats)(textBlot);
          var index = textBlot.offset(this.scroll);
          var oldValue = mutations[0].oldValue.replace(_cursor2.default.CONTENTS, '');
          var oldText = new _quillDelta2.default().insert(oldValue);
          var newText = new _quillDelta2.default().insert(textBlot.value());
          var diffDelta = new _quillDelta2.default().retain(index).concat(oldText.diff(newText, cursorIndex));
          change = diffDelta.reduce(function (delta, op) {
            if (op.insert) {
              return delta.insert(op.insert, formats);
            } else {
              return delta.push(op);
            }
          }, new _quillDelta2.default());
          this.delta = oldDelta.compose(change);
        } else {
          this.delta = this.getDelta();
          if (!change || !(0, _deepEqual2.default)(oldDelta.compose(change), this.delta)) {
            change = oldDelta.diff(this.delta, cursorIndex);
          }
        }
        return change;
      }
    }]);

    return Editor;
  }();

  function combineFormats(formats, combined) {
    return Object.keys(combined).reduce(function (merged, name) {
      if (formats[name] == null) return merged;
      if (combined[name] === formats[name]) {
        merged[name] = combined[name];
      } else if (Array.isArray(combined[name])) {
        if (combined[name].indexOf(formats[name]) < 0) {
          merged[name] = combined[name].concat([formats[name]]);
        }
      } else {
        merged[name] = [combined[name], formats[name]];
      }
      return merged;
    }, {});
  }

  function normalizeDelta(delta) {
    return delta.reduce(function (delta, op) {
      if (op.insert === 1) {
        var attributes = (0, _clone2.default)(op.attributes);
        delete attributes['image'];
        return delta.insert({ image: op.attributes.image }, attributes);
      }
      if (op.attributes != null && (op.attributes.list === true || op.attributes.bullet === true)) {
        op = (0, _clone2.default)(op);
        if (op.attributes.list) {
          op.attributes.list = 'ordered';
        } else {
          op.attributes.list = 'bullet';
          delete op.attributes.bullet;
        }
      }
      if (typeof op.insert === 'string') {
        var text = op.insert.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
        return delta.insert(text, op.attributes);
      }
      return delta.push(op);
    }, new _quillDelta2.default());
  }

  exports.default = Editor;

  /***/ }),
  /* 15 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.Range = undefined;

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _clone = __webpack_require__(21);

  var _clone2 = _interopRequireDefault(_clone);

  var _deepEqual = __webpack_require__(11);

  var _deepEqual2 = _interopRequireDefault(_deepEqual);

  var _emitter3 = __webpack_require__(8);

  var _emitter4 = _interopRequireDefault(_emitter3);

  var _logger = __webpack_require__(10);

  var _logger2 = _interopRequireDefault(_logger);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var debug = (0, _logger2.default)('quill:selection');

  var Range = function Range(index) {
    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    _classCallCheck(this, Range);

    this.index = index;
    this.length = length;
  };

  var Selection = function () {
    function Selection(scroll, emitter) {
      var _this = this;

      _classCallCheck(this, Selection);

      this.emitter = emitter;
      this.scroll = scroll;
      this.composing = false;
      this.mouseDown = false;
      this.root = this.scroll.domNode;
      this.cursor = _parchment2.default.create('cursor', this);
      // savedRange is last non-null range
      this.lastRange = this.savedRange = new Range(0, 0);
      this.handleComposition();
      this.handleDragging();
      this.emitter.listenDOM('selectionchange', document, function () {
        if (!_this.mouseDown) {
          setTimeout(_this.update.bind(_this, _emitter4.default.sources.USER), 1);
        }
      });
      this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function (type, delta) {
        if (type === _emitter4.default.events.TEXT_CHANGE && delta.length() > 0) {
          _this.update(_emitter4.default.sources.SILENT);
        }
      });
      this.emitter.on(_emitter4.default.events.SCROLL_BEFORE_UPDATE, function () {
        if (!_this.hasFocus()) return;
        var native = _this.getNativeRange();
        if (native == null) return;
        if (native.start.node === _this.cursor.textNode) return; // cursor.restore() will handle
        // TODO unclear if this has negative side effects
        _this.emitter.once(_emitter4.default.events.SCROLL_UPDATE, function () {
          try {
            _this.setNativeRange(native.start.node, native.start.offset, native.end.node, native.end.offset);
          } catch (ignored) {}
        });
      });
      this.emitter.on(_emitter4.default.events.SCROLL_OPTIMIZE, function (mutations, context) {
        if (context.range) {
          var _context$range = context.range,
              startNode = _context$range.startNode,
              startOffset = _context$range.startOffset,
              endNode = _context$range.endNode,
              endOffset = _context$range.endOffset;

          _this.setNativeRange(startNode, startOffset, endNode, endOffset);
        }
      });
      this.update(_emitter4.default.sources.SILENT);
    }

    _createClass(Selection, [{
      key: 'handleComposition',
      value: function handleComposition() {
        var _this2 = this;

        this.root.addEventListener('compositionstart', function () {
          _this2.composing = true;
        });
        this.root.addEventListener('compositionend', function () {
          _this2.composing = false;
          if (_this2.cursor.parent) {
            var range = _this2.cursor.restore();
            if (!range) return;
            setTimeout(function () {
              _this2.setNativeRange(range.startNode, range.startOffset, range.endNode, range.endOffset);
            }, 1);
          }
        });
      }
    }, {
      key: 'handleDragging',
      value: function handleDragging() {
        var _this3 = this;

        this.emitter.listenDOM('mousedown', document.body, function () {
          _this3.mouseDown = true;
        });
        this.emitter.listenDOM('mouseup', document.body, function () {
          _this3.mouseDown = false;
          _this3.update(_emitter4.default.sources.USER);
        });
      }
    }, {
      key: 'focus',
      value: function focus() {
        if (this.hasFocus()) return;
        this.root.focus();
        this.setRange(this.savedRange);
      }
    }, {
      key: 'format',
      value: function format(_format, value) {
        if (this.scroll.whitelist != null && !this.scroll.whitelist[_format]) return;
        this.scroll.update();
        var nativeRange = this.getNativeRange();
        if (nativeRange == null || !nativeRange.native.collapsed || _parchment2.default.query(_format, _parchment2.default.Scope.BLOCK)) return;
        if (nativeRange.start.node !== this.cursor.textNode) {
          var blot = _parchment2.default.find(nativeRange.start.node, false);
          if (blot == null) return;
          // TODO Give blot ability to not split
          if (blot instanceof _parchment2.default.Leaf) {
            var after = blot.split(nativeRange.start.offset);
            blot.parent.insertBefore(this.cursor, after);
          } else {
            blot.insertBefore(this.cursor, nativeRange.start.node); // Should never happen
          }
          this.cursor.attach();
        }
        this.cursor.format(_format, value);
        this.scroll.optimize();
        this.setNativeRange(this.cursor.textNode, this.cursor.textNode.data.length);
        this.update();
      }
    }, {
      key: 'getBounds',
      value: function getBounds(index) {
        var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

        var scrollLength = this.scroll.length();
        index = Math.min(index, scrollLength - 1);
        length = Math.min(index + length, scrollLength - 1) - index;
        var node = void 0,
            _scroll$leaf = this.scroll.leaf(index),
            _scroll$leaf2 = _slicedToArray(_scroll$leaf, 2),
            leaf = _scroll$leaf2[0],
            offset = _scroll$leaf2[1];
        if (leaf == null) return null;

        var _leaf$position = leaf.position(offset, true);

        var _leaf$position2 = _slicedToArray(_leaf$position, 2);

        node = _leaf$position2[0];
        offset = _leaf$position2[1];

        var range = document.createRange();
        if (length > 0) {
          range.setStart(node, offset);

          var _scroll$leaf3 = this.scroll.leaf(index + length);

          var _scroll$leaf4 = _slicedToArray(_scroll$leaf3, 2);

          leaf = _scroll$leaf4[0];
          offset = _scroll$leaf4[1];

          if (leaf == null) return null;

          var _leaf$position3 = leaf.position(offset, true);

          var _leaf$position4 = _slicedToArray(_leaf$position3, 2);

          node = _leaf$position4[0];
          offset = _leaf$position4[1];

          range.setEnd(node, offset);
          return range.getBoundingClientRect();
        } else {
          var side = 'left';
          var rect = void 0;
          if (node instanceof Text) {
            if (offset < node.data.length) {
              range.setStart(node, offset);
              range.setEnd(node, offset + 1);
            } else {
              range.setStart(node, offset - 1);
              range.setEnd(node, offset);
              side = 'right';
            }
            rect = range.getBoundingClientRect();
          } else {
            rect = leaf.domNode.getBoundingClientRect();
            if (offset > 0) side = 'right';
          }
          return {
            bottom: rect.top + rect.height,
            height: rect.height,
            left: rect[side],
            right: rect[side],
            top: rect.top,
            width: 0
          };
        }
      }
    }, {
      key: 'getNativeRange',
      value: function getNativeRange() {
        var selection = document.getSelection();
        if (selection == null || selection.rangeCount <= 0) return null;
        var nativeRange = selection.getRangeAt(0);
        if (nativeRange == null) return null;
        var range = this.normalizeNative(nativeRange);
        debug.info('getNativeRange', range);
        return range;
      }
    }, {
      key: 'getRange',
      value: function getRange() {
        var normalized = this.getNativeRange();
        if (normalized == null) return [null, null];
        var range = this.normalizedToRange(normalized);
        return [range, normalized];
      }
    }, {
      key: 'hasFocus',
      value: function hasFocus() {
        return document.activeElement === this.root;
      }
    }, {
      key: 'normalizedToRange',
      value: function normalizedToRange(range) {
        var _this4 = this;

        var positions = [[range.start.node, range.start.offset]];
        if (!range.native.collapsed) {
          positions.push([range.end.node, range.end.offset]);
        }
        var indexes = positions.map(function (position) {
          var _position = _slicedToArray(position, 2),
              node = _position[0],
              offset = _position[1];

          var blot = _parchment2.default.find(node, true);
          var index = blot.offset(_this4.scroll);
          if (offset === 0) {
            return index;
          } else if (blot instanceof _parchment2.default.Container) {
            return index + blot.length();
          } else {
            return index + blot.index(node, offset);
          }
        });
        var end = Math.min(Math.max.apply(Math, _toConsumableArray(indexes)), this.scroll.length() - 1);
        var start = Math.min.apply(Math, [end].concat(_toConsumableArray(indexes)));
        return new Range(start, end - start);
      }
    }, {
      key: 'normalizeNative',
      value: function normalizeNative(nativeRange) {
        if (!contains(this.root, nativeRange.startContainer) || !nativeRange.collapsed && !contains(this.root, nativeRange.endContainer)) {
          return null;
        }
        var range = {
          start: { node: nativeRange.startContainer, offset: nativeRange.startOffset },
          end: { node: nativeRange.endContainer, offset: nativeRange.endOffset },
          native: nativeRange
        };
        [range.start, range.end].forEach(function (position) {
          var node = position.node,
              offset = position.offset;
          while (!(node instanceof Text) && node.childNodes.length > 0) {
            if (node.childNodes.length > offset) {
              node = node.childNodes[offset];
              offset = 0;
            } else if (node.childNodes.length === offset) {
              node = node.lastChild;
              offset = node instanceof Text ? node.data.length : node.childNodes.length + 1;
            } else {
              break;
            }
          }
          position.node = node, position.offset = offset;
        });
        return range;
      }
    }, {
      key: 'rangeToNative',
      value: function rangeToNative(range) {
        var _this5 = this;

        var indexes = range.collapsed ? [range.index] : [range.index, range.index + range.length];
        var args = [];
        var scrollLength = this.scroll.length();
        indexes.forEach(function (index, i) {
          index = Math.min(scrollLength - 1, index);
          var node = void 0,
              _scroll$leaf5 = _this5.scroll.leaf(index),
              _scroll$leaf6 = _slicedToArray(_scroll$leaf5, 2),
              leaf = _scroll$leaf6[0],
              offset = _scroll$leaf6[1];
          var _leaf$position5 = leaf.position(offset, i !== 0);

          var _leaf$position6 = _slicedToArray(_leaf$position5, 2);

          node = _leaf$position6[0];
          offset = _leaf$position6[1];

          args.push(node, offset);
        });
        if (args.length < 2) {
          args = args.concat(args);
        }
        return args;
      }
    }, {
      key: 'scrollIntoView',
      value: function scrollIntoView(scrollingContainer) {
        var range = this.lastRange;
        if (range == null) return;
        var bounds = this.getBounds(range.index, range.length);
        if (bounds == null) return;
        var limit = this.scroll.length() - 1;

        var _scroll$line = this.scroll.line(Math.min(range.index, limit)),
            _scroll$line2 = _slicedToArray(_scroll$line, 1),
            first = _scroll$line2[0];

        var last = first;
        if (range.length > 0) {
          var _scroll$line3 = this.scroll.line(Math.min(range.index + range.length, limit));

          var _scroll$line4 = _slicedToArray(_scroll$line3, 1);

          last = _scroll$line4[0];
        }
        if (first == null || last == null) return;
        var scrollBounds = scrollingContainer.getBoundingClientRect();
        if (bounds.top < scrollBounds.top) {
          scrollingContainer.scrollTop -= scrollBounds.top - bounds.top;
        } else if (bounds.bottom > scrollBounds.bottom) {
          scrollingContainer.scrollTop += bounds.bottom - scrollBounds.bottom;
        }
      }
    }, {
      key: 'setNativeRange',
      value: function setNativeRange(startNode, startOffset) {
        var endNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : startNode;
        var endOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : startOffset;
        var force = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

        debug.info('setNativeRange', startNode, startOffset, endNode, endOffset);
        if (startNode != null && (this.root.parentNode == null || startNode.parentNode == null || endNode.parentNode == null)) {
          return;
        }
        var selection = document.getSelection();
        if (selection == null) return;
        if (startNode != null) {
          if (!this.hasFocus()) this.root.focus();
          var native = (this.getNativeRange() || {}).native;
          if (native == null || force || startNode !== native.startContainer || startOffset !== native.startOffset || endNode !== native.endContainer || endOffset !== native.endOffset) {

            if (startNode.tagName == "BR") {
              startOffset = [].indexOf.call(startNode.parentNode.childNodes, startNode);
              startNode = startNode.parentNode;
            }
            if (endNode.tagName == "BR") {
              endOffset = [].indexOf.call(endNode.parentNode.childNodes, endNode);
              endNode = endNode.parentNode;
            }
            var range = document.createRange();
            range.setStart(startNode, startOffset);
            range.setEnd(endNode, endOffset);
            selection.removeAllRanges();
            selection.addRange(range);
          }
        } else {
          selection.removeAllRanges();
          this.root.blur();
          document.body.focus(); // root.blur() not enough on IE11+Travis+SauceLabs (but not local VMs)
        }
      }
    }, {
      key: 'setRange',
      value: function setRange(range) {
        var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;

        if (typeof force === 'string') {
          source = force;
          force = false;
        }
        debug.info('setRange', range);
        if (range != null) {
          var args = this.rangeToNative(range);
          this.setNativeRange.apply(this, _toConsumableArray(args).concat([force]));
        } else {
          this.setNativeRange(null);
        }
        this.update(source);
      }
    }, {
      key: 'update',
      value: function update() {
        var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;

        var oldRange = this.lastRange;

        var _getRange = this.getRange(),
            _getRange2 = _slicedToArray(_getRange, 2),
            lastRange = _getRange2[0],
            nativeRange = _getRange2[1];

        this.lastRange = lastRange;
        if (this.lastRange != null) {
          this.savedRange = this.lastRange;
        }
        if (!(0, _deepEqual2.default)(oldRange, this.lastRange)) {
          var _emitter;

          if (!this.composing && nativeRange != null && nativeRange.native.collapsed && nativeRange.start.node !== this.cursor.textNode) {
            this.cursor.restore();
          }
          var args = [_emitter4.default.events.SELECTION_CHANGE, (0, _clone2.default)(this.lastRange), (0, _clone2.default)(oldRange), source];
          (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));
          if (source !== _emitter4.default.sources.SILENT) {
            var _emitter2;

            (_emitter2 = this.emitter).emit.apply(_emitter2, args);
          }
        }
      }
    }]);

    return Selection;
  }();

  function contains(parent, descendant) {
    try {
      // Firefox inserts inaccessible nodes around video elements
      descendant.parentNode;
    } catch (e) {
      return false;
    }
    // IE11 has bug with Text nodes
    // https://connect.microsoft.com/IE/feedback/details/780874/node-contains-is-incorrect
    if (descendant instanceof Text) {
      descendant = descendant.parentNode;
    }
    return parent.contains(descendant);
  }

  exports.Range = Range;
  exports.default = Selection;

  /***/ }),
  /* 16 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Break = function (_Parchment$Embed) {
    _inherits(Break, _Parchment$Embed);

    function Break() {
      _classCallCheck(this, Break);

      return _possibleConstructorReturn(this, (Break.__proto__ || Object.getPrototypeOf(Break)).apply(this, arguments));
    }

    _createClass(Break, [{
      key: 'insertInto',
      value: function insertInto(parent, ref) {
        if (parent.children.length === 0) {
          _get(Break.prototype.__proto__ || Object.getPrototypeOf(Break.prototype), 'insertInto', this).call(this, parent, ref);
        } else {
          this.remove();
        }
      }
    }, {
      key: 'length',
      value: function length() {
        return 0;
      }
    }, {
      key: 'value',
      value: function value() {
        return '';
      }
    }], [{
      key: 'value',
      value: function value() {
        return undefined;
      }
    }]);

    return Break;
  }(_parchment2.default.Embed);

  Break.blotName = 'break';
  Break.tagName = 'BR';

  exports.default = Break;

  /***/ }),
  /* 17 */
  /***/ (function(module, exports, __webpack_require__) {

  var __extends = (this && this.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var linked_list_1 = __webpack_require__(44);
  var shadow_1 = __webpack_require__(30);
  var Registry = __webpack_require__(1);
  var ContainerBlot = /** @class */ (function (_super) {
      __extends(ContainerBlot, _super);
      function ContainerBlot(domNode) {
          var _this = _super.call(this, domNode) || this;
          _this.build();
          return _this;
      }
      ContainerBlot.prototype.appendChild = function (other) {
          this.insertBefore(other);
      };
      ContainerBlot.prototype.attach = function () {
          _super.prototype.attach.call(this);
          this.children.forEach(function (child) {
              child.attach();
          });
      };
      ContainerBlot.prototype.build = function () {
          var _this = this;
          this.children = new linked_list_1.default();
          // Need to be reversed for if DOM nodes already in order
          [].slice
              .call(this.domNode.childNodes)
              .reverse()
              .forEach(function (node) {
              try {
                  var child = makeBlot(node);
                  _this.insertBefore(child, _this.children.head || undefined);
              }
              catch (err) {
                  if (err instanceof Registry.ParchmentError)
                      return;
                  else
                      throw err;
              }
          });
      };
      ContainerBlot.prototype.deleteAt = function (index, length) {
          if (index === 0 && length === this.length()) {
              return this.remove();
          }
          this.children.forEachAt(index, length, function (child, offset, length) {
              child.deleteAt(offset, length);
          });
      };
      ContainerBlot.prototype.descendant = function (criteria, index) {
          var _a = this.children.find(index), child = _a[0], offset = _a[1];
          if ((criteria.blotName == null && criteria(child)) ||
              (criteria.blotName != null && child instanceof criteria)) {
              return [child, offset];
          }
          else if (child instanceof ContainerBlot) {
              return child.descendant(criteria, offset);
          }
          else {
              return [null, -1];
          }
      };
      ContainerBlot.prototype.descendants = function (criteria, index, length) {
          if (index === void 0) { index = 0; }
          if (length === void 0) { length = Number.MAX_VALUE; }
          var descendants = [];
          var lengthLeft = length;
          this.children.forEachAt(index, length, function (child, index, length) {
              if ((criteria.blotName == null && criteria(child)) ||
                  (criteria.blotName != null && child instanceof criteria)) {
                  descendants.push(child);
              }
              if (child instanceof ContainerBlot) {
                  descendants = descendants.concat(child.descendants(criteria, index, lengthLeft));
              }
              lengthLeft -= length;
          });
          return descendants;
      };
      ContainerBlot.prototype.detach = function () {
          this.children.forEach(function (child) {
              child.detach();
          });
          _super.prototype.detach.call(this);
      };
      ContainerBlot.prototype.formatAt = function (index, length, name, value) {
          this.children.forEachAt(index, length, function (child, offset, length) {
              child.formatAt(offset, length, name, value);
          });
      };
      ContainerBlot.prototype.insertAt = function (index, value, def) {
          var _a = this.children.find(index), child = _a[0], offset = _a[1];
          if (child) {
              child.insertAt(offset, value, def);
          }
          else {
              var blot = def == null ? Registry.create('text', value) : Registry.create(value, def);
              this.appendChild(blot);
          }
      };
      ContainerBlot.prototype.insertBefore = function (childBlot, refBlot) {
          if (this.statics.allowedChildren != null &&
              !this.statics.allowedChildren.some(function (child) {
                  return childBlot instanceof child;
              })) {
              throw new Registry.ParchmentError("Cannot insert " + childBlot.statics.blotName + " into " + this.statics.blotName);
          }
          childBlot.insertInto(this, refBlot);
      };
      ContainerBlot.prototype.length = function () {
          return this.children.reduce(function (memo, child) {
              return memo + child.length();
          }, 0);
      };
      ContainerBlot.prototype.moveChildren = function (targetParent, refNode) {
          this.children.forEach(function (child) {
              targetParent.insertBefore(child, refNode);
          });
      };
      ContainerBlot.prototype.optimize = function (context) {
          _super.prototype.optimize.call(this, context);
          if (this.children.length === 0) {
              if (this.statics.defaultChild != null) {
                  var child = Registry.create(this.statics.defaultChild);
                  this.appendChild(child);
                  child.optimize(context);
              }
              else {
                  this.remove();
              }
          }
      };
      ContainerBlot.prototype.path = function (index, inclusive) {
          if (inclusive === void 0) { inclusive = false; }
          var _a = this.children.find(index, inclusive), child = _a[0], offset = _a[1];
          var position = [[this, index]];
          if (child instanceof ContainerBlot) {
              return position.concat(child.path(offset, inclusive));
          }
          else if (child != null) {
              position.push([child, offset]);
          }
          return position;
      };
      ContainerBlot.prototype.removeChild = function (child) {
          this.children.remove(child);
      };
      ContainerBlot.prototype.replace = function (target) {
          if (target instanceof ContainerBlot) {
              target.moveChildren(this);
          }
          _super.prototype.replace.call(this, target);
      };
      ContainerBlot.prototype.split = function (index, force) {
          if (force === void 0) { force = false; }
          if (!force) {
              if (index === 0)
                  return this;
              if (index === this.length())
                  return this.next;
          }
          var after = this.clone();
          this.parent.insertBefore(after, this.next);
          this.children.forEachAt(index, this.length(), function (child, offset, length) {
              child = child.split(offset, force);
              after.appendChild(child);
          });
          return after;
      };
      ContainerBlot.prototype.unwrap = function () {
          this.moveChildren(this.parent, this.next);
          this.remove();
      };
      ContainerBlot.prototype.update = function (mutations, context) {
          var _this = this;
          var addedNodes = [];
          var removedNodes = [];
          mutations.forEach(function (mutation) {
              if (mutation.target === _this.domNode && mutation.type === 'childList') {
                  addedNodes.push.apply(addedNodes, mutation.addedNodes);
                  removedNodes.push.apply(removedNodes, mutation.removedNodes);
              }
          });
          removedNodes.forEach(function (node) {
              // Check node has actually been removed
              // One exception is Chrome does not immediately remove IFRAMEs
              // from DOM but MutationRecord is correct in its reported removal
              if (node.parentNode != null &&
                  // @ts-ignore
                  node.tagName !== 'IFRAME' &&
                  document.body.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {
                  return;
              }
              var blot = Registry.find(node);
              if (blot == null)
                  return;
              if (blot.domNode.parentNode == null || blot.domNode.parentNode === _this.domNode) {
                  blot.detach();
              }
          });
          addedNodes
              .filter(function (node) {
              return node.parentNode == _this.domNode;
          })
              .sort(function (a, b) {
              if (a === b)
                  return 0;
              if (a.compareDocumentPosition(b) & Node.DOCUMENT_POSITION_FOLLOWING) {
                  return 1;
              }
              return -1;
          })
              .forEach(function (node) {
              var refBlot = null;
              if (node.nextSibling != null) {
                  refBlot = Registry.find(node.nextSibling);
              }
              var blot = makeBlot(node);
              if (blot.next != refBlot || blot.next == null) {
                  if (blot.parent != null) {
                      blot.parent.removeChild(_this);
                  }
                  _this.insertBefore(blot, refBlot || undefined);
              }
          });
      };
      return ContainerBlot;
  }(shadow_1.default));
  function makeBlot(node) {
      var blot = Registry.find(node);
      if (blot == null) {
          try {
              blot = Registry.create(node);
          }
          catch (e) {
              blot = Registry.create(Registry.Scope.INLINE);
              [].slice.call(node.childNodes).forEach(function (child) {
                  // @ts-ignore
                  blot.domNode.appendChild(child);
              });
              if (node.parentNode) {
                  node.parentNode.replaceChild(blot.domNode, node);
              }
              blot.attach();
          }
      }
      return blot;
  }
  exports.default = ContainerBlot;


  /***/ }),
  /* 18 */
  /***/ (function(module, exports, __webpack_require__) {

  var __extends = (this && this.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var attributor_1 = __webpack_require__(12);
  var store_1 = __webpack_require__(31);
  var container_1 = __webpack_require__(17);
  var Registry = __webpack_require__(1);
  var FormatBlot = /** @class */ (function (_super) {
      __extends(FormatBlot, _super);
      function FormatBlot(domNode) {
          var _this = _super.call(this, domNode) || this;
          _this.attributes = new store_1.default(_this.domNode);
          return _this;
      }
      FormatBlot.formats = function (domNode) {
          if (typeof this.tagName === 'string') {
              return true;
          }
          else if (Array.isArray(this.tagName)) {
              return domNode.tagName.toLowerCase();
          }
          return undefined;
      };
      FormatBlot.prototype.format = function (name, value) {
          var format = Registry.query(name);
          if (format instanceof attributor_1.default) {
              this.attributes.attribute(format, value);
          }
          else if (value) {
              if (format != null && (name !== this.statics.blotName || this.formats()[name] !== value)) {
                  this.replaceWith(name, value);
              }
          }
      };
      FormatBlot.prototype.formats = function () {
          var formats = this.attributes.values();
          var format = this.statics.formats(this.domNode);
          if (format != null) {
              formats[this.statics.blotName] = format;
          }
          return formats;
      };
      FormatBlot.prototype.replaceWith = function (name, value) {
          var replacement = _super.prototype.replaceWith.call(this, name, value);
          this.attributes.copy(replacement);
          return replacement;
      };
      FormatBlot.prototype.update = function (mutations, context) {
          var _this = this;
          _super.prototype.update.call(this, mutations, context);
          if (mutations.some(function (mutation) {
              return mutation.target === _this.domNode && mutation.type === 'attributes';
          })) {
              this.attributes.build();
          }
      };
      FormatBlot.prototype.wrap = function (name, value) {
          var wrapper = _super.prototype.wrap.call(this, name, value);
          if (wrapper instanceof FormatBlot && wrapper.statics.scope === this.statics.scope) {
              this.attributes.move(wrapper);
          }
          return wrapper;
      };
      return FormatBlot;
  }(container_1.default));
  exports.default = FormatBlot;


  /***/ }),
  /* 19 */
  /***/ (function(module, exports, __webpack_require__) {

  var __extends = (this && this.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var shadow_1 = __webpack_require__(30);
  var Registry = __webpack_require__(1);
  var LeafBlot = /** @class */ (function (_super) {
      __extends(LeafBlot, _super);
      function LeafBlot() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      LeafBlot.value = function (domNode) {
          return true;
      };
      LeafBlot.prototype.index = function (node, offset) {
          if (this.domNode === node ||
              this.domNode.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {
              return Math.min(offset, 1);
          }
          return -1;
      };
      LeafBlot.prototype.position = function (index, inclusive) {
          var offset = [].indexOf.call(this.parent.domNode.childNodes, this.domNode);
          if (index > 0)
              offset += 1;
          return [this.parent.domNode, offset];
      };
      LeafBlot.prototype.value = function () {
          return _a = {}, _a[this.statics.blotName] = this.statics.value(this.domNode) || true, _a;
          var _a;
      };
      LeafBlot.scope = Registry.Scope.INLINE_BLOT;
      return LeafBlot;
  }(shadow_1.default));
  exports.default = LeafBlot;


  /***/ }),
  /* 20 */
  /***/ (function(module, exports, __webpack_require__) {

  var equal = __webpack_require__(11);
  var extend = __webpack_require__(3);


  var lib = {
    attributes: {
      compose: function (a, b, keepNull) {
        if (typeof a !== 'object') a = {};
        if (typeof b !== 'object') b = {};
        var attributes = extend(true, {}, b);
        if (!keepNull) {
          attributes = Object.keys(attributes).reduce(function (copy, key) {
            if (attributes[key] != null) {
              copy[key] = attributes[key];
            }
            return copy;
          }, {});
        }
        for (var key in a) {
          if (a[key] !== undefined && b[key] === undefined) {
            attributes[key] = a[key];
          }
        }
        return Object.keys(attributes).length > 0 ? attributes : undefined;
      },

      diff: function(a, b) {
        if (typeof a !== 'object') a = {};
        if (typeof b !== 'object') b = {};
        var attributes = Object.keys(a).concat(Object.keys(b)).reduce(function (attributes, key) {
          if (!equal(a[key], b[key])) {
            attributes[key] = b[key] === undefined ? null : b[key];
          }
          return attributes;
        }, {});
        return Object.keys(attributes).length > 0 ? attributes : undefined;
      },

      transform: function (a, b, priority) {
        if (typeof a !== 'object') return b;
        if (typeof b !== 'object') return undefined;
        if (!priority) return b;  // b simply overwrites us without priority
        var attributes = Object.keys(b).reduce(function (attributes, key) {
          if (a[key] === undefined) attributes[key] = b[key];  // null is a valid value
          return attributes;
        }, {});
        return Object.keys(attributes).length > 0 ? attributes : undefined;
      }
    },

    iterator: function (ops) {
      return new Iterator(ops);
    },

    length: function (op) {
      if (typeof op['delete'] === 'number') {
        return op['delete'];
      } else if (typeof op.retain === 'number') {
        return op.retain;
      } else {
        return typeof op.insert === 'string' ? op.insert.length : 1;
      }
    }
  };


  function Iterator(ops) {
    this.ops = ops;
    this.index = 0;
    this.offset = 0;
  }
  Iterator.prototype.hasNext = function () {
    return this.peekLength() < Infinity;
  };

  Iterator.prototype.next = function (length) {
    if (!length) length = Infinity;
    var nextOp = this.ops[this.index];
    if (nextOp) {
      var offset = this.offset;
      var opLength = lib.length(nextOp);
      if (length >= opLength - offset) {
        length = opLength - offset;
        this.index += 1;
        this.offset = 0;
      } else {
        this.offset += length;
      }
      if (typeof nextOp['delete'] === 'number') {
        return { 'delete': length };
      } else {
        var retOp = {};
        if (nextOp.attributes) {
          retOp.attributes = nextOp.attributes;
        }
        if (typeof nextOp.retain === 'number') {
          retOp.retain = length;
        } else if (typeof nextOp.insert === 'string') {
          retOp.insert = nextOp.insert.substr(offset, length);
        } else {
          // offset should === 0, length should === 1
          retOp.insert = nextOp.insert;
        }
        return retOp;
      }
    } else {
      return { retain: Infinity };
    }
  };

  Iterator.prototype.peek = function () {
    return this.ops[this.index];
  };

  Iterator.prototype.peekLength = function () {
    if (this.ops[this.index]) {
      // Should never return 0 if our index is being managed correctly
      return lib.length(this.ops[this.index]) - this.offset;
    } else {
      return Infinity;
    }
  };

  Iterator.prototype.peekType = function () {
    if (this.ops[this.index]) {
      if (typeof this.ops[this.index]['delete'] === 'number') {
        return 'delete';
      } else if (typeof this.ops[this.index].retain === 'number') {
        return 'retain';
      } else {
        return 'insert';
      }
    }
    return 'retain';
  };


  module.exports = lib;


  /***/ }),
  /* 21 */
  /***/ (function(module, exports) {

  var clone = (function() {

  function _instanceof(obj, type) {
    return type != null && obj instanceof type;
  }

  var nativeMap;
  try {
    nativeMap = Map;
  } catch(_) {
    // maybe a reference error because no `Map`. Give it a dummy value that no
    // value will ever be an instanceof.
    nativeMap = function() {};
  }

  var nativeSet;
  try {
    nativeSet = Set;
  } catch(_) {
    nativeSet = function() {};
  }

  var nativePromise;
  try {
    nativePromise = Promise;
  } catch(_) {
    nativePromise = function() {};
  }

  /**
   * Clones (copies) an Object using deep copying.
   *
   * This function supports circular references by default, but if you are certain
   * there are no circular references in your object, you can save some CPU time
   * by calling clone(obj, false).
   *
   * Caution: if `circular` is false and `parent` contains circular references,
   * your program may enter an infinite loop and crash.
   *
   * @param `parent` - the object to be cloned
   * @param `circular` - set to true if the object to be cloned may contain
   *    circular references. (optional - true by default)
   * @param `depth` - set to a number if the object is only to be cloned to
   *    a particular depth. (optional - defaults to Infinity)
   * @param `prototype` - sets the prototype to be used when cloning an object.
   *    (optional - defaults to parent prototype).
   * @param `includeNonEnumerable` - set to true if the non-enumerable properties
   *    should be cloned as well. Non-enumerable properties on the prototype
   *    chain will be ignored. (optional - false by default)
  */
  function clone(parent, circular, depth, prototype, includeNonEnumerable) {
    if (typeof circular === 'object') {
      depth = circular.depth;
      prototype = circular.prototype;
      includeNonEnumerable = circular.includeNonEnumerable;
      circular = circular.circular;
    }
    // maintain two arrays for circular references, where corresponding parents
    // and children have the same index
    var allParents = [];
    var allChildren = [];

    var useBuffer = typeof Buffer != 'undefined';

    if (typeof circular == 'undefined')
      circular = true;

    if (typeof depth == 'undefined')
      depth = Infinity;

    // recurse this function so we don't reset allParents and allChildren
    function _clone(parent, depth) {
      // cloning null always returns null
      if (parent === null)
        return null;

      if (depth === 0)
        return parent;

      var child;
      var proto;
      if (typeof parent != 'object') {
        return parent;
      }

      if (_instanceof(parent, nativeMap)) {
        child = new nativeMap();
      } else if (_instanceof(parent, nativeSet)) {
        child = new nativeSet();
      } else if (_instanceof(parent, nativePromise)) {
        child = new nativePromise(function (resolve, reject) {
          parent.then(function(value) {
            resolve(_clone(value, depth - 1));
          }, function(err) {
            reject(_clone(err, depth - 1));
          });
        });
      } else if (clone.__isArray(parent)) {
        child = [];
      } else if (clone.__isRegExp(parent)) {
        child = new RegExp(parent.source, __getRegExpFlags(parent));
        if (parent.lastIndex) child.lastIndex = parent.lastIndex;
      } else if (clone.__isDate(parent)) {
        child = new Date(parent.getTime());
      } else if (useBuffer && Buffer.isBuffer(parent)) {
        child = new Buffer(parent.length);
        parent.copy(child);
        return child;
      } else if (_instanceof(parent, Error)) {
        child = Object.create(parent);
      } else {
        if (typeof prototype == 'undefined') {
          proto = Object.getPrototypeOf(parent);
          child = Object.create(proto);
        }
        else {
          child = Object.create(prototype);
          proto = prototype;
        }
      }

      if (circular) {
        var index = allParents.indexOf(parent);

        if (index != -1) {
          return allChildren[index];
        }
        allParents.push(parent);
        allChildren.push(child);
      }

      if (_instanceof(parent, nativeMap)) {
        parent.forEach(function(value, key) {
          var keyChild = _clone(key, depth - 1);
          var valueChild = _clone(value, depth - 1);
          child.set(keyChild, valueChild);
        });
      }
      if (_instanceof(parent, nativeSet)) {
        parent.forEach(function(value) {
          var entryChild = _clone(value, depth - 1);
          child.add(entryChild);
        });
      }

      for (var i in parent) {
        var attrs;
        if (proto) {
          attrs = Object.getOwnPropertyDescriptor(proto, i);
        }

        if (attrs && attrs.set == null) {
          continue;
        }
        child[i] = _clone(parent[i], depth - 1);
      }

      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(parent);
        for (var i = 0; i < symbols.length; i++) {
          // Don't need to worry about cloning a symbol because it is a primitive,
          // like a number or string.
          var symbol = symbols[i];
          var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);
          if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
            continue;
          }
          child[symbol] = _clone(parent[symbol], depth - 1);
          if (!descriptor.enumerable) {
            Object.defineProperty(child, symbol, {
              enumerable: false
            });
          }
        }
      }

      if (includeNonEnumerable) {
        var allPropertyNames = Object.getOwnPropertyNames(parent);
        for (var i = 0; i < allPropertyNames.length; i++) {
          var propertyName = allPropertyNames[i];
          var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);
          if (descriptor && descriptor.enumerable) {
            continue;
          }
          child[propertyName] = _clone(parent[propertyName], depth - 1);
          Object.defineProperty(child, propertyName, {
            enumerable: false
          });
        }
      }

      return child;
    }

    return _clone(parent, depth);
  }

  /**
   * Simple flat clone using prototype, accepts only objects, usefull for property
   * override on FLAT configuration object (no nested props).
   *
   * USE WITH CAUTION! This may not behave as you wish if you do not know how this
   * works.
   */
  clone.clonePrototype = function clonePrototype(parent) {
    if (parent === null)
      return null;

    var c = function () {};
    c.prototype = parent;
    return new c();
  };

  // private utility functions

  function __objToStr(o) {
    return Object.prototype.toString.call(o);
  }
  clone.__objToStr = __objToStr;

  function __isDate(o) {
    return typeof o === 'object' && __objToStr(o) === '[object Date]';
  }
  clone.__isDate = __isDate;

  function __isArray(o) {
    return typeof o === 'object' && __objToStr(o) === '[object Array]';
  }
  clone.__isArray = __isArray;

  function __isRegExp(o) {
    return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
  }
  clone.__isRegExp = __isRegExp;

  function __getRegExpFlags(re) {
    var flags = '';
    if (re.global) flags += 'g';
    if (re.ignoreCase) flags += 'i';
    if (re.multiline) flags += 'm';
    return flags;
  }
  clone.__getRegExpFlags = __getRegExpFlags;

  return clone;
  })();

  if (typeof module === 'object' && module.exports) {
    module.exports = clone;
  }


  /***/ }),
  /* 22 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _emitter = __webpack_require__(8);

  var _emitter2 = _interopRequireDefault(_emitter);

  var _block = __webpack_require__(4);

  var _block2 = _interopRequireDefault(_block);

  var _break = __webpack_require__(16);

  var _break2 = _interopRequireDefault(_break);

  var _code = __webpack_require__(13);

  var _code2 = _interopRequireDefault(_code);

  var _container = __webpack_require__(25);

  var _container2 = _interopRequireDefault(_container);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  function isLine(blot) {
    return blot instanceof _block2.default || blot instanceof _block.BlockEmbed;
  }

  var Scroll = function (_Parchment$Scroll) {
    _inherits(Scroll, _Parchment$Scroll);

    function Scroll(domNode, config) {
      _classCallCheck(this, Scroll);

      var _this = _possibleConstructorReturn(this, (Scroll.__proto__ || Object.getPrototypeOf(Scroll)).call(this, domNode));

      _this.emitter = config.emitter;
      if (Array.isArray(config.whitelist)) {
        _this.whitelist = config.whitelist.reduce(function (whitelist, format) {
          whitelist[format] = true;
          return whitelist;
        }, {});
      }
      // Some reason fixes composition issues with character languages in Windows/Chrome, Safari
      _this.domNode.addEventListener('DOMNodeInserted', function () {});
      _this.optimize();
      _this.enable();
      return _this;
    }

    _createClass(Scroll, [{
      key: 'batchStart',
      value: function batchStart() {
        this.batch = true;
      }
    }, {
      key: 'batchEnd',
      value: function batchEnd() {
        this.batch = false;
        this.optimize();
      }
    }, {
      key: 'deleteAt',
      value: function deleteAt(index, length) {
        var _line = this.line(index),
            _line2 = _slicedToArray(_line, 2),
            first = _line2[0],
            offset = _line2[1];

        var _line3 = this.line(index + length),
            _line4 = _slicedToArray(_line3, 1),
            last = _line4[0];

        _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'deleteAt', this).call(this, index, length);
        if (last != null && first !== last && offset > 0) {
          if (first instanceof _block.BlockEmbed || last instanceof _block.BlockEmbed) {
            this.optimize();
            return;
          }
          if (first instanceof _code2.default) {
            var newlineIndex = first.newlineIndex(first.length(), true);
            if (newlineIndex > -1) {
              first = first.split(newlineIndex + 1);
              if (first === last) {
                this.optimize();
                return;
              }
            }
          } else if (last instanceof _code2.default) {
            var _newlineIndex = last.newlineIndex(0);
            if (_newlineIndex > -1) {
              last.split(_newlineIndex + 1);
            }
          }
          var ref = last.children.head instanceof _break2.default ? null : last.children.head;
          first.moveChildren(last, ref);
          first.remove();
        }
        this.optimize();
      }
    }, {
      key: 'enable',
      value: function enable() {
        var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        this.domNode.setAttribute('contenteditable', enabled);
      }
    }, {
      key: 'formatAt',
      value: function formatAt(index, length, format, value) {
        if (this.whitelist != null && !this.whitelist[format]) return;
        _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'formatAt', this).call(this, index, length, format, value);
        this.optimize();
      }
    }, {
      key: 'insertAt',
      value: function insertAt(index, value, def) {
        if (def != null && this.whitelist != null && !this.whitelist[value]) return;
        if (index >= this.length()) {
          if (def == null || _parchment2.default.query(value, _parchment2.default.Scope.BLOCK) == null) {
            var blot = _parchment2.default.create(this.statics.defaultChild);
            this.appendChild(blot);
            if (def == null && value.endsWith('\n')) {
              value = value.slice(0, -1);
            }
            blot.insertAt(0, value, def);
          } else {
            var embed = _parchment2.default.create(value, def);
            this.appendChild(embed);
          }
        } else {
          _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'insertAt', this).call(this, index, value, def);
        }
        this.optimize();
      }
    }, {
      key: 'insertBefore',
      value: function insertBefore(blot, ref) {
        if (blot.statics.scope === _parchment2.default.Scope.INLINE_BLOT) {
          var wrapper = _parchment2.default.create(this.statics.defaultChild);
          wrapper.appendChild(blot);
          blot = wrapper;
        }
        _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'insertBefore', this).call(this, blot, ref);
      }
    }, {
      key: 'leaf',
      value: function leaf(index) {
        return this.path(index).pop() || [null, -1];
      }
    }, {
      key: 'line',
      value: function line(index) {
        if (index === this.length()) {
          return this.line(index - 1);
        }
        return this.descendant(isLine, index);
      }
    }, {
      key: 'lines',
      value: function lines() {
        var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;

        var getLines = function getLines(blot, index, length) {
          var lines = [],
              lengthLeft = length;
          blot.children.forEachAt(index, length, function (child, index, length) {
            if (isLine(child)) {
              lines.push(child);
            } else if (child instanceof _parchment2.default.Container) {
              lines = lines.concat(getLines(child, index, lengthLeft));
            }
            lengthLeft -= length;
          });
          return lines;
        };
        return getLines(this, index, length);
      }
    }, {
      key: 'optimize',
      value: function optimize() {
        var mutations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (this.batch === true) return;
        _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'optimize', this).call(this, mutations, context);
        if (mutations.length > 0) {
          this.emitter.emit(_emitter2.default.events.SCROLL_OPTIMIZE, mutations, context);
        }
      }
    }, {
      key: 'path',
      value: function path(index) {
        return _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'path', this).call(this, index).slice(1); // Exclude self
      }
    }, {
      key: 'update',
      value: function update(mutations) {
        if (this.batch === true) return;
        var source = _emitter2.default.sources.USER;
        if (typeof mutations === 'string') {
          source = mutations;
        }
        if (!Array.isArray(mutations)) {
          mutations = this.observer.takeRecords();
        }
        if (mutations.length > 0) {
          this.emitter.emit(_emitter2.default.events.SCROLL_BEFORE_UPDATE, source, mutations);
        }
        _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'update', this).call(this, mutations.concat([])); // pass copy
        if (mutations.length > 0) {
          this.emitter.emit(_emitter2.default.events.SCROLL_UPDATE, source, mutations);
        }
      }
    }]);

    return Scroll;
  }(_parchment2.default.Scroll);

  Scroll.blotName = 'scroll';
  Scroll.className = 'ql-editor';
  Scroll.tagName = 'DIV';
  Scroll.defaultChild = 'block';
  Scroll.allowedChildren = [_block2.default, _block.BlockEmbed, _container2.default];

  exports.default = Scroll;

  /***/ }),
  /* 23 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SHORTKEY = exports.default = undefined;

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _clone = __webpack_require__(21);

  var _clone2 = _interopRequireDefault(_clone);

  var _deepEqual = __webpack_require__(11);

  var _deepEqual2 = _interopRequireDefault(_deepEqual);

  var _extend = __webpack_require__(3);

  var _extend2 = _interopRequireDefault(_extend);

  var _quillDelta = __webpack_require__(2);

  var _quillDelta2 = _interopRequireDefault(_quillDelta);

  var _op = __webpack_require__(20);

  var _op2 = _interopRequireDefault(_op);

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _quill = __webpack_require__(5);

  var _quill2 = _interopRequireDefault(_quill);

  var _logger = __webpack_require__(10);

  var _logger2 = _interopRequireDefault(_logger);

  var _module = __webpack_require__(9);

  var _module2 = _interopRequireDefault(_module);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var debug = (0, _logger2.default)('quill:keyboard');

  var SHORTKEY = /Mac/i.test(navigator.platform) ? 'metaKey' : 'ctrlKey';

  var Keyboard = function (_Module) {
    _inherits(Keyboard, _Module);

    _createClass(Keyboard, null, [{
      key: 'match',
      value: function match(evt, binding) {
        binding = normalize(binding);
        if (['altKey', 'ctrlKey', 'metaKey', 'shiftKey'].some(function (key) {
          return !!binding[key] !== evt[key] && binding[key] !== null;
        })) {
          return false;
        }
        return binding.key === (evt.which || evt.keyCode);
      }
    }]);

    function Keyboard(quill, options) {
      _classCallCheck(this, Keyboard);

      var _this = _possibleConstructorReturn(this, (Keyboard.__proto__ || Object.getPrototypeOf(Keyboard)).call(this, quill, options));

      _this.bindings = {};
      Object.keys(_this.options.bindings).forEach(function (name) {
        if (name === 'list autofill' && quill.scroll.whitelist != null && !quill.scroll.whitelist['list']) {
          return;
        }
        if (_this.options.bindings[name]) {
          _this.addBinding(_this.options.bindings[name]);
        }
      });
      _this.addBinding({ key: Keyboard.keys.ENTER, shiftKey: null }, handleEnter);
      _this.addBinding({ key: Keyboard.keys.ENTER, metaKey: null, ctrlKey: null, altKey: null }, function () {});
      if (/Firefox/i.test(navigator.userAgent)) {
        // Need to handle delete and backspace for Firefox in the general case #1171
        _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: true }, handleBackspace);
        _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: true }, handleDelete);
      } else {
        _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: true, prefix: /^.?$/ }, handleBackspace);
        _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: true, suffix: /^.?$/ }, handleDelete);
      }
      _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: false }, handleDeleteRange);
      _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: false }, handleDeleteRange);
      _this.addBinding({ key: Keyboard.keys.BACKSPACE, altKey: null, ctrlKey: null, metaKey: null, shiftKey: null }, { collapsed: true, offset: 0 }, handleBackspace);
      _this.listen();
      return _this;
    }

    _createClass(Keyboard, [{
      key: 'addBinding',
      value: function addBinding(key) {
        var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var handler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        var binding = normalize(key);
        if (binding == null || binding.key == null) {
          return debug.warn('Attempted to add invalid keyboard binding', binding);
        }
        if (typeof context === 'function') {
          context = { handler: context };
        }
        if (typeof handler === 'function') {
          handler = { handler: handler };
        }
        binding = (0, _extend2.default)(binding, context, handler);
        this.bindings[binding.key] = this.bindings[binding.key] || [];
        this.bindings[binding.key].push(binding);
      }
    }, {
      key: 'listen',
      value: function listen() {
        var _this2 = this;

        this.quill.root.addEventListener('keydown', function (evt) {
          if (evt.defaultPrevented) return;
          var which = evt.which || evt.keyCode;
          var bindings = (_this2.bindings[which] || []).filter(function (binding) {
            return Keyboard.match(evt, binding);
          });
          if (bindings.length === 0) return;
          var range = _this2.quill.getSelection();
          if (range == null || !_this2.quill.hasFocus()) return;

          var _quill$getLine = _this2.quill.getLine(range.index),
              _quill$getLine2 = _slicedToArray(_quill$getLine, 2),
              line = _quill$getLine2[0],
              offset = _quill$getLine2[1];

          var _quill$getLeaf = _this2.quill.getLeaf(range.index),
              _quill$getLeaf2 = _slicedToArray(_quill$getLeaf, 2),
              leafStart = _quill$getLeaf2[0],
              offsetStart = _quill$getLeaf2[1];

          var _ref = range.length === 0 ? [leafStart, offsetStart] : _this2.quill.getLeaf(range.index + range.length),
              _ref2 = _slicedToArray(_ref, 2),
              leafEnd = _ref2[0],
              offsetEnd = _ref2[1];

          var prefixText = leafStart instanceof _parchment2.default.Text ? leafStart.value().slice(0, offsetStart) : '';
          var suffixText = leafEnd instanceof _parchment2.default.Text ? leafEnd.value().slice(offsetEnd) : '';
          var curContext = {
            collapsed: range.length === 0,
            empty: range.length === 0 && line.length() <= 1,
            format: _this2.quill.getFormat(range),
            offset: offset,
            prefix: prefixText,
            suffix: suffixText
          };
          var prevented = bindings.some(function (binding) {
            if (binding.collapsed != null && binding.collapsed !== curContext.collapsed) return false;
            if (binding.empty != null && binding.empty !== curContext.empty) return false;
            if (binding.offset != null && binding.offset !== curContext.offset) return false;
            if (Array.isArray(binding.format)) {
              // any format is present
              if (binding.format.every(function (name) {
                return curContext.format[name] == null;
              })) {
                return false;
              }
            } else if (_typeof(binding.format) === 'object') {
              // all formats must match
              if (!Object.keys(binding.format).every(function (name) {
                if (binding.format[name] === true) return curContext.format[name] != null;
                if (binding.format[name] === false) return curContext.format[name] == null;
                return (0, _deepEqual2.default)(binding.format[name], curContext.format[name]);
              })) {
                return false;
              }
            }
            if (binding.prefix != null && !binding.prefix.test(curContext.prefix)) return false;
            if (binding.suffix != null && !binding.suffix.test(curContext.suffix)) return false;
            return binding.handler.call(_this2, range, curContext) !== true;
          });
          if (prevented) {
            evt.preventDefault();
          }
        });
      }
    }]);

    return Keyboard;
  }(_module2.default);

  Keyboard.keys = {
    BACKSPACE: 8,
    TAB: 9,
    ENTER: 13,
    ESCAPE: 27,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    DELETE: 46
  };

  Keyboard.DEFAULTS = {
    bindings: {
      'bold': makeFormatHandler('bold'),
      'italic': makeFormatHandler('italic'),
      'underline': makeFormatHandler('underline'),
      'indent': {
        // highlight tab or tab at beginning of list, indent or blockquote
        key: Keyboard.keys.TAB,
        format: ['blockquote', 'indent', 'list'],
        handler: function handler(range, context) {
          if (context.collapsed && context.offset !== 0) return true;
          this.quill.format('indent', '+1', _quill2.default.sources.USER);
        }
      },
      'outdent': {
        key: Keyboard.keys.TAB,
        shiftKey: true,
        format: ['blockquote', 'indent', 'list'],
        // highlight tab or tab at beginning of list, indent or blockquote
        handler: function handler(range, context) {
          if (context.collapsed && context.offset !== 0) return true;
          this.quill.format('indent', '-1', _quill2.default.sources.USER);
        }
      },
      'outdent backspace': {
        key: Keyboard.keys.BACKSPACE,
        collapsed: true,
        shiftKey: null,
        metaKey: null,
        ctrlKey: null,
        altKey: null,
        format: ['indent', 'list'],
        offset: 0,
        handler: function handler(range, context) {
          if (context.format.indent != null) {
            this.quill.format('indent', '-1', _quill2.default.sources.USER);
          } else if (context.format.list != null) {
            this.quill.format('list', false, _quill2.default.sources.USER);
          }
        }
      },
      'indent code-block': makeCodeBlockHandler(true),
      'outdent code-block': makeCodeBlockHandler(false),
      'remove tab': {
        key: Keyboard.keys.TAB,
        shiftKey: true,
        collapsed: true,
        prefix: /\t$/,
        handler: function handler(range) {
          this.quill.deleteText(range.index - 1, 1, _quill2.default.sources.USER);
        }
      },
      'tab': {
        key: Keyboard.keys.TAB,
        handler: function handler(range) {
          this.quill.history.cutoff();
          var delta = new _quillDelta2.default().retain(range.index).delete(range.length).insert('\t');
          this.quill.updateContents(delta, _quill2.default.sources.USER);
          this.quill.history.cutoff();
          this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
        }
      },
      'list empty enter': {
        key: Keyboard.keys.ENTER,
        collapsed: true,
        format: ['list'],
        empty: true,
        handler: function handler(range, context) {
          this.quill.format('list', false, _quill2.default.sources.USER);
          if (context.format.indent) {
            this.quill.format('indent', false, _quill2.default.sources.USER);
          }
        }
      },
      'checklist enter': {
        key: Keyboard.keys.ENTER,
        collapsed: true,
        format: { list: 'checked' },
        handler: function handler(range) {
          var _quill$getLine3 = this.quill.getLine(range.index),
              _quill$getLine4 = _slicedToArray(_quill$getLine3, 2),
              line = _quill$getLine4[0],
              offset = _quill$getLine4[1];

          var formats = (0, _extend2.default)({}, line.formats(), { list: 'checked' });
          var delta = new _quillDelta2.default().retain(range.index).insert('\n', formats).retain(line.length() - offset - 1).retain(1, { list: 'unchecked' });
          this.quill.updateContents(delta, _quill2.default.sources.USER);
          this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
          this.quill.scrollIntoView();
        }
      },
      'header enter': {
        key: Keyboard.keys.ENTER,
        collapsed: true,
        format: ['header'],
        suffix: /^$/,
        handler: function handler(range, context) {
          var _quill$getLine5 = this.quill.getLine(range.index),
              _quill$getLine6 = _slicedToArray(_quill$getLine5, 2),
              line = _quill$getLine6[0],
              offset = _quill$getLine6[1];

          var delta = new _quillDelta2.default().retain(range.index).insert('\n', context.format).retain(line.length() - offset - 1).retain(1, { header: null });
          this.quill.updateContents(delta, _quill2.default.sources.USER);
          this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
          this.quill.scrollIntoView();
        }
      },
      'list autofill': {
        key: ' ',
        collapsed: true,
        format: { list: false },
        prefix: /^\s*?(\d+\.|-|\*|\[ ?\]|\[x\])$/,
        handler: function handler(range, context) {
          var length = context.prefix.length;

          var _quill$getLine7 = this.quill.getLine(range.index),
              _quill$getLine8 = _slicedToArray(_quill$getLine7, 2),
              line = _quill$getLine8[0],
              offset = _quill$getLine8[1];

          if (offset > length) return true;
          var value = void 0;
          switch (context.prefix.trim()) {
            case '[]':case '[ ]':
              value = 'unchecked';
              break;
            case '[x]':
              value = 'checked';
              break;
            case '-':case '*':
              value = 'bullet';
              break;
            default:
              value = 'ordered';
          }
          this.quill.insertText(range.index, ' ', _quill2.default.sources.USER);
          this.quill.history.cutoff();
          var delta = new _quillDelta2.default().retain(range.index - offset).delete(length + 1).retain(line.length() - 2 - offset).retain(1, { list: value });
          this.quill.updateContents(delta, _quill2.default.sources.USER);
          this.quill.history.cutoff();
          this.quill.setSelection(range.index - length, _quill2.default.sources.SILENT);
        }
      },
      'code exit': {
        key: Keyboard.keys.ENTER,
        collapsed: true,
        format: ['code-block'],
        prefix: /\n\n$/,
        suffix: /^\s+$/,
        handler: function handler(range) {
          var _quill$getLine9 = this.quill.getLine(range.index),
              _quill$getLine10 = _slicedToArray(_quill$getLine9, 2),
              line = _quill$getLine10[0],
              offset = _quill$getLine10[1];

          var delta = new _quillDelta2.default().retain(range.index + line.length() - offset - 2).retain(1, { 'code-block': null }).delete(1);
          this.quill.updateContents(delta, _quill2.default.sources.USER);
        }
      },
      'embed left': makeEmbedArrowHandler(Keyboard.keys.LEFT, false),
      'embed left shift': makeEmbedArrowHandler(Keyboard.keys.LEFT, true),
      'embed right': makeEmbedArrowHandler(Keyboard.keys.RIGHT, false),
      'embed right shift': makeEmbedArrowHandler(Keyboard.keys.RIGHT, true)
    }
  };

  function makeEmbedArrowHandler(key, shiftKey) {
    var _ref3;

    var where = key === Keyboard.keys.LEFT ? 'prefix' : 'suffix';
    return _ref3 = {
      key: key,
      shiftKey: shiftKey,
      altKey: null
    }, _defineProperty(_ref3, where, /^$/), _defineProperty(_ref3, 'handler', function handler(range) {
      var index = range.index;
      if (key === Keyboard.keys.RIGHT) {
        index += range.length + 1;
      }

      var _quill$getLeaf3 = this.quill.getLeaf(index),
          _quill$getLeaf4 = _slicedToArray(_quill$getLeaf3, 1),
          leaf = _quill$getLeaf4[0];

      if (!(leaf instanceof _parchment2.default.Embed)) return true;
      if (key === Keyboard.keys.LEFT) {
        if (shiftKey) {
          this.quill.setSelection(range.index - 1, range.length + 1, _quill2.default.sources.USER);
        } else {
          this.quill.setSelection(range.index - 1, _quill2.default.sources.USER);
        }
      } else {
        if (shiftKey) {
          this.quill.setSelection(range.index, range.length + 1, _quill2.default.sources.USER);
        } else {
          this.quill.setSelection(range.index + range.length + 1, _quill2.default.sources.USER);
        }
      }
      return false;
    }), _ref3;
  }

  function handleBackspace(range, context) {
    if (range.index === 0 || this.quill.getLength() <= 1) return;

    var _quill$getLine11 = this.quill.getLine(range.index),
        _quill$getLine12 = _slicedToArray(_quill$getLine11, 1),
        line = _quill$getLine12[0];

    var formats = {};
    if (context.offset === 0) {
      var _quill$getLine13 = this.quill.getLine(range.index - 1),
          _quill$getLine14 = _slicedToArray(_quill$getLine13, 1),
          prev = _quill$getLine14[0];

      if (prev != null && prev.length() > 1) {
        var curFormats = line.formats();
        var prevFormats = this.quill.getFormat(range.index - 1, 1);
        formats = _op2.default.attributes.diff(curFormats, prevFormats) || {};
      }
    }
    // Check for astral symbols
    var length = /[\uD800-\uDBFF][\uDC00-\uDFFF]$/.test(context.prefix) ? 2 : 1;
    this.quill.deleteText(range.index - length, length, _quill2.default.sources.USER);
    if (Object.keys(formats).length > 0) {
      this.quill.formatLine(range.index - length, length, formats, _quill2.default.sources.USER);
    }
    this.quill.focus();
  }

  function handleDelete(range, context) {
    // Check for astral symbols
    var length = /^[\uD800-\uDBFF][\uDC00-\uDFFF]/.test(context.suffix) ? 2 : 1;
    if (range.index >= this.quill.getLength() - length) return;
    var formats = {},
        nextLength = 0;

    var _quill$getLine15 = this.quill.getLine(range.index),
        _quill$getLine16 = _slicedToArray(_quill$getLine15, 1),
        line = _quill$getLine16[0];

    if (context.offset >= line.length() - 1) {
      var _quill$getLine17 = this.quill.getLine(range.index + 1),
          _quill$getLine18 = _slicedToArray(_quill$getLine17, 1),
          next = _quill$getLine18[0];

      if (next) {
        var curFormats = line.formats();
        var nextFormats = this.quill.getFormat(range.index, 1);
        formats = _op2.default.attributes.diff(curFormats, nextFormats) || {};
        nextLength = next.length();
      }
    }
    this.quill.deleteText(range.index, length, _quill2.default.sources.USER);
    if (Object.keys(formats).length > 0) {
      this.quill.formatLine(range.index + nextLength - 1, length, formats, _quill2.default.sources.USER);
    }
  }

  function handleDeleteRange(range) {
    var lines = this.quill.getLines(range);
    var formats = {};
    if (lines.length > 1) {
      var firstFormats = lines[0].formats();
      var lastFormats = lines[lines.length - 1].formats();
      formats = _op2.default.attributes.diff(lastFormats, firstFormats) || {};
    }
    this.quill.deleteText(range, _quill2.default.sources.USER);
    if (Object.keys(formats).length > 0) {
      this.quill.formatLine(range.index, 1, formats, _quill2.default.sources.USER);
    }
    this.quill.setSelection(range.index, _quill2.default.sources.SILENT);
    this.quill.focus();
  }

  function handleEnter(range, context) {
    var _this3 = this;

    if (range.length > 0) {
      this.quill.scroll.deleteAt(range.index, range.length); // So we do not trigger text-change
    }
    var lineFormats = Object.keys(context.format).reduce(function (lineFormats, format) {
      if (_parchment2.default.query(format, _parchment2.default.Scope.BLOCK) && !Array.isArray(context.format[format])) {
        lineFormats[format] = context.format[format];
      }
      return lineFormats;
    }, {});
    this.quill.insertText(range.index, '\n', lineFormats, _quill2.default.sources.USER);
    // Earlier scroll.deleteAt might have messed up our selection,
    // so insertText's built in selection preservation is not reliable
    this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
    this.quill.focus();
    Object.keys(context.format).forEach(function (name) {
      if (lineFormats[name] != null) return;
      if (Array.isArray(context.format[name])) return;
      if (name === 'link') return;
      _this3.quill.format(name, context.format[name], _quill2.default.sources.USER);
    });
  }

  function makeCodeBlockHandler(indent) {
    return {
      key: Keyboard.keys.TAB,
      shiftKey: !indent,
      format: { 'code-block': true },
      handler: function handler(range) {
        var CodeBlock = _parchment2.default.query('code-block');
        var index = range.index,
            length = range.length;

        var _quill$scroll$descend = this.quill.scroll.descendant(CodeBlock, index),
            _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2),
            block = _quill$scroll$descend2[0],
            offset = _quill$scroll$descend2[1];

        if (block == null) return;
        var scrollIndex = this.quill.getIndex(block);
        var start = block.newlineIndex(offset, true) + 1;
        var end = block.newlineIndex(scrollIndex + offset + length);
        var lines = block.domNode.textContent.slice(start, end).split('\n');
        offset = 0;
        lines.forEach(function (line, i) {
          if (indent) {
            block.insertAt(start + offset, CodeBlock.TAB);
            offset += CodeBlock.TAB.length;
            if (i === 0) {
              index += CodeBlock.TAB.length;
            } else {
              length += CodeBlock.TAB.length;
            }
          } else if (line.startsWith(CodeBlock.TAB)) {
            block.deleteAt(start + offset, CodeBlock.TAB.length);
            offset -= CodeBlock.TAB.length;
            if (i === 0) {
              index -= CodeBlock.TAB.length;
            } else {
              length -= CodeBlock.TAB.length;
            }
          }
          offset += line.length + 1;
        });
        this.quill.update(_quill2.default.sources.USER);
        this.quill.setSelection(index, length, _quill2.default.sources.SILENT);
      }
    };
  }

  function makeFormatHandler(format) {
    return {
      key: format[0].toUpperCase(),
      shortKey: true,
      handler: function handler(range, context) {
        this.quill.format(format, !context.format[format], _quill2.default.sources.USER);
      }
    };
  }

  function normalize(binding) {
    if (typeof binding === 'string' || typeof binding === 'number') {
      return normalize({ key: binding });
    }
    if ((typeof binding === 'undefined' ? 'undefined' : _typeof(binding)) === 'object') {
      binding = (0, _clone2.default)(binding, false);
    }
    if (typeof binding.key === 'string') {
      if (Keyboard.keys[binding.key.toUpperCase()] != null) {
        binding.key = Keyboard.keys[binding.key.toUpperCase()];
      } else if (binding.key.length === 1) {
        binding.key = binding.key.toUpperCase().charCodeAt(0);
      } else {
        return null;
      }
    }
    if (binding.shortKey) {
      binding[SHORTKEY] = binding.shortKey;
      delete binding.shortKey;
    }
    return binding;
  }

  exports.default = Keyboard;
  exports.SHORTKEY = SHORTKEY;

  /***/ }),
  /* 24 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _text = __webpack_require__(7);

  var _text2 = _interopRequireDefault(_text);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Cursor = function (_Parchment$Embed) {
    _inherits(Cursor, _Parchment$Embed);

    _createClass(Cursor, null, [{
      key: 'value',
      value: function value() {
        return undefined;
      }
    }]);

    function Cursor(domNode, selection) {
      _classCallCheck(this, Cursor);

      var _this = _possibleConstructorReturn(this, (Cursor.__proto__ || Object.getPrototypeOf(Cursor)).call(this, domNode));

      _this.selection = selection;
      _this.textNode = document.createTextNode(Cursor.CONTENTS);
      _this.domNode.appendChild(_this.textNode);
      _this._length = 0;
      return _this;
    }

    _createClass(Cursor, [{
      key: 'detach',
      value: function detach() {
        // super.detach() will also clear domNode.__blot
        if (this.parent != null) this.parent.removeChild(this);
      }
    }, {
      key: 'format',
      value: function format(name, value) {
        if (this._length !== 0) {
          return _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'format', this).call(this, name, value);
        }
        var target = this,
            index = 0;
        while (target != null && target.statics.scope !== _parchment2.default.Scope.BLOCK_BLOT) {
          index += target.offset(target.parent);
          target = target.parent;
        }
        if (target != null) {
          this._length = Cursor.CONTENTS.length;
          target.optimize();
          target.formatAt(index, Cursor.CONTENTS.length, name, value);
          this._length = 0;
        }
      }
    }, {
      key: 'index',
      value: function index(node, offset) {
        if (node === this.textNode) return 0;
        return _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'index', this).call(this, node, offset);
      }
    }, {
      key: 'length',
      value: function length() {
        return this._length;
      }
    }, {
      key: 'position',
      value: function position() {
        return [this.textNode, this.textNode.data.length];
      }
    }, {
      key: 'remove',
      value: function remove() {
        _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'remove', this).call(this);
        this.parent = null;
      }
    }, {
      key: 'restore',
      value: function restore() {
        if (this.selection.composing || this.parent == null) return;
        var textNode = this.textNode;
        var range = this.selection.getNativeRange();
        var restoreText = void 0,
            start = void 0,
            end = void 0;
        if (range != null && range.start.node === textNode && range.end.node === textNode) {
          var _ref = [textNode, range.start.offset, range.end.offset];
          restoreText = _ref[0];
          start = _ref[1];
          end = _ref[2];
        }
        // Link format will insert text outside of anchor tag
        while (this.domNode.lastChild != null && this.domNode.lastChild !== this.textNode) {
          this.domNode.parentNode.insertBefore(this.domNode.lastChild, this.domNode);
        }
        if (this.textNode.data !== Cursor.CONTENTS) {
          var text = this.textNode.data.split(Cursor.CONTENTS).join('');
          if (this.next instanceof _text2.default) {
            restoreText = this.next.domNode;
            this.next.insertAt(0, text);
            this.textNode.data = Cursor.CONTENTS;
          } else {
            this.textNode.data = text;
            this.parent.insertBefore(_parchment2.default.create(this.textNode), this);
            this.textNode = document.createTextNode(Cursor.CONTENTS);
            this.domNode.appendChild(this.textNode);
          }
        }
        this.remove();
        if (start != null) {
          var _map = [start, end].map(function (offset) {
            return Math.max(0, Math.min(restoreText.data.length, offset - 1));
          });

          var _map2 = _slicedToArray(_map, 2);

          start = _map2[0];
          end = _map2[1];

          return {
            startNode: restoreText,
            startOffset: start,
            endNode: restoreText,
            endOffset: end
          };
        }
      }
    }, {
      key: 'update',
      value: function update(mutations, context) {
        var _this2 = this;

        if (mutations.some(function (mutation) {
          return mutation.type === 'characterData' && mutation.target === _this2.textNode;
        })) {
          var range = this.restore();
          if (range) context.range = range;
        }
      }
    }, {
      key: 'value',
      value: function value() {
        return '';
      }
    }]);

    return Cursor;
  }(_parchment2.default.Embed);

  Cursor.blotName = 'cursor';
  Cursor.className = 'ql-cursor';
  Cursor.tagName = 'span';
  Cursor.CONTENTS = '\uFEFF'; // Zero width no break space


  exports.default = Cursor;

  /***/ }),
  /* 25 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _block = __webpack_require__(4);

  var _block2 = _interopRequireDefault(_block);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Container = function (_Parchment$Container) {
    _inherits(Container, _Parchment$Container);

    function Container() {
      _classCallCheck(this, Container);

      return _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).apply(this, arguments));
    }

    return Container;
  }(_parchment2.default.Container);

  Container.allowedChildren = [_block2.default, _block.BlockEmbed, Container];

  exports.default = Container;

  /***/ }),
  /* 26 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ColorStyle = exports.ColorClass = exports.ColorAttributor = undefined;

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var ColorAttributor = function (_Parchment$Attributor) {
    _inherits(ColorAttributor, _Parchment$Attributor);

    function ColorAttributor() {
      _classCallCheck(this, ColorAttributor);

      return _possibleConstructorReturn(this, (ColorAttributor.__proto__ || Object.getPrototypeOf(ColorAttributor)).apply(this, arguments));
    }

    _createClass(ColorAttributor, [{
      key: 'value',
      value: function value(domNode) {
        var value = _get(ColorAttributor.prototype.__proto__ || Object.getPrototypeOf(ColorAttributor.prototype), 'value', this).call(this, domNode);
        if (!value.startsWith('rgb(')) return value;
        value = value.replace(/^[^\d]+/, '').replace(/[^\d]+$/, '');
        return '#' + value.split(',').map(function (component) {
          return ('00' + parseInt(component).toString(16)).slice(-2);
        }).join('');
      }
    }]);

    return ColorAttributor;
  }(_parchment2.default.Attributor.Style);

  var ColorClass = new _parchment2.default.Attributor.Class('color', 'ql-color', {
    scope: _parchment2.default.Scope.INLINE
  });
  var ColorStyle = new ColorAttributor('color', 'color', {
    scope: _parchment2.default.Scope.INLINE
  });

  exports.ColorAttributor = ColorAttributor;
  exports.ColorClass = ColorClass;
  exports.ColorStyle = ColorStyle;

  /***/ }),
  /* 27 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.sanitize = exports.default = undefined;

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _inline = __webpack_require__(6);

  var _inline2 = _interopRequireDefault(_inline);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Link = function (_Inline) {
    _inherits(Link, _Inline);

    function Link() {
      _classCallCheck(this, Link);

      return _possibleConstructorReturn(this, (Link.__proto__ || Object.getPrototypeOf(Link)).apply(this, arguments));
    }

    _createClass(Link, [{
      key: 'format',
      value: function format(name, value) {
        if (name !== this.statics.blotName || !value) return _get(Link.prototype.__proto__ || Object.getPrototypeOf(Link.prototype), 'format', this).call(this, name, value);
        value = this.constructor.sanitize(value);
        this.domNode.setAttribute('href', value);
      }
    }], [{
      key: 'create',
      value: function create(value) {
        var node = _get(Link.__proto__ || Object.getPrototypeOf(Link), 'create', this).call(this, value);
        value = this.sanitize(value);
        node.setAttribute('href', value);
        node.setAttribute('target', '_blank');
        return node;
      }
    }, {
      key: 'formats',
      value: function formats(domNode) {
        return domNode.getAttribute('href');
      }
    }, {
      key: 'sanitize',
      value: function sanitize(url) {
        return _sanitize(url, this.PROTOCOL_WHITELIST) ? url : this.SANITIZED_URL;
      }
    }]);

    return Link;
  }(_inline2.default);

  Link.blotName = 'link';
  Link.tagName = 'A';
  Link.SANITIZED_URL = 'about:blank';
  Link.PROTOCOL_WHITELIST = ['http', 'https', 'mailto', 'tel'];

  function _sanitize(url, protocols) {
    var anchor = document.createElement('a');
    anchor.href = url;
    var protocol = anchor.href.slice(0, anchor.href.indexOf(':'));
    return protocols.indexOf(protocol) > -1;
  }

  exports.default = Link;
  exports.sanitize = _sanitize;

  /***/ }),
  /* 28 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _keyboard = __webpack_require__(23);

  var _keyboard2 = _interopRequireDefault(_keyboard);

  var _dropdown = __webpack_require__(107);

  var _dropdown2 = _interopRequireDefault(_dropdown);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var optionsCounter = 0;

  function toggleAriaAttribute(element, attribute) {
    element.setAttribute(attribute, !(element.getAttribute(attribute) === 'true'));
  }

  var Picker = function () {
    function Picker(select) {
      var _this = this;

      _classCallCheck(this, Picker);

      this.select = select;
      this.container = document.createElement('span');
      this.buildPicker();
      this.select.style.display = 'none';
      this.select.parentNode.insertBefore(this.container, this.select);

      this.label.addEventListener('mousedown', function () {
        _this.togglePicker();
      });
      this.label.addEventListener('keydown', function (event) {
        switch (event.keyCode) {
          // Allows the "Enter" key to open the picker
          case _keyboard2.default.keys.ENTER:
            _this.togglePicker();
            break;

          // Allows the "Escape" key to close the picker
          case _keyboard2.default.keys.ESCAPE:
            _this.escape();
            event.preventDefault();
            break;
          default:
        }
      });
      this.select.addEventListener('change', this.update.bind(this));
    }

    _createClass(Picker, [{
      key: 'togglePicker',
      value: function togglePicker() {
        this.container.classList.toggle('ql-expanded');
        // Toggle aria-expanded and aria-hidden to make the picker accessible
        toggleAriaAttribute(this.label, 'aria-expanded');
        toggleAriaAttribute(this.options, 'aria-hidden');
      }
    }, {
      key: 'buildItem',
      value: function buildItem(option) {
        var _this2 = this;

        var item = document.createElement('span');
        item.tabIndex = '0';
        item.setAttribute('role', 'button');

        item.classList.add('ql-picker-item');
        if (option.hasAttribute('value')) {
          item.setAttribute('data-value', option.getAttribute('value'));
        }
        if (option.textContent) {
          item.setAttribute('data-label', option.textContent);
        }
        item.addEventListener('click', function () {
          _this2.selectItem(item, true);
        });
        item.addEventListener('keydown', function (event) {
          switch (event.keyCode) {
            // Allows the "Enter" key to select an item
            case _keyboard2.default.keys.ENTER:
              _this2.selectItem(item, true);
              event.preventDefault();
              break;

            // Allows the "Escape" key to close the picker
            case _keyboard2.default.keys.ESCAPE:
              _this2.escape();
              event.preventDefault();
              break;
            default:
          }
        });

        return item;
      }
    }, {
      key: 'buildLabel',
      value: function buildLabel() {
        var label = document.createElement('span');
        label.classList.add('ql-picker-label');
        label.innerHTML = _dropdown2.default;
        label.tabIndex = '0';
        label.setAttribute('role', 'button');
        label.setAttribute('aria-expanded', 'false');
        this.container.appendChild(label);
        return label;
      }
    }, {
      key: 'buildOptions',
      value: function buildOptions() {
        var _this3 = this;

        var options = document.createElement('span');
        options.classList.add('ql-picker-options');

        // Don't want screen readers to read this until options are visible
        options.setAttribute('aria-hidden', 'true');
        options.tabIndex = '-1';

        // Need a unique id for aria-controls
        options.id = 'ql-picker-options-' + optionsCounter;
        optionsCounter += 1;
        this.label.setAttribute('aria-controls', options.id);

        this.options = options;

        [].slice.call(this.select.options).forEach(function (option) {
          var item = _this3.buildItem(option);
          options.appendChild(item);
          if (option.selected === true) {
            _this3.selectItem(item);
          }
        });
        this.container.appendChild(options);
      }
    }, {
      key: 'buildPicker',
      value: function buildPicker() {
        var _this4 = this;

        [].slice.call(this.select.attributes).forEach(function (item) {
          _this4.container.setAttribute(item.name, item.value);
        });
        this.container.classList.add('ql-picker');
        this.label = this.buildLabel();
        this.buildOptions();
      }
    }, {
      key: 'escape',
      value: function escape() {
        var _this5 = this;

        // Close menu and return focus to trigger label
        this.close();
        // Need setTimeout for accessibility to ensure that the browser executes
        // focus on the next process thread and after any DOM content changes
        setTimeout(function () {
          return _this5.label.focus();
        }, 1);
      }
    }, {
      key: 'close',
      value: function close() {
        this.container.classList.remove('ql-expanded');
        this.label.setAttribute('aria-expanded', 'false');
        this.options.setAttribute('aria-hidden', 'true');
      }
    }, {
      key: 'selectItem',
      value: function selectItem(item) {
        var trigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        var selected = this.container.querySelector('.ql-selected');
        if (item === selected) return;
        if (selected != null) {
          selected.classList.remove('ql-selected');
        }
        if (item == null) return;
        item.classList.add('ql-selected');
        this.select.selectedIndex = [].indexOf.call(item.parentNode.children, item);
        if (item.hasAttribute('data-value')) {
          this.label.setAttribute('data-value', item.getAttribute('data-value'));
        } else {
          this.label.removeAttribute('data-value');
        }
        if (item.hasAttribute('data-label')) {
          this.label.setAttribute('data-label', item.getAttribute('data-label'));
        } else {
          this.label.removeAttribute('data-label');
        }
        if (trigger) {
          if (typeof Event === 'function') {
            this.select.dispatchEvent(new Event('change'));
          } else if ((typeof Event === 'undefined' ? 'undefined' : _typeof(Event)) === 'object') {
            // IE11
            var event = document.createEvent('Event');
            event.initEvent('change', true, true);
            this.select.dispatchEvent(event);
          }
          this.close();
        }
      }
    }, {
      key: 'update',
      value: function update() {
        var option = void 0;
        if (this.select.selectedIndex > -1) {
          var item = this.container.querySelector('.ql-picker-options').children[this.select.selectedIndex];
          option = this.select.options[this.select.selectedIndex];
          this.selectItem(item);
        } else {
          this.selectItem(null);
        }
        var isActive = option != null && option !== this.select.querySelector('option[selected]');
        this.label.classList.toggle('ql-active', isActive);
      }
    }]);

    return Picker;
  }();

  exports.default = Picker;

  /***/ }),
  /* 29 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _quill = __webpack_require__(5);

  var _quill2 = _interopRequireDefault(_quill);

  var _block = __webpack_require__(4);

  var _block2 = _interopRequireDefault(_block);

  var _break = __webpack_require__(16);

  var _break2 = _interopRequireDefault(_break);

  var _container = __webpack_require__(25);

  var _container2 = _interopRequireDefault(_container);

  var _cursor = __webpack_require__(24);

  var _cursor2 = _interopRequireDefault(_cursor);

  var _embed = __webpack_require__(35);

  var _embed2 = _interopRequireDefault(_embed);

  var _inline = __webpack_require__(6);

  var _inline2 = _interopRequireDefault(_inline);

  var _scroll = __webpack_require__(22);

  var _scroll2 = _interopRequireDefault(_scroll);

  var _text = __webpack_require__(7);

  var _text2 = _interopRequireDefault(_text);

  var _clipboard = __webpack_require__(55);

  var _clipboard2 = _interopRequireDefault(_clipboard);

  var _history = __webpack_require__(42);

  var _history2 = _interopRequireDefault(_history);

  var _keyboard = __webpack_require__(23);

  var _keyboard2 = _interopRequireDefault(_keyboard);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  _quill2.default.register({
    'blots/block': _block2.default,
    'blots/block/embed': _block.BlockEmbed,
    'blots/break': _break2.default,
    'blots/container': _container2.default,
    'blots/cursor': _cursor2.default,
    'blots/embed': _embed2.default,
    'blots/inline': _inline2.default,
    'blots/scroll': _scroll2.default,
    'blots/text': _text2.default,

    'modules/clipboard': _clipboard2.default,
    'modules/history': _history2.default,
    'modules/keyboard': _keyboard2.default
  });

  _parchment2.default.register(_block2.default, _break2.default, _cursor2.default, _inline2.default, _scroll2.default, _text2.default);

  exports.default = _quill2.default;

  /***/ }),
  /* 30 */
  /***/ (function(module, exports, __webpack_require__) {

  Object.defineProperty(exports, "__esModule", { value: true });
  var Registry = __webpack_require__(1);
  var ShadowBlot = /** @class */ (function () {
      function ShadowBlot(domNode) {
          this.domNode = domNode;
          // @ts-ignore
          this.domNode[Registry.DATA_KEY] = { blot: this };
      }
      Object.defineProperty(ShadowBlot.prototype, "statics", {
          // Hack for accessing inherited static methods
          get: function () {
              return this.constructor;
          },
          enumerable: true,
          configurable: true
      });
      ShadowBlot.create = function (value) {
          if (this.tagName == null) {
              throw new Registry.ParchmentError('Blot definition missing tagName');
          }
          var node;
          if (Array.isArray(this.tagName)) {
              if (typeof value === 'string') {
                  value = value.toUpperCase();
                  if (parseInt(value).toString() === value) {
                      value = parseInt(value);
                  }
              }
              if (typeof value === 'number') {
                  node = document.createElement(this.tagName[value - 1]);
              }
              else if (this.tagName.indexOf(value) > -1) {
                  node = document.createElement(value);
              }
              else {
                  node = document.createElement(this.tagName[0]);
              }
          }
          else {
              node = document.createElement(this.tagName);
          }
          if (this.className) {
              node.classList.add(this.className);
          }
          return node;
      };
      ShadowBlot.prototype.attach = function () {
          if (this.parent != null) {
              this.scroll = this.parent.scroll;
          }
      };
      ShadowBlot.prototype.clone = function () {
          var domNode = this.domNode.cloneNode(false);
          return Registry.create(domNode);
      };
      ShadowBlot.prototype.detach = function () {
          if (this.parent != null)
              this.parent.removeChild(this);
          // @ts-ignore
          delete this.domNode[Registry.DATA_KEY];
      };
      ShadowBlot.prototype.deleteAt = function (index, length) {
          var blot = this.isolate(index, length);
          blot.remove();
      };
      ShadowBlot.prototype.formatAt = function (index, length, name, value) {
          var blot = this.isolate(index, length);
          if (Registry.query(name, Registry.Scope.BLOT) != null && value) {
              blot.wrap(name, value);
          }
          else if (Registry.query(name, Registry.Scope.ATTRIBUTE) != null) {
              var parent = Registry.create(this.statics.scope);
              blot.wrap(parent);
              parent.format(name, value);
          }
      };
      ShadowBlot.prototype.insertAt = function (index, value, def) {
          var blot = def == null ? Registry.create('text', value) : Registry.create(value, def);
          var ref = this.split(index);
          this.parent.insertBefore(blot, ref);
      };
      ShadowBlot.prototype.insertInto = function (parentBlot, refBlot) {
          if (refBlot === void 0) { refBlot = null; }
          if (this.parent != null) {
              this.parent.children.remove(this);
          }
          var refDomNode = null;
          parentBlot.children.insertBefore(this, refBlot);
          if (refBlot != null) {
              refDomNode = refBlot.domNode;
          }
          if (this.domNode.parentNode != parentBlot.domNode ||
              this.domNode.nextSibling != refDomNode) {
              parentBlot.domNode.insertBefore(this.domNode, refDomNode);
          }
          this.parent = parentBlot;
          this.attach();
      };
      ShadowBlot.prototype.isolate = function (index, length) {
          var target = this.split(index);
          target.split(length);
          return target;
      };
      ShadowBlot.prototype.length = function () {
          return 1;
      };
      ShadowBlot.prototype.offset = function (root) {
          if (root === void 0) { root = this.parent; }
          if (this.parent == null || this == root)
              return 0;
          return this.parent.children.offset(this) + this.parent.offset(root);
      };
      ShadowBlot.prototype.optimize = function (context) {
          // TODO clean up once we use WeakMap
          // @ts-ignore
          if (this.domNode[Registry.DATA_KEY] != null) {
              // @ts-ignore
              delete this.domNode[Registry.DATA_KEY].mutations;
          }
      };
      ShadowBlot.prototype.remove = function () {
          if (this.domNode.parentNode != null) {
              this.domNode.parentNode.removeChild(this.domNode);
          }
          this.detach();
      };
      ShadowBlot.prototype.replace = function (target) {
          if (target.parent == null)
              return;
          target.parent.insertBefore(this, target.next);
          target.remove();
      };
      ShadowBlot.prototype.replaceWith = function (name, value) {
          var replacement = typeof name === 'string' ? Registry.create(name, value) : name;
          replacement.replace(this);
          return replacement;
      };
      ShadowBlot.prototype.split = function (index, force) {
          return index === 0 ? this : this.next;
      };
      ShadowBlot.prototype.update = function (mutations, context) {
          // Nothing to do by default
      };
      ShadowBlot.prototype.wrap = function (name, value) {
          var wrapper = typeof name === 'string' ? Registry.create(name, value) : name;
          if (this.parent != null) {
              this.parent.insertBefore(wrapper, this.next);
          }
          wrapper.appendChild(this);
          return wrapper;
      };
      ShadowBlot.blotName = 'abstract';
      return ShadowBlot;
  }());
  exports.default = ShadowBlot;


  /***/ }),
  /* 31 */
  /***/ (function(module, exports, __webpack_require__) {

  Object.defineProperty(exports, "__esModule", { value: true });
  var attributor_1 = __webpack_require__(12);
  var class_1 = __webpack_require__(32);
  var style_1 = __webpack_require__(33);
  var Registry = __webpack_require__(1);
  var AttributorStore = /** @class */ (function () {
      function AttributorStore(domNode) {
          this.attributes = {};
          this.domNode = domNode;
          this.build();
      }
      AttributorStore.prototype.attribute = function (attribute, value) {
          // verb
          if (value) {
              if (attribute.add(this.domNode, value)) {
                  if (attribute.value(this.domNode) != null) {
                      this.attributes[attribute.attrName] = attribute;
                  }
                  else {
                      delete this.attributes[attribute.attrName];
                  }
              }
          }
          else {
              attribute.remove(this.domNode);
              delete this.attributes[attribute.attrName];
          }
      };
      AttributorStore.prototype.build = function () {
          var _this = this;
          this.attributes = {};
          var attributes = attributor_1.default.keys(this.domNode);
          var classes = class_1.default.keys(this.domNode);
          var styles = style_1.default.keys(this.domNode);
          attributes
              .concat(classes)
              .concat(styles)
              .forEach(function (name) {
              var attr = Registry.query(name, Registry.Scope.ATTRIBUTE);
              if (attr instanceof attributor_1.default) {
                  _this.attributes[attr.attrName] = attr;
              }
          });
      };
      AttributorStore.prototype.copy = function (target) {
          var _this = this;
          Object.keys(this.attributes).forEach(function (key) {
              var value = _this.attributes[key].value(_this.domNode);
              target.format(key, value);
          });
      };
      AttributorStore.prototype.move = function (target) {
          var _this = this;
          this.copy(target);
          Object.keys(this.attributes).forEach(function (key) {
              _this.attributes[key].remove(_this.domNode);
          });
          this.attributes = {};
      };
      AttributorStore.prototype.values = function () {
          var _this = this;
          return Object.keys(this.attributes).reduce(function (attributes, name) {
              attributes[name] = _this.attributes[name].value(_this.domNode);
              return attributes;
          }, {});
      };
      return AttributorStore;
  }());
  exports.default = AttributorStore;


  /***/ }),
  /* 32 */
  /***/ (function(module, exports, __webpack_require__) {

  var __extends = (this && this.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var attributor_1 = __webpack_require__(12);
  function match(node, prefix) {
      var className = node.getAttribute('class') || '';
      return className.split(/\s+/).filter(function (name) {
          return name.indexOf(prefix + "-") === 0;
      });
  }
  var ClassAttributor = /** @class */ (function (_super) {
      __extends(ClassAttributor, _super);
      function ClassAttributor() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      ClassAttributor.keys = function (node) {
          return (node.getAttribute('class') || '').split(/\s+/).map(function (name) {
              return name
                  .split('-')
                  .slice(0, -1)
                  .join('-');
          });
      };
      ClassAttributor.prototype.add = function (node, value) {
          if (!this.canAdd(node, value))
              return false;
          this.remove(node);
          node.classList.add(this.keyName + "-" + value);
          return true;
      };
      ClassAttributor.prototype.remove = function (node) {
          var matches = match(node, this.keyName);
          matches.forEach(function (name) {
              node.classList.remove(name);
          });
          if (node.classList.length === 0) {
              node.removeAttribute('class');
          }
      };
      ClassAttributor.prototype.value = function (node) {
          var result = match(node, this.keyName)[0] || '';
          var value = result.slice(this.keyName.length + 1); // +1 for hyphen
          return this.canAdd(node, value) ? value : '';
      };
      return ClassAttributor;
  }(attributor_1.default));
  exports.default = ClassAttributor;


  /***/ }),
  /* 33 */
  /***/ (function(module, exports, __webpack_require__) {

  var __extends = (this && this.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var attributor_1 = __webpack_require__(12);
  function camelize(name) {
      var parts = name.split('-');
      var rest = parts
          .slice(1)
          .map(function (part) {
          return part[0].toUpperCase() + part.slice(1);
      })
          .join('');
      return parts[0] + rest;
  }
  var StyleAttributor = /** @class */ (function (_super) {
      __extends(StyleAttributor, _super);
      function StyleAttributor() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      StyleAttributor.keys = function (node) {
          return (node.getAttribute('style') || '').split(';').map(function (value) {
              var arr = value.split(':');
              return arr[0].trim();
          });
      };
      StyleAttributor.prototype.add = function (node, value) {
          if (!this.canAdd(node, value))
              return false;
          // @ts-ignore
          node.style[camelize(this.keyName)] = value;
          return true;
      };
      StyleAttributor.prototype.remove = function (node) {
          // @ts-ignore
          node.style[camelize(this.keyName)] = '';
          if (!node.getAttribute('style')) {
              node.removeAttribute('style');
          }
      };
      StyleAttributor.prototype.value = function (node) {
          // @ts-ignore
          var value = node.style[camelize(this.keyName)];
          return this.canAdd(node, value) ? value : '';
      };
      return StyleAttributor;
  }(attributor_1.default));
  exports.default = StyleAttributor;


  /***/ }),
  /* 34 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var Theme = function () {
    function Theme(quill, options) {
      _classCallCheck(this, Theme);

      this.quill = quill;
      this.options = options;
      this.modules = {};
    }

    _createClass(Theme, [{
      key: 'init',
      value: function init() {
        var _this = this;

        Object.keys(this.options.modules).forEach(function (name) {
          if (_this.modules[name] == null) {
            _this.addModule(name);
          }
        });
      }
    }, {
      key: 'addModule',
      value: function addModule(name) {
        var moduleClass = this.quill.constructor.import('modules/' + name);
        this.modules[name] = new moduleClass(this.quill, this.options.modules[name] || {});
        return this.modules[name];
      }
    }]);

    return Theme;
  }();

  Theme.DEFAULTS = {
    modules: {}
  };
  Theme.themes = {
    'default': Theme
  };

  exports.default = Theme;

  /***/ }),
  /* 35 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _text = __webpack_require__(7);

  var _text2 = _interopRequireDefault(_text);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var GUARD_TEXT = '\uFEFF';

  var Embed = function (_Parchment$Embed) {
    _inherits(Embed, _Parchment$Embed);

    function Embed(node) {
      _classCallCheck(this, Embed);

      var _this = _possibleConstructorReturn(this, (Embed.__proto__ || Object.getPrototypeOf(Embed)).call(this, node));

      _this.contentNode = document.createElement('span');
      _this.contentNode.setAttribute('contenteditable', false);
      [].slice.call(_this.domNode.childNodes).forEach(function (childNode) {
        _this.contentNode.appendChild(childNode);
      });
      _this.leftGuard = document.createTextNode(GUARD_TEXT);
      _this.rightGuard = document.createTextNode(GUARD_TEXT);
      _this.domNode.appendChild(_this.leftGuard);
      _this.domNode.appendChild(_this.contentNode);
      _this.domNode.appendChild(_this.rightGuard);
      return _this;
    }

    _createClass(Embed, [{
      key: 'index',
      value: function index(node, offset) {
        if (node === this.leftGuard) return 0;
        if (node === this.rightGuard) return 1;
        return _get(Embed.prototype.__proto__ || Object.getPrototypeOf(Embed.prototype), 'index', this).call(this, node, offset);
      }
    }, {
      key: 'restore',
      value: function restore(node) {
        var range = void 0,
            textNode = void 0;
        var text = node.data.split(GUARD_TEXT).join('');
        if (node === this.leftGuard) {
          if (this.prev instanceof _text2.default) {
            var prevLength = this.prev.length();
            this.prev.insertAt(prevLength, text);
            range = {
              startNode: this.prev.domNode,
              startOffset: prevLength + text.length
            };
          } else {
            textNode = document.createTextNode(text);
            this.parent.insertBefore(_parchment2.default.create(textNode), this);
            range = {
              startNode: textNode,
              startOffset: text.length
            };
          }
        } else if (node === this.rightGuard) {
          if (this.next instanceof _text2.default) {
            this.next.insertAt(0, text);
            range = {
              startNode: this.next.domNode,
              startOffset: text.length
            };
          } else {
            textNode = document.createTextNode(text);
            this.parent.insertBefore(_parchment2.default.create(textNode), this.next);
            range = {
              startNode: textNode,
              startOffset: text.length
            };
          }
        }
        node.data = GUARD_TEXT;
        return range;
      }
    }, {
      key: 'update',
      value: function update(mutations, context) {
        var _this2 = this;

        mutations.forEach(function (mutation) {
          if (mutation.type === 'characterData' && (mutation.target === _this2.leftGuard || mutation.target === _this2.rightGuard)) {
            var range = _this2.restore(mutation.target);
            if (range) context.range = range;
          }
        });
      }
    }]);

    return Embed;
  }(_parchment2.default.Embed);

  exports.default = Embed;

  /***/ }),
  /* 36 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AlignStyle = exports.AlignClass = exports.AlignAttribute = undefined;

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var config = {
    scope: _parchment2.default.Scope.BLOCK,
    whitelist: ['right', 'center', 'justify']
  };

  var AlignAttribute = new _parchment2.default.Attributor.Attribute('align', 'align', config);
  var AlignClass = new _parchment2.default.Attributor.Class('align', 'ql-align', config);
  var AlignStyle = new _parchment2.default.Attributor.Style('align', 'text-align', config);

  exports.AlignAttribute = AlignAttribute;
  exports.AlignClass = AlignClass;
  exports.AlignStyle = AlignStyle;

  /***/ }),
  /* 37 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BackgroundStyle = exports.BackgroundClass = undefined;

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _color = __webpack_require__(26);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var BackgroundClass = new _parchment2.default.Attributor.Class('background', 'ql-bg', {
    scope: _parchment2.default.Scope.INLINE
  });
  var BackgroundStyle = new _color.ColorAttributor('background', 'background-color', {
    scope: _parchment2.default.Scope.INLINE
  });

  exports.BackgroundClass = BackgroundClass;
  exports.BackgroundStyle = BackgroundStyle;

  /***/ }),
  /* 38 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DirectionStyle = exports.DirectionClass = exports.DirectionAttribute = undefined;

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var config = {
    scope: _parchment2.default.Scope.BLOCK,
    whitelist: ['rtl']
  };

  var DirectionAttribute = new _parchment2.default.Attributor.Attribute('direction', 'dir', config);
  var DirectionClass = new _parchment2.default.Attributor.Class('direction', 'ql-direction', config);
  var DirectionStyle = new _parchment2.default.Attributor.Style('direction', 'direction', config);

  exports.DirectionAttribute = DirectionAttribute;
  exports.DirectionClass = DirectionClass;
  exports.DirectionStyle = DirectionStyle;

  /***/ }),
  /* 39 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FontClass = exports.FontStyle = undefined;

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var config = {
    scope: _parchment2.default.Scope.INLINE,
    whitelist: ['serif', 'monospace']
  };

  var FontClass = new _parchment2.default.Attributor.Class('font', 'ql-font', config);

  var FontStyleAttributor = function (_Parchment$Attributor) {
    _inherits(FontStyleAttributor, _Parchment$Attributor);

    function FontStyleAttributor() {
      _classCallCheck(this, FontStyleAttributor);

      return _possibleConstructorReturn(this, (FontStyleAttributor.__proto__ || Object.getPrototypeOf(FontStyleAttributor)).apply(this, arguments));
    }

    _createClass(FontStyleAttributor, [{
      key: 'value',
      value: function value(node) {
        return _get(FontStyleAttributor.prototype.__proto__ || Object.getPrototypeOf(FontStyleAttributor.prototype), 'value', this).call(this, node).replace(/["']/g, '');
      }
    }]);

    return FontStyleAttributor;
  }(_parchment2.default.Attributor.Style);

  var FontStyle = new FontStyleAttributor('font', 'font-family', config);

  exports.FontStyle = FontStyle;
  exports.FontClass = FontClass;

  /***/ }),
  /* 40 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SizeStyle = exports.SizeClass = undefined;

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var SizeClass = new _parchment2.default.Attributor.Class('size', 'ql-size', {
    scope: _parchment2.default.Scope.INLINE,
    whitelist: ['small', 'large', 'huge']
  });
  var SizeStyle = new _parchment2.default.Attributor.Style('size', 'font-size', {
    scope: _parchment2.default.Scope.INLINE,
    whitelist: ['10px', '18px', '32px']
  });

  exports.SizeClass = SizeClass;
  exports.SizeStyle = SizeStyle;

  /***/ }),
  /* 41 */
  /***/ (function(module, exports, __webpack_require__) {


  module.exports = {
    'align': {
      '': __webpack_require__(76),
      'center': __webpack_require__(77),
      'right': __webpack_require__(78),
      'justify': __webpack_require__(79)
    },
    'background': __webpack_require__(80),
    'blockquote': __webpack_require__(81),
    'bold': __webpack_require__(82),
    'clean': __webpack_require__(83),
    'code': __webpack_require__(58),
    'code-block': __webpack_require__(58),
    'color': __webpack_require__(84),
    'direction': {
      '': __webpack_require__(85),
      'rtl': __webpack_require__(86)
    },
    'float': {
      'center': __webpack_require__(87),
      'full': __webpack_require__(88),
      'left': __webpack_require__(89),
      'right': __webpack_require__(90)
    },
    'formula': __webpack_require__(91),
    'header': {
      '1': __webpack_require__(92),
      '2': __webpack_require__(93)
    },
    'italic': __webpack_require__(94),
    'image': __webpack_require__(95),
    'indent': {
      '+1': __webpack_require__(96),
      '-1': __webpack_require__(97)
    },
    'link': __webpack_require__(98),
    'list': {
      'ordered': __webpack_require__(99),
      'bullet': __webpack_require__(100),
      'check': __webpack_require__(101)
    },
    'script': {
      'sub': __webpack_require__(102),
      'super': __webpack_require__(103)
    },
    'strike': __webpack_require__(104),
    'underline': __webpack_require__(105),
    'video': __webpack_require__(106)
  };

  /***/ }),
  /* 42 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getLastChangeIndex = exports.default = undefined;

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _quill = __webpack_require__(5);

  var _quill2 = _interopRequireDefault(_quill);

  var _module = __webpack_require__(9);

  var _module2 = _interopRequireDefault(_module);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var History = function (_Module) {
    _inherits(History, _Module);

    function History(quill, options) {
      _classCallCheck(this, History);

      var _this = _possibleConstructorReturn(this, (History.__proto__ || Object.getPrototypeOf(History)).call(this, quill, options));

      _this.lastRecorded = 0;
      _this.ignoreChange = false;
      _this.clear();
      _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function (eventName, delta, oldDelta, source) {
        if (eventName !== _quill2.default.events.TEXT_CHANGE || _this.ignoreChange) return;
        if (!_this.options.userOnly || source === _quill2.default.sources.USER) {
          _this.record(delta, oldDelta);
        } else {
          _this.transform(delta);
        }
      });
      _this.quill.keyboard.addBinding({ key: 'Z', shortKey: true }, _this.undo.bind(_this));
      _this.quill.keyboard.addBinding({ key: 'Z', shortKey: true, shiftKey: true }, _this.redo.bind(_this));
      if (/Win/i.test(navigator.platform)) {
        _this.quill.keyboard.addBinding({ key: 'Y', shortKey: true }, _this.redo.bind(_this));
      }
      return _this;
    }

    _createClass(History, [{
      key: 'change',
      value: function change(source, dest) {
        if (this.stack[source].length === 0) return;
        var delta = this.stack[source].pop();
        this.stack[dest].push(delta);
        this.lastRecorded = 0;
        this.ignoreChange = true;
        this.quill.updateContents(delta[source], _quill2.default.sources.USER);
        this.ignoreChange = false;
        var index = getLastChangeIndex(delta[source]);
        this.quill.setSelection(index);
      }
    }, {
      key: 'clear',
      value: function clear() {
        this.stack = { undo: [], redo: [] };
      }
    }, {
      key: 'cutoff',
      value: function cutoff() {
        this.lastRecorded = 0;
      }
    }, {
      key: 'record',
      value: function record(changeDelta, oldDelta) {
        if (changeDelta.ops.length === 0) return;
        this.stack.redo = [];
        var undoDelta = this.quill.getContents().diff(oldDelta);
        var timestamp = Date.now();
        if (this.lastRecorded + this.options.delay > timestamp && this.stack.undo.length > 0) {
          var delta = this.stack.undo.pop();
          undoDelta = undoDelta.compose(delta.undo);
          changeDelta = delta.redo.compose(changeDelta);
        } else {
          this.lastRecorded = timestamp;
        }
        this.stack.undo.push({
          redo: changeDelta,
          undo: undoDelta
        });
        if (this.stack.undo.length > this.options.maxStack) {
          this.stack.undo.shift();
        }
      }
    }, {
      key: 'redo',
      value: function redo() {
        this.change('redo', 'undo');
      }
    }, {
      key: 'transform',
      value: function transform(delta) {
        this.stack.undo.forEach(function (change) {
          change.undo = delta.transform(change.undo, true);
          change.redo = delta.transform(change.redo, true);
        });
        this.stack.redo.forEach(function (change) {
          change.undo = delta.transform(change.undo, true);
          change.redo = delta.transform(change.redo, true);
        });
      }
    }, {
      key: 'undo',
      value: function undo() {
        this.change('undo', 'redo');
      }
    }]);

    return History;
  }(_module2.default);

  History.DEFAULTS = {
    delay: 1000,
    maxStack: 100,
    userOnly: false
  };

  function endsWithNewlineChange(delta) {
    var lastOp = delta.ops[delta.ops.length - 1];
    if (lastOp == null) return false;
    if (lastOp.insert != null) {
      return typeof lastOp.insert === 'string' && lastOp.insert.endsWith('\n');
    }
    if (lastOp.attributes != null) {
      return Object.keys(lastOp.attributes).some(function (attr) {
        return _parchment2.default.query(attr, _parchment2.default.Scope.BLOCK) != null;
      });
    }
    return false;
  }

  function getLastChangeIndex(delta) {
    var deleteLength = delta.reduce(function (length, op) {
      length += op.delete || 0;
      return length;
    }, 0);
    var changeIndex = delta.length() - deleteLength;
    if (endsWithNewlineChange(delta)) {
      changeIndex -= 1;
    }
    return changeIndex;
  }

  exports.default = History;
  exports.getLastChangeIndex = getLastChangeIndex;

  /***/ }),
  /* 43 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.BaseTooltip = undefined;

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _extend = __webpack_require__(3);

  var _extend2 = _interopRequireDefault(_extend);

  var _quillDelta = __webpack_require__(2);

  var _quillDelta2 = _interopRequireDefault(_quillDelta);

  var _emitter = __webpack_require__(8);

  var _emitter2 = _interopRequireDefault(_emitter);

  var _keyboard = __webpack_require__(23);

  var _keyboard2 = _interopRequireDefault(_keyboard);

  var _theme = __webpack_require__(34);

  var _theme2 = _interopRequireDefault(_theme);

  var _colorPicker = __webpack_require__(59);

  var _colorPicker2 = _interopRequireDefault(_colorPicker);

  var _iconPicker = __webpack_require__(60);

  var _iconPicker2 = _interopRequireDefault(_iconPicker);

  var _picker = __webpack_require__(28);

  var _picker2 = _interopRequireDefault(_picker);

  var _tooltip = __webpack_require__(61);

  var _tooltip2 = _interopRequireDefault(_tooltip);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var ALIGNS = [false, 'center', 'right', 'justify'];

  var COLORS = ["#000000", "#e60000", "#ff9900", "#ffff00", "#008a00", "#0066cc", "#9933ff", "#ffffff", "#facccc", "#ffebcc", "#ffffcc", "#cce8cc", "#cce0f5", "#ebd6ff", "#bbbbbb", "#f06666", "#ffc266", "#ffff66", "#66b966", "#66a3e0", "#c285ff", "#888888", "#a10000", "#b26b00", "#b2b200", "#006100", "#0047b2", "#6b24b2", "#444444", "#5c0000", "#663d00", "#666600", "#003700", "#002966", "#3d1466"];

  var FONTS = [false, 'serif', 'monospace'];

  var HEADERS = ['1', '2', '3', false];

  var SIZES = ['small', false, 'large', 'huge'];

  var BaseTheme = function (_Theme) {
    _inherits(BaseTheme, _Theme);

    function BaseTheme(quill, options) {
      _classCallCheck(this, BaseTheme);

      var _this = _possibleConstructorReturn(this, (BaseTheme.__proto__ || Object.getPrototypeOf(BaseTheme)).call(this, quill, options));

      var listener = function listener(e) {
        if (!document.body.contains(quill.root)) {
          return document.body.removeEventListener('click', listener);
        }
        if (_this.tooltip != null && !_this.tooltip.root.contains(e.target) && document.activeElement !== _this.tooltip.textbox && !_this.quill.hasFocus()) {
          _this.tooltip.hide();
        }
        if (_this.pickers != null) {
          _this.pickers.forEach(function (picker) {
            if (!picker.container.contains(e.target)) {
              picker.close();
            }
          });
        }
      };
      quill.emitter.listenDOM('click', document.body, listener);
      return _this;
    }

    _createClass(BaseTheme, [{
      key: 'addModule',
      value: function addModule(name) {
        var module = _get(BaseTheme.prototype.__proto__ || Object.getPrototypeOf(BaseTheme.prototype), 'addModule', this).call(this, name);
        if (name === 'toolbar') {
          this.extendToolbar(module);
        }
        return module;
      }
    }, {
      key: 'buildButtons',
      value: function buildButtons(buttons, icons) {
        buttons.forEach(function (button) {
          var className = button.getAttribute('class') || '';
          className.split(/\s+/).forEach(function (name) {
            if (!name.startsWith('ql-')) return;
            name = name.slice('ql-'.length);
            if (icons[name] == null) return;
            if (name === 'direction') {
              button.innerHTML = icons[name][''] + icons[name]['rtl'];
            } else if (typeof icons[name] === 'string') {
              button.innerHTML = icons[name];
            } else {
              var value = button.value || '';
              if (value != null && icons[name][value]) {
                button.innerHTML = icons[name][value];
              }
            }
          });
        });
      }
    }, {
      key: 'buildPickers',
      value: function buildPickers(selects, icons) {
        var _this2 = this;

        this.pickers = selects.map(function (select) {
          if (select.classList.contains('ql-align')) {
            if (select.querySelector('option') == null) {
              fillSelect(select, ALIGNS);
            }
            return new _iconPicker2.default(select, icons.align);
          } else if (select.classList.contains('ql-background') || select.classList.contains('ql-color')) {
            var format = select.classList.contains('ql-background') ? 'background' : 'color';
            if (select.querySelector('option') == null) {
              fillSelect(select, COLORS, format === 'background' ? '#ffffff' : '#000000');
            }
            return new _colorPicker2.default(select, icons[format]);
          } else {
            if (select.querySelector('option') == null) {
              if (select.classList.contains('ql-font')) {
                fillSelect(select, FONTS);
              } else if (select.classList.contains('ql-header')) {
                fillSelect(select, HEADERS);
              } else if (select.classList.contains('ql-size')) {
                fillSelect(select, SIZES);
              }
            }
            return new _picker2.default(select);
          }
        });
        var update = function update() {
          _this2.pickers.forEach(function (picker) {
            picker.update();
          });
        };
        this.quill.on(_emitter2.default.events.EDITOR_CHANGE, update);
      }
    }]);

    return BaseTheme;
  }(_theme2.default);

  BaseTheme.DEFAULTS = (0, _extend2.default)(true, {}, _theme2.default.DEFAULTS, {
    modules: {
      toolbar: {
        handlers: {
          formula: function formula() {
            this.quill.theme.tooltip.edit('formula');
          },
          image: function image() {
            var _this3 = this;

            var fileInput = this.container.querySelector('input.ql-image[type=file]');
            if (fileInput == null) {
              fileInput = document.createElement('input');
              fileInput.setAttribute('type', 'file');
              fileInput.setAttribute('accept', 'image/png, image/gif, image/jpeg, image/bmp, image/x-icon');
              fileInput.classList.add('ql-image');
              fileInput.addEventListener('change', function () {
                if (fileInput.files != null && fileInput.files[0] != null) {
                  var reader = new FileReader();
                  reader.onload = function (e) {
                    var range = _this3.quill.getSelection(true);
                    _this3.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert({ image: e.target.result }), _emitter2.default.sources.USER);
                    _this3.quill.setSelection(range.index + 1, _emitter2.default.sources.SILENT);
                    fileInput.value = "";
                  };
                  reader.readAsDataURL(fileInput.files[0]);
                }
              });
              this.container.appendChild(fileInput);
            }
            fileInput.click();
          },
          video: function video() {
            this.quill.theme.tooltip.edit('video');
          }
        }
      }
    }
  });

  var BaseTooltip = function (_Tooltip) {
    _inherits(BaseTooltip, _Tooltip);

    function BaseTooltip(quill, boundsContainer) {
      _classCallCheck(this, BaseTooltip);

      var _this4 = _possibleConstructorReturn(this, (BaseTooltip.__proto__ || Object.getPrototypeOf(BaseTooltip)).call(this, quill, boundsContainer));

      _this4.textbox = _this4.root.querySelector('input[type="text"]');
      _this4.listen();
      return _this4;
    }

    _createClass(BaseTooltip, [{
      key: 'listen',
      value: function listen() {
        var _this5 = this;

        this.textbox.addEventListener('keydown', function (event) {
          if (_keyboard2.default.match(event, 'enter')) {
            _this5.save();
            event.preventDefault();
          } else if (_keyboard2.default.match(event, 'escape')) {
            _this5.cancel();
            event.preventDefault();
          }
        });
      }
    }, {
      key: 'cancel',
      value: function cancel() {
        this.hide();
      }
    }, {
      key: 'edit',
      value: function edit() {
        var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'link';
        var preview = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        this.root.classList.remove('ql-hidden');
        this.root.classList.add('ql-editing');
        if (preview != null) {
          this.textbox.value = preview;
        } else if (mode !== this.root.getAttribute('data-mode')) {
          this.textbox.value = '';
        }
        this.position(this.quill.getBounds(this.quill.selection.savedRange));
        this.textbox.select();
        this.textbox.setAttribute('placeholder', this.textbox.getAttribute('data-' + mode) || '');
        this.root.setAttribute('data-mode', mode);
      }
    }, {
      key: 'restoreFocus',
      value: function restoreFocus() {
        var scrollTop = this.quill.scrollingContainer.scrollTop;
        this.quill.focus();
        this.quill.scrollingContainer.scrollTop = scrollTop;
      }
    }, {
      key: 'save',
      value: function save() {
        var value = this.textbox.value;
        switch (this.root.getAttribute('data-mode')) {
          case 'link':
            {
              var scrollTop = this.quill.root.scrollTop;
              if (this.linkRange) {
                this.quill.formatText(this.linkRange, 'link', value, _emitter2.default.sources.USER);
                delete this.linkRange;
              } else {
                this.restoreFocus();
                this.quill.format('link', value, _emitter2.default.sources.USER);
              }
              this.quill.root.scrollTop = scrollTop;
              break;
            }
          case 'video':
            {
              value = extractVideoUrl(value);
            } // eslint-disable-next-line no-fallthrough
          case 'formula':
            {
              if (!value) break;
              var range = this.quill.getSelection(true);
              if (range != null) {
                var index = range.index + range.length;
                this.quill.insertEmbed(index, this.root.getAttribute('data-mode'), value, _emitter2.default.sources.USER);
                if (this.root.getAttribute('data-mode') === 'formula') {
                  this.quill.insertText(index + 1, ' ', _emitter2.default.sources.USER);
                }
                this.quill.setSelection(index + 2, _emitter2.default.sources.USER);
              }
              break;
            }
          default:
        }
        this.textbox.value = '';
        this.hide();
      }
    }]);

    return BaseTooltip;
  }(_tooltip2.default);

  function extractVideoUrl(url) {
    var match = url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtube\.com\/watch.*v=([a-zA-Z0-9_-]+)/) || url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtu\.be\/([a-zA-Z0-9_-]+)/);
    if (match) {
      return (match[1] || 'https') + '://www.youtube.com/embed/' + match[2] + '?showinfo=0';
    }
    if (match = url.match(/^(?:(https?):\/\/)?(?:www\.)?vimeo\.com\/(\d+)/)) {
      // eslint-disable-line no-cond-assign
      return (match[1] || 'https') + '://player.vimeo.com/video/' + match[2] + '/';
    }
    return url;
  }

  function fillSelect(select, values) {
    var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    values.forEach(function (value) {
      var option = document.createElement('option');
      if (value === defaultValue) {
        option.setAttribute('selected', 'selected');
      } else {
        option.setAttribute('value', value);
      }
      select.appendChild(option);
    });
  }

  exports.BaseTooltip = BaseTooltip;
  exports.default = BaseTheme;

  /***/ }),
  /* 44 */
  /***/ (function(module, exports, __webpack_require__) {

  Object.defineProperty(exports, "__esModule", { value: true });
  var LinkedList = /** @class */ (function () {
      function LinkedList() {
          this.head = this.tail = null;
          this.length = 0;
      }
      LinkedList.prototype.append = function () {
          var nodes = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              nodes[_i] = arguments[_i];
          }
          this.insertBefore(nodes[0], null);
          if (nodes.length > 1) {
              this.append.apply(this, nodes.slice(1));
          }
      };
      LinkedList.prototype.contains = function (node) {
          var cur, next = this.iterator();
          while ((cur = next())) {
              if (cur === node)
                  return true;
          }
          return false;
      };
      LinkedList.prototype.insertBefore = function (node, refNode) {
          if (!node)
              return;
          node.next = refNode;
          if (refNode != null) {
              node.prev = refNode.prev;
              if (refNode.prev != null) {
                  refNode.prev.next = node;
              }
              refNode.prev = node;
              if (refNode === this.head) {
                  this.head = node;
              }
          }
          else if (this.tail != null) {
              this.tail.next = node;
              node.prev = this.tail;
              this.tail = node;
          }
          else {
              node.prev = null;
              this.head = this.tail = node;
          }
          this.length += 1;
      };
      LinkedList.prototype.offset = function (target) {
          var index = 0, cur = this.head;
          while (cur != null) {
              if (cur === target)
                  return index;
              index += cur.length();
              cur = cur.next;
          }
          return -1;
      };
      LinkedList.prototype.remove = function (node) {
          if (!this.contains(node))
              return;
          if (node.prev != null)
              node.prev.next = node.next;
          if (node.next != null)
              node.next.prev = node.prev;
          if (node === this.head)
              this.head = node.next;
          if (node === this.tail)
              this.tail = node.prev;
          this.length -= 1;
      };
      LinkedList.prototype.iterator = function (curNode) {
          if (curNode === void 0) { curNode = this.head; }
          // TODO use yield when we can
          return function () {
              var ret = curNode;
              if (curNode != null)
                  curNode = curNode.next;
              return ret;
          };
      };
      LinkedList.prototype.find = function (index, inclusive) {
          if (inclusive === void 0) { inclusive = false; }
          var cur, next = this.iterator();
          while ((cur = next())) {
              var length = cur.length();
              if (index < length ||
                  (inclusive && index === length && (cur.next == null || cur.next.length() !== 0))) {
                  return [cur, index];
              }
              index -= length;
          }
          return [null, 0];
      };
      LinkedList.prototype.forEach = function (callback) {
          var cur, next = this.iterator();
          while ((cur = next())) {
              callback(cur);
          }
      };
      LinkedList.prototype.forEachAt = function (index, length, callback) {
          if (length <= 0)
              return;
          var _a = this.find(index), startNode = _a[0], offset = _a[1];
          var cur, curIndex = index - offset, next = this.iterator(startNode);
          while ((cur = next()) && curIndex < index + length) {
              var curLength = cur.length();
              if (index > curIndex) {
                  callback(cur, index - curIndex, Math.min(length, curIndex + curLength - index));
              }
              else {
                  callback(cur, 0, Math.min(curLength, index + length - curIndex));
              }
              curIndex += curLength;
          }
      };
      LinkedList.prototype.map = function (callback) {
          return this.reduce(function (memo, cur) {
              memo.push(callback(cur));
              return memo;
          }, []);
      };
      LinkedList.prototype.reduce = function (callback, memo) {
          var cur, next = this.iterator();
          while ((cur = next())) {
              memo = callback(memo, cur);
          }
          return memo;
      };
      return LinkedList;
  }());
  exports.default = LinkedList;


  /***/ }),
  /* 45 */
  /***/ (function(module, exports, __webpack_require__) {

  var __extends = (this && this.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var container_1 = __webpack_require__(17);
  var Registry = __webpack_require__(1);
  var OBSERVER_CONFIG = {
      attributes: true,
      characterData: true,
      characterDataOldValue: true,
      childList: true,
      subtree: true,
  };
  var MAX_OPTIMIZE_ITERATIONS = 100;
  var ScrollBlot = /** @class */ (function (_super) {
      __extends(ScrollBlot, _super);
      function ScrollBlot(node) {
          var _this = _super.call(this, node) || this;
          _this.scroll = _this;
          _this.observer = new MutationObserver(function (mutations) {
              _this.update(mutations);
          });
          _this.observer.observe(_this.domNode, OBSERVER_CONFIG);
          _this.attach();
          return _this;
      }
      ScrollBlot.prototype.detach = function () {
          _super.prototype.detach.call(this);
          this.observer.disconnect();
      };
      ScrollBlot.prototype.deleteAt = function (index, length) {
          this.update();
          if (index === 0 && length === this.length()) {
              this.children.forEach(function (child) {
                  child.remove();
              });
          }
          else {
              _super.prototype.deleteAt.call(this, index, length);
          }
      };
      ScrollBlot.prototype.formatAt = function (index, length, name, value) {
          this.update();
          _super.prototype.formatAt.call(this, index, length, name, value);
      };
      ScrollBlot.prototype.insertAt = function (index, value, def) {
          this.update();
          _super.prototype.insertAt.call(this, index, value, def);
      };
      ScrollBlot.prototype.optimize = function (mutations, context) {
          var _this = this;
          if (mutations === void 0) { mutations = []; }
          if (context === void 0) { context = {}; }
          _super.prototype.optimize.call(this, context);
          // We must modify mutations directly, cannot make copy and then modify
          var records = [].slice.call(this.observer.takeRecords());
          // Array.push currently seems to be implemented by a non-tail recursive function
          // so we cannot just mutations.push.apply(mutations, this.observer.takeRecords());
          while (records.length > 0)
              mutations.push(records.pop());
          // TODO use WeakMap
          var mark = function (blot, markParent) {
              if (markParent === void 0) { markParent = true; }
              if (blot == null || blot === _this)
                  return;
              if (blot.domNode.parentNode == null)
                  return;
              // @ts-ignore
              if (blot.domNode[Registry.DATA_KEY].mutations == null) {
                  // @ts-ignore
                  blot.domNode[Registry.DATA_KEY].mutations = [];
              }
              if (markParent)
                  mark(blot.parent);
          };
          var optimize = function (blot) {
              // Post-order traversal
              if (
              // @ts-ignore
              blot.domNode[Registry.DATA_KEY] == null ||
                  // @ts-ignore
                  blot.domNode[Registry.DATA_KEY].mutations == null) {
                  return;
              }
              if (blot instanceof container_1.default) {
                  blot.children.forEach(optimize);
              }
              blot.optimize(context);
          };
          var remaining = mutations;
          for (var i = 0; remaining.length > 0; i += 1) {
              if (i >= MAX_OPTIMIZE_ITERATIONS) {
                  throw new Error('[Parchment] Maximum optimize iterations reached');
              }
              remaining.forEach(function (mutation) {
                  var blot = Registry.find(mutation.target, true);
                  if (blot == null)
                      return;
                  if (blot.domNode === mutation.target) {
                      if (mutation.type === 'childList') {
                          mark(Registry.find(mutation.previousSibling, false));
                          [].forEach.call(mutation.addedNodes, function (node) {
                              var child = Registry.find(node, false);
                              mark(child, false);
                              if (child instanceof container_1.default) {
                                  child.children.forEach(function (grandChild) {
                                      mark(grandChild, false);
                                  });
                              }
                          });
                      }
                      else if (mutation.type === 'attributes') {
                          mark(blot.prev);
                      }
                  }
                  mark(blot);
              });
              this.children.forEach(optimize);
              remaining = [].slice.call(this.observer.takeRecords());
              records = remaining.slice();
              while (records.length > 0)
                  mutations.push(records.pop());
          }
      };
      ScrollBlot.prototype.update = function (mutations, context) {
          var _this = this;
          if (context === void 0) { context = {}; }
          mutations = mutations || this.observer.takeRecords();
          // TODO use WeakMap
          mutations
              .map(function (mutation) {
              var blot = Registry.find(mutation.target, true);
              if (blot == null)
                  return null;
              // @ts-ignore
              if (blot.domNode[Registry.DATA_KEY].mutations == null) {
                  // @ts-ignore
                  blot.domNode[Registry.DATA_KEY].mutations = [mutation];
                  return blot;
              }
              else {
                  // @ts-ignore
                  blot.domNode[Registry.DATA_KEY].mutations.push(mutation);
                  return null;
              }
          })
              .forEach(function (blot) {
              if (blot == null ||
                  blot === _this ||
                  //@ts-ignore
                  blot.domNode[Registry.DATA_KEY] == null)
                  return;
              // @ts-ignore
              blot.update(blot.domNode[Registry.DATA_KEY].mutations || [], context);
          });
          // @ts-ignore
          if (this.domNode[Registry.DATA_KEY].mutations != null) {
              // @ts-ignore
              _super.prototype.update.call(this, this.domNode[Registry.DATA_KEY].mutations, context);
          }
          this.optimize(mutations, context);
      };
      ScrollBlot.blotName = 'scroll';
      ScrollBlot.defaultChild = 'block';
      ScrollBlot.scope = Registry.Scope.BLOCK_BLOT;
      ScrollBlot.tagName = 'DIV';
      return ScrollBlot;
  }(container_1.default));
  exports.default = ScrollBlot;


  /***/ }),
  /* 46 */
  /***/ (function(module, exports, __webpack_require__) {

  var __extends = (this && this.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var format_1 = __webpack_require__(18);
  var Registry = __webpack_require__(1);
  // Shallow object comparison
  function isEqual(obj1, obj2) {
      if (Object.keys(obj1).length !== Object.keys(obj2).length)
          return false;
      // @ts-ignore
      for (var prop in obj1) {
          // @ts-ignore
          if (obj1[prop] !== obj2[prop])
              return false;
      }
      return true;
  }
  var InlineBlot = /** @class */ (function (_super) {
      __extends(InlineBlot, _super);
      function InlineBlot() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      InlineBlot.formats = function (domNode) {
          if (domNode.tagName === InlineBlot.tagName)
              return undefined;
          return _super.formats.call(this, domNode);
      };
      InlineBlot.prototype.format = function (name, value) {
          var _this = this;
          if (name === this.statics.blotName && !value) {
              this.children.forEach(function (child) {
                  if (!(child instanceof format_1.default)) {
                      child = child.wrap(InlineBlot.blotName, true);
                  }
                  _this.attributes.copy(child);
              });
              this.unwrap();
          }
          else {
              _super.prototype.format.call(this, name, value);
          }
      };
      InlineBlot.prototype.formatAt = function (index, length, name, value) {
          if (this.formats()[name] != null || Registry.query(name, Registry.Scope.ATTRIBUTE)) {
              var blot = this.isolate(index, length);
              blot.format(name, value);
          }
          else {
              _super.prototype.formatAt.call(this, index, length, name, value);
          }
      };
      InlineBlot.prototype.optimize = function (context) {
          _super.prototype.optimize.call(this, context);
          var formats = this.formats();
          if (Object.keys(formats).length === 0) {
              return this.unwrap(); // unformatted span
          }
          var next = this.next;
          if (next instanceof InlineBlot && next.prev === this && isEqual(formats, next.formats())) {
              next.moveChildren(this);
              next.remove();
          }
      };
      InlineBlot.blotName = 'inline';
      InlineBlot.scope = Registry.Scope.INLINE_BLOT;
      InlineBlot.tagName = 'SPAN';
      return InlineBlot;
  }(format_1.default));
  exports.default = InlineBlot;


  /***/ }),
  /* 47 */
  /***/ (function(module, exports, __webpack_require__) {

  var __extends = (this && this.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var format_1 = __webpack_require__(18);
  var Registry = __webpack_require__(1);
  var BlockBlot = /** @class */ (function (_super) {
      __extends(BlockBlot, _super);
      function BlockBlot() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      BlockBlot.formats = function (domNode) {
          var tagName = Registry.query(BlockBlot.blotName).tagName;
          if (domNode.tagName === tagName)
              return undefined;
          return _super.formats.call(this, domNode);
      };
      BlockBlot.prototype.format = function (name, value) {
          if (Registry.query(name, Registry.Scope.BLOCK) == null) {
              return;
          }
          else if (name === this.statics.blotName && !value) {
              this.replaceWith(BlockBlot.blotName);
          }
          else {
              _super.prototype.format.call(this, name, value);
          }
      };
      BlockBlot.prototype.formatAt = function (index, length, name, value) {
          if (Registry.query(name, Registry.Scope.BLOCK) != null) {
              this.format(name, value);
          }
          else {
              _super.prototype.formatAt.call(this, index, length, name, value);
          }
      };
      BlockBlot.prototype.insertAt = function (index, value, def) {
          if (def == null || Registry.query(value, Registry.Scope.INLINE) != null) {
              // Insert text or inline
              _super.prototype.insertAt.call(this, index, value, def);
          }
          else {
              var after = this.split(index);
              var blot = Registry.create(value, def);
              after.parent.insertBefore(blot, after);
          }
      };
      BlockBlot.prototype.update = function (mutations, context) {
          if (navigator.userAgent.match(/Trident/)) {
              this.build();
          }
          else {
              _super.prototype.update.call(this, mutations, context);
          }
      };
      BlockBlot.blotName = 'block';
      BlockBlot.scope = Registry.Scope.BLOCK_BLOT;
      BlockBlot.tagName = 'P';
      return BlockBlot;
  }(format_1.default));
  exports.default = BlockBlot;


  /***/ }),
  /* 48 */
  /***/ (function(module, exports, __webpack_require__) {

  var __extends = (this && this.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var leaf_1 = __webpack_require__(19);
  var EmbedBlot = /** @class */ (function (_super) {
      __extends(EmbedBlot, _super);
      function EmbedBlot() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      EmbedBlot.formats = function (domNode) {
          return undefined;
      };
      EmbedBlot.prototype.format = function (name, value) {
          // super.formatAt wraps, which is what we want in general,
          // but this allows subclasses to overwrite for formats
          // that just apply to particular embeds
          _super.prototype.formatAt.call(this, 0, this.length(), name, value);
      };
      EmbedBlot.prototype.formatAt = function (index, length, name, value) {
          if (index === 0 && length === this.length()) {
              this.format(name, value);
          }
          else {
              _super.prototype.formatAt.call(this, index, length, name, value);
          }
      };
      EmbedBlot.prototype.formats = function () {
          return this.statics.formats(this.domNode);
      };
      return EmbedBlot;
  }(leaf_1.default));
  exports.default = EmbedBlot;


  /***/ }),
  /* 49 */
  /***/ (function(module, exports, __webpack_require__) {

  var __extends = (this && this.__extends) || (function () {
      var extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  var leaf_1 = __webpack_require__(19);
  var Registry = __webpack_require__(1);
  var TextBlot = /** @class */ (function (_super) {
      __extends(TextBlot, _super);
      function TextBlot(node) {
          var _this = _super.call(this, node) || this;
          _this.text = _this.statics.value(_this.domNode);
          return _this;
      }
      TextBlot.create = function (value) {
          return document.createTextNode(value);
      };
      TextBlot.value = function (domNode) {
          var text = domNode.data;
          // @ts-ignore
          if (text['normalize'])
              text = text['normalize']();
          return text;
      };
      TextBlot.prototype.deleteAt = function (index, length) {
          this.domNode.data = this.text = this.text.slice(0, index) + this.text.slice(index + length);
      };
      TextBlot.prototype.index = function (node, offset) {
          if (this.domNode === node) {
              return offset;
          }
          return -1;
      };
      TextBlot.prototype.insertAt = function (index, value, def) {
          if (def == null) {
              this.text = this.text.slice(0, index) + value + this.text.slice(index);
              this.domNode.data = this.text;
          }
          else {
              _super.prototype.insertAt.call(this, index, value, def);
          }
      };
      TextBlot.prototype.length = function () {
          return this.text.length;
      };
      TextBlot.prototype.optimize = function (context) {
          _super.prototype.optimize.call(this, context);
          this.text = this.statics.value(this.domNode);
          if (this.text.length === 0) {
              this.remove();
          }
          else if (this.next instanceof TextBlot && this.next.prev === this) {
              this.insertAt(this.length(), this.next.value());
              this.next.remove();
          }
      };
      TextBlot.prototype.position = function (index, inclusive) {
          if (inclusive === void 0) { inclusive = false; }
          return [this.domNode, index];
      };
      TextBlot.prototype.split = function (index, force) {
          if (force === void 0) { force = false; }
          if (!force) {
              if (index === 0)
                  return this;
              if (index === this.length())
                  return this.next;
          }
          var after = Registry.create(this.domNode.splitText(index));
          this.parent.insertBefore(after, this.next);
          this.text = this.statics.value(this.domNode);
          return after;
      };
      TextBlot.prototype.update = function (mutations, context) {
          var _this = this;
          if (mutations.some(function (mutation) {
              return mutation.type === 'characterData' && mutation.target === _this.domNode;
          })) {
              this.text = this.statics.value(this.domNode);
          }
      };
      TextBlot.prototype.value = function () {
          return this.text;
      };
      TextBlot.blotName = 'text';
      TextBlot.scope = Registry.Scope.INLINE_BLOT;
      return TextBlot;
  }(leaf_1.default));
  exports.default = TextBlot;


  /***/ }),
  /* 50 */
  /***/ (function(module, exports, __webpack_require__) {


  var elem = document.createElement('div');
  elem.classList.toggle('test-class', false);
  if (elem.classList.contains('test-class')) {
    var _toggle = DOMTokenList.prototype.toggle;
    DOMTokenList.prototype.toggle = function (token, force) {
      if (arguments.length > 1 && !this.contains(token) === !force) {
        return force;
      } else {
        return _toggle.call(this, token);
      }
    };
  }

  if (!String.prototype.startsWith) {
    String.prototype.startsWith = function (searchString, position) {
      position = position || 0;
      return this.substr(position, searchString.length) === searchString;
    };
  }

  if (!String.prototype.endsWith) {
    String.prototype.endsWith = function (searchString, position) {
      var subjectString = this.toString();
      if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
        position = subjectString.length;
      }
      position -= searchString.length;
      var lastIndex = subjectString.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };
  }

  if (!Array.prototype.find) {
    Object.defineProperty(Array.prototype, "find", {
      value: function value(predicate) {
        if (this === null) {
          throw new TypeError('Array.prototype.find called on null or undefined');
        }
        if (typeof predicate !== 'function') {
          throw new TypeError('predicate must be a function');
        }
        var list = Object(this);
        var length = list.length >>> 0;
        var thisArg = arguments[1];
        var value;

        for (var i = 0; i < length; i++) {
          value = list[i];
          if (predicate.call(thisArg, value, i, list)) {
            return value;
          }
        }
        return undefined;
      }
    });
  }

  document.addEventListener("DOMContentLoaded", function () {
    // Disable resizing in Firefox
    document.execCommand("enableObjectResizing", false, false);
    // Disable automatic linkifying in IE11
    document.execCommand("autoUrlDetect", false, false);
  });

  /***/ }),
  /* 51 */
  /***/ (function(module, exports) {

  /**
   * This library modifies the diff-patch-match library by Neil Fraser
   * by removing the patch and match functionality and certain advanced
   * options in the diff function. The original license is as follows:
   *
   * ===
   *
   * Diff Match and Patch
   *
   * Copyright 2006 Google Inc.
   * http://code.google.com/p/google-diff-match-patch/
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */


  /**
   * The data structure representing a diff is an array of tuples:
   * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]
   * which means: delete 'Hello', add 'Goodbye' and keep ' world.'
   */
  var DIFF_DELETE = -1;
  var DIFF_INSERT = 1;
  var DIFF_EQUAL = 0;


  /**
   * Find the differences between two texts.  Simplifies the problem by stripping
   * any common prefix or suffix off the texts before diffing.
   * @param {string} text1 Old string to be diffed.
   * @param {string} text2 New string to be diffed.
   * @param {Int} cursor_pos Expected edit position in text1 (optional)
   * @return {Array} Array of diff tuples.
   */
  function diff_main(text1, text2, cursor_pos) {
    // Check for equality (speedup).
    if (text1 == text2) {
      if (text1) {
        return [[DIFF_EQUAL, text1]];
      }
      return [];
    }

    // Check cursor_pos within bounds
    if (cursor_pos < 0 || text1.length < cursor_pos) {
      cursor_pos = null;
    }

    // Trim off common prefix (speedup).
    var commonlength = diff_commonPrefix(text1, text2);
    var commonprefix = text1.substring(0, commonlength);
    text1 = text1.substring(commonlength);
    text2 = text2.substring(commonlength);

    // Trim off common suffix (speedup).
    commonlength = diff_commonSuffix(text1, text2);
    var commonsuffix = text1.substring(text1.length - commonlength);
    text1 = text1.substring(0, text1.length - commonlength);
    text2 = text2.substring(0, text2.length - commonlength);

    // Compute the diff on the middle block.
    var diffs = diff_compute_(text1, text2);

    // Restore the prefix and suffix.
    if (commonprefix) {
      diffs.unshift([DIFF_EQUAL, commonprefix]);
    }
    if (commonsuffix) {
      diffs.push([DIFF_EQUAL, commonsuffix]);
    }
    diff_cleanupMerge(diffs);
    if (cursor_pos != null) {
      diffs = fix_cursor(diffs, cursor_pos);
    }
    diffs = fix_emoji(diffs);
    return diffs;
  }

  /**
   * Find the differences between two texts.  Assumes that the texts do not
   * have any common prefix or suffix.
   * @param {string} text1 Old string to be diffed.
   * @param {string} text2 New string to be diffed.
   * @return {Array} Array of diff tuples.
   */
  function diff_compute_(text1, text2) {
    var diffs;

    if (!text1) {
      // Just add some text (speedup).
      return [[DIFF_INSERT, text2]];
    }

    if (!text2) {
      // Just delete some text (speedup).
      return [[DIFF_DELETE, text1]];
    }

    var longtext = text1.length > text2.length ? text1 : text2;
    var shorttext = text1.length > text2.length ? text2 : text1;
    var i = longtext.indexOf(shorttext);
    if (i != -1) {
      // Shorter text is inside the longer text (speedup).
      diffs = [[DIFF_INSERT, longtext.substring(0, i)],
               [DIFF_EQUAL, shorttext],
               [DIFF_INSERT, longtext.substring(i + shorttext.length)]];
      // Swap insertions for deletions if diff is reversed.
      if (text1.length > text2.length) {
        diffs[0][0] = diffs[2][0] = DIFF_DELETE;
      }
      return diffs;
    }

    if (shorttext.length == 1) {
      // Single character string.
      // After the previous speedup, the character can't be an equality.
      return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
    }

    // Check to see if the problem can be split in two.
    var hm = diff_halfMatch_(text1, text2);
    if (hm) {
      // A half-match was found, sort out the return data.
      var text1_a = hm[0];
      var text1_b = hm[1];
      var text2_a = hm[2];
      var text2_b = hm[3];
      var mid_common = hm[4];
      // Send both pairs off for separate processing.
      var diffs_a = diff_main(text1_a, text2_a);
      var diffs_b = diff_main(text1_b, text2_b);
      // Merge the results.
      return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);
    }

    return diff_bisect_(text1, text2);
  }

  /**
   * Find the 'middle snake' of a diff, split the problem in two
   * and return the recursively constructed diff.
   * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
   * @param {string} text1 Old string to be diffed.
   * @param {string} text2 New string to be diffed.
   * @return {Array} Array of diff tuples.
   * @private
   */
  function diff_bisect_(text1, text2) {
    // Cache the text lengths to prevent multiple calls.
    var text1_length = text1.length;
    var text2_length = text2.length;
    var max_d = Math.ceil((text1_length + text2_length) / 2);
    var v_offset = max_d;
    var v_length = 2 * max_d;
    var v1 = new Array(v_length);
    var v2 = new Array(v_length);
    // Setting all elements to -1 is faster in Chrome & Firefox than mixing
    // integers and undefined.
    for (var x = 0; x < v_length; x++) {
      v1[x] = -1;
      v2[x] = -1;
    }
    v1[v_offset + 1] = 0;
    v2[v_offset + 1] = 0;
    var delta = text1_length - text2_length;
    // If the total number of characters is odd, then the front path will collide
    // with the reverse path.
    var front = (delta % 2 != 0);
    // Offsets for start and end of k loop.
    // Prevents mapping of space beyond the grid.
    var k1start = 0;
    var k1end = 0;
    var k2start = 0;
    var k2end = 0;
    for (var d = 0; d < max_d; d++) {
      // Walk the front path one step.
      for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
        var k1_offset = v_offset + k1;
        var x1;
        if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {
          x1 = v1[k1_offset + 1];
        } else {
          x1 = v1[k1_offset - 1] + 1;
        }
        var y1 = x1 - k1;
        while (x1 < text1_length && y1 < text2_length &&
               text1.charAt(x1) == text2.charAt(y1)) {
          x1++;
          y1++;
        }
        v1[k1_offset] = x1;
        if (x1 > text1_length) {
          // Ran off the right of the graph.
          k1end += 2;
        } else if (y1 > text2_length) {
          // Ran off the bottom of the graph.
          k1start += 2;
        } else if (front) {
          var k2_offset = v_offset + delta - k1;
          if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {
            // Mirror x2 onto top-left coordinate system.
            var x2 = text1_length - v2[k2_offset];
            if (x1 >= x2) {
              // Overlap detected.
              return diff_bisectSplit_(text1, text2, x1, y1);
            }
          }
        }
      }

      // Walk the reverse path one step.
      for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
        var k2_offset = v_offset + k2;
        var x2;
        if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {
          x2 = v2[k2_offset + 1];
        } else {
          x2 = v2[k2_offset - 1] + 1;
        }
        var y2 = x2 - k2;
        while (x2 < text1_length && y2 < text2_length &&
               text1.charAt(text1_length - x2 - 1) ==
               text2.charAt(text2_length - y2 - 1)) {
          x2++;
          y2++;
        }
        v2[k2_offset] = x2;
        if (x2 > text1_length) {
          // Ran off the left of the graph.
          k2end += 2;
        } else if (y2 > text2_length) {
          // Ran off the top of the graph.
          k2start += 2;
        } else if (!front) {
          var k1_offset = v_offset + delta - k2;
          if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {
            var x1 = v1[k1_offset];
            var y1 = v_offset + x1 - k1_offset;
            // Mirror x2 onto top-left coordinate system.
            x2 = text1_length - x2;
            if (x1 >= x2) {
              // Overlap detected.
              return diff_bisectSplit_(text1, text2, x1, y1);
            }
          }
        }
      }
    }
    // Diff took too long and hit the deadline or
    // number of diffs equals number of characters, no commonality at all.
    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
  }

  /**
   * Given the location of the 'middle snake', split the diff in two parts
   * and recurse.
   * @param {string} text1 Old string to be diffed.
   * @param {string} text2 New string to be diffed.
   * @param {number} x Index of split point in text1.
   * @param {number} y Index of split point in text2.
   * @return {Array} Array of diff tuples.
   */
  function diff_bisectSplit_(text1, text2, x, y) {
    var text1a = text1.substring(0, x);
    var text2a = text2.substring(0, y);
    var text1b = text1.substring(x);
    var text2b = text2.substring(y);

    // Compute both diffs serially.
    var diffs = diff_main(text1a, text2a);
    var diffsb = diff_main(text1b, text2b);

    return diffs.concat(diffsb);
  }

  /**
   * Determine the common prefix of two strings.
   * @param {string} text1 First string.
   * @param {string} text2 Second string.
   * @return {number} The number of characters common to the start of each
   *     string.
   */
  function diff_commonPrefix(text1, text2) {
    // Quick check for common null cases.
    if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {
      return 0;
    }
    // Binary search.
    // Performance analysis: http://neil.fraser.name/news/2007/10/09/
    var pointermin = 0;
    var pointermax = Math.min(text1.length, text2.length);
    var pointermid = pointermax;
    var pointerstart = 0;
    while (pointermin < pointermid) {
      if (text1.substring(pointerstart, pointermid) ==
          text2.substring(pointerstart, pointermid)) {
        pointermin = pointermid;
        pointerstart = pointermin;
      } else {
        pointermax = pointermid;
      }
      pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
    }
    return pointermid;
  }

  /**
   * Determine the common suffix of two strings.
   * @param {string} text1 First string.
   * @param {string} text2 Second string.
   * @return {number} The number of characters common to the end of each string.
   */
  function diff_commonSuffix(text1, text2) {
    // Quick check for common null cases.
    if (!text1 || !text2 ||
        text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {
      return 0;
    }
    // Binary search.
    // Performance analysis: http://neil.fraser.name/news/2007/10/09/
    var pointermin = 0;
    var pointermax = Math.min(text1.length, text2.length);
    var pointermid = pointermax;
    var pointerend = 0;
    while (pointermin < pointermid) {
      if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==
          text2.substring(text2.length - pointermid, text2.length - pointerend)) {
        pointermin = pointermid;
        pointerend = pointermin;
      } else {
        pointermax = pointermid;
      }
      pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
    }
    return pointermid;
  }

  /**
   * Do the two texts share a substring which is at least half the length of the
   * longer text?
   * This speedup can produce non-minimal diffs.
   * @param {string} text1 First string.
   * @param {string} text2 Second string.
   * @return {Array.<string>} Five element Array, containing the prefix of
   *     text1, the suffix of text1, the prefix of text2, the suffix of
   *     text2 and the common middle.  Or null if there was no match.
   */
  function diff_halfMatch_(text1, text2) {
    var longtext = text1.length > text2.length ? text1 : text2;
    var shorttext = text1.length > text2.length ? text2 : text1;
    if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
      return null;  // Pointless.
    }

    /**
     * Does a substring of shorttext exist within longtext such that the substring
     * is at least half the length of longtext?
     * Closure, but does not reference any external variables.
     * @param {string} longtext Longer string.
     * @param {string} shorttext Shorter string.
     * @param {number} i Start index of quarter length substring within longtext.
     * @return {Array.<string>} Five element Array, containing the prefix of
     *     longtext, the suffix of longtext, the prefix of shorttext, the suffix
     *     of shorttext and the common middle.  Or null if there was no match.
     * @private
     */
    function diff_halfMatchI_(longtext, shorttext, i) {
      // Start with a 1/4 length substring at position i as a seed.
      var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));
      var j = -1;
      var best_common = '';
      var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;
      while ((j = shorttext.indexOf(seed, j + 1)) != -1) {
        var prefixLength = diff_commonPrefix(longtext.substring(i),
                                             shorttext.substring(j));
        var suffixLength = diff_commonSuffix(longtext.substring(0, i),
                                             shorttext.substring(0, j));
        if (best_common.length < suffixLength + prefixLength) {
          best_common = shorttext.substring(j - suffixLength, j) +
              shorttext.substring(j, j + prefixLength);
          best_longtext_a = longtext.substring(0, i - suffixLength);
          best_longtext_b = longtext.substring(i + prefixLength);
          best_shorttext_a = shorttext.substring(0, j - suffixLength);
          best_shorttext_b = shorttext.substring(j + prefixLength);
        }
      }
      if (best_common.length * 2 >= longtext.length) {
        return [best_longtext_a, best_longtext_b,
                best_shorttext_a, best_shorttext_b, best_common];
      } else {
        return null;
      }
    }

    // First check if the second quarter is the seed for a half-match.
    var hm1 = diff_halfMatchI_(longtext, shorttext,
                               Math.ceil(longtext.length / 4));
    // Check again based on the third quarter.
    var hm2 = diff_halfMatchI_(longtext, shorttext,
                               Math.ceil(longtext.length / 2));
    var hm;
    if (!hm1 && !hm2) {
      return null;
    } else if (!hm2) {
      hm = hm1;
    } else if (!hm1) {
      hm = hm2;
    } else {
      // Both matched.  Select the longest.
      hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
    }

    // A half-match was found, sort out the return data.
    var text1_a, text1_b, text2_a, text2_b;
    if (text1.length > text2.length) {
      text1_a = hm[0];
      text1_b = hm[1];
      text2_a = hm[2];
      text2_b = hm[3];
    } else {
      text2_a = hm[0];
      text2_b = hm[1];
      text1_a = hm[2];
      text1_b = hm[3];
    }
    var mid_common = hm[4];
    return [text1_a, text1_b, text2_a, text2_b, mid_common];
  }

  /**
   * Reorder and merge like edit sections.  Merge equalities.
   * Any edit section can move as long as it doesn't cross an equality.
   * @param {Array} diffs Array of diff tuples.
   */
  function diff_cleanupMerge(diffs) {
    diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.
    var pointer = 0;
    var count_delete = 0;
    var count_insert = 0;
    var text_delete = '';
    var text_insert = '';
    var commonlength;
    while (pointer < diffs.length) {
      switch (diffs[pointer][0]) {
        case DIFF_INSERT:
          count_insert++;
          text_insert += diffs[pointer][1];
          pointer++;
          break;
        case DIFF_DELETE:
          count_delete++;
          text_delete += diffs[pointer][1];
          pointer++;
          break;
        case DIFF_EQUAL:
          // Upon reaching an equality, check for prior redundancies.
          if (count_delete + count_insert > 1) {
            if (count_delete !== 0 && count_insert !== 0) {
              // Factor out any common prefixies.
              commonlength = diff_commonPrefix(text_insert, text_delete);
              if (commonlength !== 0) {
                if ((pointer - count_delete - count_insert) > 0 &&
                    diffs[pointer - count_delete - count_insert - 1][0] ==
                    DIFF_EQUAL) {
                  diffs[pointer - count_delete - count_insert - 1][1] +=
                      text_insert.substring(0, commonlength);
                } else {
                  diffs.splice(0, 0, [DIFF_EQUAL,
                                      text_insert.substring(0, commonlength)]);
                  pointer++;
                }
                text_insert = text_insert.substring(commonlength);
                text_delete = text_delete.substring(commonlength);
              }
              // Factor out any common suffixies.
              commonlength = diff_commonSuffix(text_insert, text_delete);
              if (commonlength !== 0) {
                diffs[pointer][1] = text_insert.substring(text_insert.length -
                    commonlength) + diffs[pointer][1];
                text_insert = text_insert.substring(0, text_insert.length -
                    commonlength);
                text_delete = text_delete.substring(0, text_delete.length -
                    commonlength);
              }
            }
            // Delete the offending records and add the merged ones.
            if (count_delete === 0) {
              diffs.splice(pointer - count_insert,
                  count_delete + count_insert, [DIFF_INSERT, text_insert]);
            } else if (count_insert === 0) {
              diffs.splice(pointer - count_delete,
                  count_delete + count_insert, [DIFF_DELETE, text_delete]);
            } else {
              diffs.splice(pointer - count_delete - count_insert,
                  count_delete + count_insert, [DIFF_DELETE, text_delete],
                  [DIFF_INSERT, text_insert]);
            }
            pointer = pointer - count_delete - count_insert +
                      (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;
          } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {
            // Merge this equality with the previous one.
            diffs[pointer - 1][1] += diffs[pointer][1];
            diffs.splice(pointer, 1);
          } else {
            pointer++;
          }
          count_insert = 0;
          count_delete = 0;
          text_delete = '';
          text_insert = '';
          break;
      }
    }
    if (diffs[diffs.length - 1][1] === '') {
      diffs.pop();  // Remove the dummy entry at the end.
    }

    // Second pass: look for single edits surrounded on both sides by equalities
    // which can be shifted sideways to eliminate an equality.
    // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC
    var changes = false;
    pointer = 1;
    // Intentionally ignore the first and last element (don't need checking).
    while (pointer < diffs.length - 1) {
      if (diffs[pointer - 1][0] == DIFF_EQUAL &&
          diffs[pointer + 1][0] == DIFF_EQUAL) {
        // This is a single edit surrounded by equalities.
        if (diffs[pointer][1].substring(diffs[pointer][1].length -
            diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {
          // Shift the edit over the previous equality.
          diffs[pointer][1] = diffs[pointer - 1][1] +
              diffs[pointer][1].substring(0, diffs[pointer][1].length -
                                          diffs[pointer - 1][1].length);
          diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
          diffs.splice(pointer - 1, 1);
          changes = true;
        } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==
            diffs[pointer + 1][1]) {
          // Shift the edit over the next equality.
          diffs[pointer - 1][1] += diffs[pointer + 1][1];
          diffs[pointer][1] =
              diffs[pointer][1].substring(diffs[pointer + 1][1].length) +
              diffs[pointer + 1][1];
          diffs.splice(pointer + 1, 1);
          changes = true;
        }
      }
      pointer++;
    }
    // If shifts were made, the diff needs reordering and another shift sweep.
    if (changes) {
      diff_cleanupMerge(diffs);
    }
  }

  var diff = diff_main;
  diff.INSERT = DIFF_INSERT;
  diff.DELETE = DIFF_DELETE;
  diff.EQUAL = DIFF_EQUAL;

  module.exports = diff;

  /*
   * Modify a diff such that the cursor position points to the start of a change:
   * E.g.
   *   cursor_normalize_diff([[DIFF_EQUAL, 'abc']], 1)
   *     => [1, [[DIFF_EQUAL, 'a'], [DIFF_EQUAL, 'bc']]]
   *   cursor_normalize_diff([[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xyz']], 2)
   *     => [2, [[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xy'], [DIFF_DELETE, 'z']]]
   *
   * @param {Array} diffs Array of diff tuples
   * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!
   * @return {Array} A tuple [cursor location in the modified diff, modified diff]
   */
  function cursor_normalize_diff (diffs, cursor_pos) {
    if (cursor_pos === 0) {
      return [DIFF_EQUAL, diffs];
    }
    for (var current_pos = 0, i = 0; i < diffs.length; i++) {
      var d = diffs[i];
      if (d[0] === DIFF_DELETE || d[0] === DIFF_EQUAL) {
        var next_pos = current_pos + d[1].length;
        if (cursor_pos === next_pos) {
          return [i + 1, diffs];
        } else if (cursor_pos < next_pos) {
          // copy to prevent side effects
          diffs = diffs.slice();
          // split d into two diff changes
          var split_pos = cursor_pos - current_pos;
          var d_left = [d[0], d[1].slice(0, split_pos)];
          var d_right = [d[0], d[1].slice(split_pos)];
          diffs.splice(i, 1, d_left, d_right);
          return [i + 1, diffs];
        } else {
          current_pos = next_pos;
        }
      }
    }
    throw new Error('cursor_pos is out of bounds!')
  }

  /*
   * Modify a diff such that the edit position is "shifted" to the proposed edit location (cursor_position).
   *
   * Case 1)
   *   Check if a naive shift is possible:
   *     [0, X], [ 1, Y] -> [ 1, Y], [0, X]    (if X + Y === Y + X)
   *     [0, X], [-1, Y] -> [-1, Y], [0, X]    (if X + Y === Y + X) - holds same result
   * Case 2)
   *   Check if the following shifts are possible:
   *     [0, 'pre'], [ 1, 'prefix'] -> [ 1, 'pre'], [0, 'pre'], [ 1, 'fix']
   *     [0, 'pre'], [-1, 'prefix'] -> [-1, 'pre'], [0, 'pre'], [-1, 'fix']
   *         ^            ^
   *         d          d_next
   *
   * @param {Array} diffs Array of diff tuples
   * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!
   * @return {Array} Array of diff tuples
   */
  function fix_cursor (diffs, cursor_pos) {
    var norm = cursor_normalize_diff(diffs, cursor_pos);
    var ndiffs = norm[1];
    var cursor_pointer = norm[0];
    var d = ndiffs[cursor_pointer];
    var d_next = ndiffs[cursor_pointer + 1];

    if (d == null) {
      // Text was deleted from end of original string,
      // cursor is now out of bounds in new string
      return diffs;
    } else if (d[0] !== DIFF_EQUAL) {
      // A modification happened at the cursor location.
      // This is the expected outcome, so we can return the original diff.
      return diffs;
    } else {
      if (d_next != null && d[1] + d_next[1] === d_next[1] + d[1]) {
        // Case 1)
        // It is possible to perform a naive shift
        ndiffs.splice(cursor_pointer, 2, d_next, d);
        return merge_tuples(ndiffs, cursor_pointer, 2)
      } else if (d_next != null && d_next[1].indexOf(d[1]) === 0) {
        // Case 2)
        // d[1] is a prefix of d_next[1]
        // We can assume that d_next[0] !== 0, since d[0] === 0
        // Shift edit locations..
        ndiffs.splice(cursor_pointer, 2, [d_next[0], d[1]], [0, d[1]]);
        var suffix = d_next[1].slice(d[1].length);
        if (suffix.length > 0) {
          ndiffs.splice(cursor_pointer + 2, 0, [d_next[0], suffix]);
        }
        return merge_tuples(ndiffs, cursor_pointer, 3)
      } else {
        // Not possible to perform any modification
        return diffs;
      }
    }
  }

  /*
   * Check diff did not split surrogate pairs.
   * Ex. [0, '\uD83D'], [-1, '\uDC36'], [1, '\uDC2F'] -> [-1, '\uD83D\uDC36'], [1, '\uD83D\uDC2F']
   *     '\uD83D\uDC36' === '🐶', '\uD83D\uDC2F' === '🐯'
   *
   * @param {Array} diffs Array of diff tuples
   * @return {Array} Array of diff tuples
   */
  function fix_emoji (diffs) {
    var compact = false;
    var starts_with_pair_end = function(str) {
      return str.charCodeAt(0) >= 0xDC00 && str.charCodeAt(0) <= 0xDFFF;
    };
    var ends_with_pair_start = function(str) {
      return str.charCodeAt(str.length-1) >= 0xD800 && str.charCodeAt(str.length-1) <= 0xDBFF;
    };
    for (var i = 2; i < diffs.length; i += 1) {
      if (diffs[i-2][0] === DIFF_EQUAL && ends_with_pair_start(diffs[i-2][1]) &&
          diffs[i-1][0] === DIFF_DELETE && starts_with_pair_end(diffs[i-1][1]) &&
          diffs[i][0] === DIFF_INSERT && starts_with_pair_end(diffs[i][1])) {
        compact = true;

        diffs[i-1][1] = diffs[i-2][1].slice(-1) + diffs[i-1][1];
        diffs[i][1] = diffs[i-2][1].slice(-1) + diffs[i][1];

        diffs[i-2][1] = diffs[i-2][1].slice(0, -1);
      }
    }
    if (!compact) {
      return diffs;
    }
    var fixed_diffs = [];
    for (var i = 0; i < diffs.length; i += 1) {
      if (diffs[i][1].length > 0) {
        fixed_diffs.push(diffs[i]);
      }
    }
    return fixed_diffs;
  }

  /*
   * Try to merge tuples with their neigbors in a given range.
   * E.g. [0, 'a'], [0, 'b'] -> [0, 'ab']
   *
   * @param {Array} diffs Array of diff tuples.
   * @param {Int} start Position of the first element to merge (diffs[start] is also merged with diffs[start - 1]).
   * @param {Int} length Number of consecutive elements to check.
   * @return {Array} Array of merged diff tuples.
   */
  function merge_tuples (diffs, start, length) {
    // Check from (start-1) to (start+length).
    for (var i = start + length - 1; i >= 0 && i >= start - 1; i--) {
      if (i + 1 < diffs.length) {
        var left_d = diffs[i];
        var right_d = diffs[i+1];
        if (left_d[0] === right_d[1]) {
          diffs.splice(i, 2, [left_d[0], left_d[1] + right_d[1]]);
        }
      }
    }
    return diffs;
  }


  /***/ }),
  /* 52 */
  /***/ (function(module, exports) {

  exports = module.exports = typeof Object.keys === 'function'
    ? Object.keys : shim;

  exports.shim = shim;
  function shim (obj) {
    var keys = [];
    for (var key in obj) keys.push(key);
    return keys;
  }


  /***/ }),
  /* 53 */
  /***/ (function(module, exports) {

  var supportsArgumentsClass = (function(){
    return Object.prototype.toString.call(arguments)
  })() == '[object Arguments]';

  exports = module.exports = supportsArgumentsClass ? supported : unsupported;

  exports.supported = supported;
  function supported(object) {
    return Object.prototype.toString.call(object) == '[object Arguments]';
  }
  exports.unsupported = unsupported;
  function unsupported(object){
    return object &&
      typeof object == 'object' &&
      typeof object.length == 'number' &&
      Object.prototype.hasOwnProperty.call(object, 'callee') &&
      !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
      false;
  }

  /***/ }),
  /* 54 */
  /***/ (function(module, exports) {

  var has = Object.prototype.hasOwnProperty
    , prefix = '~';

  /**
   * Constructor to create a storage for our `EE` objects.
   * An `Events` instance is a plain object whose properties are event names.
   *
   * @constructor
   * @api private
   */
  function Events() {}

  //
  // We try to not inherit from `Object.prototype`. In some engines creating an
  // instance in this way is faster than calling `Object.create(null)` directly.
  // If `Object.create(null)` is not supported we prefix the event names with a
  // character to make sure that the built-in object properties are not
  // overridden or used as an attack vector.
  //
  if (Object.create) {
    Events.prototype = Object.create(null);

    //
    // This hack is needed because the `__proto__` property is still inherited in
    // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
    //
    if (!new Events().__proto__) prefix = false;
  }

  /**
   * Representation of a single event listener.
   *
   * @param {Function} fn The listener function.
   * @param {Mixed} context The context to invoke the listener with.
   * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
   * @constructor
   * @api private
   */
  function EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
  }

  /**
   * Minimal `EventEmitter` interface that is molded against the Node.js
   * `EventEmitter` interface.
   *
   * @constructor
   * @api public
   */
  function EventEmitter() {
    this._events = new Events();
    this._eventsCount = 0;
  }

  /**
   * Return an array listing the events for which the emitter has registered
   * listeners.
   *
   * @returns {Array}
   * @api public
   */
  EventEmitter.prototype.eventNames = function eventNames() {
    var names = []
      , events
      , name;

    if (this._eventsCount === 0) return names;

    for (name in (events = this._events)) {
      if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
    }

    if (Object.getOwnPropertySymbols) {
      return names.concat(Object.getOwnPropertySymbols(events));
    }

    return names;
  };

  /**
   * Return the listeners registered for a given event.
   *
   * @param {String|Symbol} event The event name.
   * @param {Boolean} exists Only check if there are listeners.
   * @returns {Array|Boolean}
   * @api public
   */
  EventEmitter.prototype.listeners = function listeners(event, exists) {
    var evt = prefix ? prefix + event : event
      , available = this._events[evt];

    if (exists) return !!available;
    if (!available) return [];
    if (available.fn) return [available.fn];

    for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
      ee[i] = available[i].fn;
    }

    return ee;
  };

  /**
   * Calls each of the listeners registered for a given event.
   *
   * @param {String|Symbol} event The event name.
   * @returns {Boolean} `true` if the event had listeners, else `false`.
   * @api public
   */
  EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = prefix ? prefix + event : event;

    if (!this._events[evt]) return false;

    var listeners = this._events[evt]
      , len = arguments.length
      , args
      , i;

    if (listeners.fn) {
      if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

      switch (len) {
        case 1: return listeners.fn.call(listeners.context), true;
        case 2: return listeners.fn.call(listeners.context, a1), true;
        case 3: return listeners.fn.call(listeners.context, a1, a2), true;
        case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
        case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
        case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
      }

      for (i = 1, args = new Array(len -1); i < len; i++) {
        args[i - 1] = arguments[i];
      }

      listeners.fn.apply(listeners.context, args);
    } else {
      var length = listeners.length
        , j;

      for (i = 0; i < length; i++) {
        if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

        switch (len) {
          case 1: listeners[i].fn.call(listeners[i].context); break;
          case 2: listeners[i].fn.call(listeners[i].context, a1); break;
          case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
          case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
          default:
            if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
              args[j - 1] = arguments[j];
            }

            listeners[i].fn.apply(listeners[i].context, args);
        }
      }
    }

    return true;
  };

  /**
   * Add a listener for a given event.
   *
   * @param {String|Symbol} event The event name.
   * @param {Function} fn The listener function.
   * @param {Mixed} [context=this] The context to invoke the listener with.
   * @returns {EventEmitter} `this`.
   * @api public
   */
  EventEmitter.prototype.on = function on(event, fn, context) {
    var listener = new EE(fn, context || this)
      , evt = prefix ? prefix + event : event;

    if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;
    else if (!this._events[evt].fn) this._events[evt].push(listener);
    else this._events[evt] = [this._events[evt], listener];

    return this;
  };

  /**
   * Add a one-time listener for a given event.
   *
   * @param {String|Symbol} event The event name.
   * @param {Function} fn The listener function.
   * @param {Mixed} [context=this] The context to invoke the listener with.
   * @returns {EventEmitter} `this`.
   * @api public
   */
  EventEmitter.prototype.once = function once(event, fn, context) {
    var listener = new EE(fn, context || this, true)
      , evt = prefix ? prefix + event : event;

    if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;
    else if (!this._events[evt].fn) this._events[evt].push(listener);
    else this._events[evt] = [this._events[evt], listener];

    return this;
  };

  /**
   * Remove the listeners of a given event.
   *
   * @param {String|Symbol} event The event name.
   * @param {Function} fn Only remove the listeners that match this function.
   * @param {Mixed} context Only remove the listeners that have this context.
   * @param {Boolean} once Only remove one-time listeners.
   * @returns {EventEmitter} `this`.
   * @api public
   */
  EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix ? prefix + event : event;

    if (!this._events[evt]) return this;
    if (!fn) {
      if (--this._eventsCount === 0) this._events = new Events();
      else delete this._events[evt];
      return this;
    }

    var listeners = this._events[evt];

    if (listeners.fn) {
      if (
           listeners.fn === fn
        && (!once || listeners.once)
        && (!context || listeners.context === context)
      ) {
        if (--this._eventsCount === 0) this._events = new Events();
        else delete this._events[evt];
      }
    } else {
      for (var i = 0, events = [], length = listeners.length; i < length; i++) {
        if (
             listeners[i].fn !== fn
          || (once && !listeners[i].once)
          || (context && listeners[i].context !== context)
        ) {
          events.push(listeners[i]);
        }
      }

      //
      // Reset the array, or remove it completely if we have no more listeners.
      //
      if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
      else if (--this._eventsCount === 0) this._events = new Events();
      else delete this._events[evt];
    }

    return this;
  };

  /**
   * Remove all listeners, or those of the specified event.
   *
   * @param {String|Symbol} [event] The event name.
   * @returns {EventEmitter} `this`.
   * @api public
   */
  EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    var evt;

    if (event) {
      evt = prefix ? prefix + event : event;
      if (this._events[evt]) {
        if (--this._eventsCount === 0) this._events = new Events();
        else delete this._events[evt];
      }
    } else {
      this._events = new Events();
      this._eventsCount = 0;
    }

    return this;
  };

  //
  // Alias methods names because people roll like that.
  //
  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  EventEmitter.prototype.addListener = EventEmitter.prototype.on;

  //
  // This function doesn't apply anymore.
  //
  EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
    return this;
  };

  //
  // Expose the prefix.
  //
  EventEmitter.prefixed = prefix;

  //
  // Allow `EventEmitter` to be imported as module namespace.
  //
  EventEmitter.EventEmitter = EventEmitter;

  //
  // Expose the module.
  //
  if ('undefined' !== typeof module) {
    module.exports = EventEmitter;
  }


  /***/ }),
  /* 55 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.matchText = exports.matchSpacing = exports.matchNewline = exports.matchBlot = exports.matchAttributor = exports.default = undefined;

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _extend2 = __webpack_require__(3);

  var _extend3 = _interopRequireDefault(_extend2);

  var _quillDelta = __webpack_require__(2);

  var _quillDelta2 = _interopRequireDefault(_quillDelta);

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _quill = __webpack_require__(5);

  var _quill2 = _interopRequireDefault(_quill);

  var _logger = __webpack_require__(10);

  var _logger2 = _interopRequireDefault(_logger);

  var _module = __webpack_require__(9);

  var _module2 = _interopRequireDefault(_module);

  var _align = __webpack_require__(36);

  var _background = __webpack_require__(37);

  var _code = __webpack_require__(13);

  var _code2 = _interopRequireDefault(_code);

  var _color = __webpack_require__(26);

  var _direction = __webpack_require__(38);

  var _font = __webpack_require__(39);

  var _size = __webpack_require__(40);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var debug = (0, _logger2.default)('quill:clipboard');

  var DOM_KEY = '__ql-matcher';

  var CLIPBOARD_CONFIG = [[Node.TEXT_NODE, matchText], [Node.TEXT_NODE, matchNewline], ['br', matchBreak], [Node.ELEMENT_NODE, matchNewline], [Node.ELEMENT_NODE, matchBlot], [Node.ELEMENT_NODE, matchSpacing], [Node.ELEMENT_NODE, matchAttributor], [Node.ELEMENT_NODE, matchStyles], ['li', matchIndent], ['b', matchAlias.bind(matchAlias, 'bold')], ['i', matchAlias.bind(matchAlias, 'italic')], ['style', matchIgnore]];

  var ATTRIBUTE_ATTRIBUTORS = [_align.AlignAttribute, _direction.DirectionAttribute].reduce(function (memo, attr) {
    memo[attr.keyName] = attr;
    return memo;
  }, {});

  var STYLE_ATTRIBUTORS = [_align.AlignStyle, _background.BackgroundStyle, _color.ColorStyle, _direction.DirectionStyle, _font.FontStyle, _size.SizeStyle].reduce(function (memo, attr) {
    memo[attr.keyName] = attr;
    return memo;
  }, {});

  var Clipboard = function (_Module) {
    _inherits(Clipboard, _Module);

    function Clipboard(quill, options) {
      _classCallCheck(this, Clipboard);

      var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this, quill, options));

      _this.quill.root.addEventListener('paste', _this.onPaste.bind(_this));
      _this.container = _this.quill.addContainer('ql-clipboard');
      _this.container.setAttribute('contenteditable', true);
      _this.container.setAttribute('tabindex', -1);
      _this.matchers = [];
      CLIPBOARD_CONFIG.concat(_this.options.matchers).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            selector = _ref2[0],
            matcher = _ref2[1];

        if (!options.matchVisual && matcher === matchSpacing) return;
        _this.addMatcher(selector, matcher);
      });
      return _this;
    }

    _createClass(Clipboard, [{
      key: 'addMatcher',
      value: function addMatcher(selector, matcher) {
        this.matchers.push([selector, matcher]);
      }
    }, {
      key: 'convert',
      value: function convert(html) {
        if (typeof html === 'string') {
          this.container.innerHTML = html.replace(/\>\r?\n +\</g, '><'); // Remove spaces between tags
          return this.convert();
        }
        var formats = this.quill.getFormat(this.quill.selection.savedRange.index);
        if (formats[_code2.default.blotName]) {
          var text = this.container.innerText;
          this.container.innerHTML = '';
          return new _quillDelta2.default().insert(text, _defineProperty({}, _code2.default.blotName, formats[_code2.default.blotName]));
        }

        var _prepareMatching = this.prepareMatching(),
            _prepareMatching2 = _slicedToArray(_prepareMatching, 2),
            elementMatchers = _prepareMatching2[0],
            textMatchers = _prepareMatching2[1];

        var delta = traverse(this.container, elementMatchers, textMatchers);
        // Remove trailing newline
        if (deltaEndsWith(delta, '\n') && delta.ops[delta.ops.length - 1].attributes == null) {
          delta = delta.compose(new _quillDelta2.default().retain(delta.length() - 1).delete(1));
        }
        debug.log('convert', this.container.innerHTML, delta);
        this.container.innerHTML = '';
        return delta;
      }
    }, {
      key: 'dangerouslyPasteHTML',
      value: function dangerouslyPasteHTML(index, html) {
        var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _quill2.default.sources.API;

        if (typeof index === 'string') {
          this.quill.setContents(this.convert(index), html);
          this.quill.setSelection(0, _quill2.default.sources.SILENT);
        } else {
          var paste = this.convert(html);
          this.quill.updateContents(new _quillDelta2.default().retain(index).concat(paste), source);
          this.quill.setSelection(index + paste.length(), _quill2.default.sources.SILENT);
        }
      }
    }, {
      key: 'onPaste',
      value: function onPaste(e) {
        var _this2 = this;

        if (e.defaultPrevented || !this.quill.isEnabled()) return;
        var range = this.quill.getSelection();
        var delta = new _quillDelta2.default().retain(range.index);
        var scrollTop = this.quill.scrollingContainer.scrollTop;
        this.container.focus();
        this.quill.selection.update(_quill2.default.sources.SILENT);
        setTimeout(function () {
          delta = delta.concat(_this2.convert()).delete(range.length);
          _this2.quill.updateContents(delta, _quill2.default.sources.USER);
          // range.length contributes to delta.length()
          _this2.quill.setSelection(delta.length() - range.length, _quill2.default.sources.SILENT);
          _this2.quill.scrollingContainer.scrollTop = scrollTop;
          _this2.quill.focus();
        }, 1);
      }
    }, {
      key: 'prepareMatching',
      value: function prepareMatching() {
        var _this3 = this;

        var elementMatchers = [],
            textMatchers = [];
        this.matchers.forEach(function (pair) {
          var _pair = _slicedToArray(pair, 2),
              selector = _pair[0],
              matcher = _pair[1];

          switch (selector) {
            case Node.TEXT_NODE:
              textMatchers.push(matcher);
              break;
            case Node.ELEMENT_NODE:
              elementMatchers.push(matcher);
              break;
            default:
              [].forEach.call(_this3.container.querySelectorAll(selector), function (node) {
                // TODO use weakmap
                node[DOM_KEY] = node[DOM_KEY] || [];
                node[DOM_KEY].push(matcher);
              });
              break;
          }
        });
        return [elementMatchers, textMatchers];
      }
    }]);

    return Clipboard;
  }(_module2.default);

  Clipboard.DEFAULTS = {
    matchers: [],
    matchVisual: true
  };

  function applyFormat(delta, format, value) {
    if ((typeof format === 'undefined' ? 'undefined' : _typeof(format)) === 'object') {
      return Object.keys(format).reduce(function (delta, key) {
        return applyFormat(delta, key, format[key]);
      }, delta);
    } else {
      return delta.reduce(function (delta, op) {
        if (op.attributes && op.attributes[format]) {
          return delta.push(op);
        } else {
          return delta.insert(op.insert, (0, _extend3.default)({}, _defineProperty({}, format, value), op.attributes));
        }
      }, new _quillDelta2.default());
    }
  }

  function computeStyle(node) {
    if (node.nodeType !== Node.ELEMENT_NODE) return {};
    var DOM_KEY = '__ql-computed-style';
    return node[DOM_KEY] || (node[DOM_KEY] = window.getComputedStyle(node));
  }

  function deltaEndsWith(delta, text) {
    var endText = "";
    for (var i = delta.ops.length - 1; i >= 0 && endText.length < text.length; --i) {
      var op = delta.ops[i];
      if (typeof op.insert !== 'string') break;
      endText = op.insert + endText;
    }
    return endText.slice(-1 * text.length) === text;
  }

  function isLine(node) {
    if (node.childNodes.length === 0) return false; // Exclude embed blocks
    var style = computeStyle(node);
    return ['block', 'list-item'].indexOf(style.display) > -1;
  }

  function traverse(node, elementMatchers, textMatchers) {
    // Post-order
    if (node.nodeType === node.TEXT_NODE) {
      return textMatchers.reduce(function (delta, matcher) {
        return matcher(node, delta);
      }, new _quillDelta2.default());
    } else if (node.nodeType === node.ELEMENT_NODE) {
      return [].reduce.call(node.childNodes || [], function (delta, childNode) {
        var childrenDelta = traverse(childNode, elementMatchers, textMatchers);
        if (childNode.nodeType === node.ELEMENT_NODE) {
          childrenDelta = elementMatchers.reduce(function (childrenDelta, matcher) {
            return matcher(childNode, childrenDelta);
          }, childrenDelta);
          childrenDelta = (childNode[DOM_KEY] || []).reduce(function (childrenDelta, matcher) {
            return matcher(childNode, childrenDelta);
          }, childrenDelta);
        }
        return delta.concat(childrenDelta);
      }, new _quillDelta2.default());
    } else {
      return new _quillDelta2.default();
    }
  }

  function matchAlias(format, node, delta) {
    return applyFormat(delta, format, true);
  }

  function matchAttributor(node, delta) {
    var attributes = _parchment2.default.Attributor.Attribute.keys(node);
    var classes = _parchment2.default.Attributor.Class.keys(node);
    var styles = _parchment2.default.Attributor.Style.keys(node);
    var formats = {};
    attributes.concat(classes).concat(styles).forEach(function (name) {
      var attr = _parchment2.default.query(name, _parchment2.default.Scope.ATTRIBUTE);
      if (attr != null) {
        formats[attr.attrName] = attr.value(node);
        if (formats[attr.attrName]) return;
      }
      attr = ATTRIBUTE_ATTRIBUTORS[name];
      if (attr != null && (attr.attrName === name || attr.keyName === name)) {
        formats[attr.attrName] = attr.value(node) || undefined;
      }
      attr = STYLE_ATTRIBUTORS[name];
      if (attr != null && (attr.attrName === name || attr.keyName === name)) {
        attr = STYLE_ATTRIBUTORS[name];
        formats[attr.attrName] = attr.value(node) || undefined;
      }
    });
    if (Object.keys(formats).length > 0) {
      delta = applyFormat(delta, formats);
    }
    return delta;
  }

  function matchBlot(node, delta) {
    var match = _parchment2.default.query(node);
    if (match == null) return delta;
    if (match.prototype instanceof _parchment2.default.Embed) {
      var embed = {};
      var value = match.value(node);
      if (value != null) {
        embed[match.blotName] = value;
        delta = new _quillDelta2.default().insert(embed, match.formats(node));
      }
    } else if (typeof match.formats === 'function') {
      delta = applyFormat(delta, match.blotName, match.formats(node));
    }
    return delta;
  }

  function matchBreak(node, delta) {
    if (!deltaEndsWith(delta, '\n')) {
      delta.insert('\n');
    }
    return delta;
  }

  function matchIgnore() {
    return new _quillDelta2.default();
  }

  function matchIndent(node, delta) {
    var match = _parchment2.default.query(node);
    if (match == null || match.blotName !== 'list-item' || !deltaEndsWith(delta, '\n')) {
      return delta;
    }
    var indent = -1,
        parent = node.parentNode;
    while (!parent.classList.contains('ql-clipboard')) {
      if ((_parchment2.default.query(parent) || {}).blotName === 'list') {
        indent += 1;
      }
      parent = parent.parentNode;
    }
    if (indent <= 0) return delta;
    return delta.compose(new _quillDelta2.default().retain(delta.length() - 1).retain(1, { indent: indent }));
  }

  function matchNewline(node, delta) {
    if (!deltaEndsWith(delta, '\n')) {
      if (isLine(node) || delta.length() > 0 && node.nextSibling && isLine(node.nextSibling)) {
        delta.insert('\n');
      }
    }
    return delta;
  }

  function matchSpacing(node, delta) {
    if (isLine(node) && node.nextElementSibling != null && !deltaEndsWith(delta, '\n\n')) {
      var nodeHeight = node.offsetHeight + parseFloat(computeStyle(node).marginTop) + parseFloat(computeStyle(node).marginBottom);
      if (node.nextElementSibling.offsetTop > node.offsetTop + nodeHeight * 1.5) {
        delta.insert('\n');
      }
    }
    return delta;
  }

  function matchStyles(node, delta) {
    var formats = {};
    var style = node.style || {};
    if (style.fontStyle && computeStyle(node).fontStyle === 'italic') {
      formats.italic = true;
    }
    if (style.fontWeight && (computeStyle(node).fontWeight.startsWith('bold') || parseInt(computeStyle(node).fontWeight) >= 700)) {
      formats.bold = true;
    }
    if (Object.keys(formats).length > 0) {
      delta = applyFormat(delta, formats);
    }
    if (parseFloat(style.textIndent || 0) > 0) {
      // Could be 0.5in
      delta = new _quillDelta2.default().insert('\t').concat(delta);
    }
    return delta;
  }

  function matchText(node, delta) {
    var text = node.data;
    // Word represents empty line with <o:p>&nbsp;</o:p>
    if (node.parentNode.tagName === 'O:P') {
      return delta.insert(text.trim());
    }
    if (text.trim().length === 0 && node.parentNode.classList.contains('ql-clipboard')) {
      return delta;
    }
    if (!computeStyle(node.parentNode).whiteSpace.startsWith('pre')) {
      // eslint-disable-next-line func-style
      var replacer = function replacer(collapse, match) {
        match = match.replace(/[^\u00a0]/g, ''); // \u00a0 is nbsp;
        return match.length < 1 && collapse ? ' ' : match;
      };
      text = text.replace(/\r\n/g, ' ').replace(/\n/g, ' ');
      text = text.replace(/\s\s+/g, replacer.bind(replacer, true)); // collapse whitespace
      if (node.previousSibling == null && isLine(node.parentNode) || node.previousSibling != null && isLine(node.previousSibling)) {
        text = text.replace(/^\s+/, replacer.bind(replacer, false));
      }
      if (node.nextSibling == null && isLine(node.parentNode) || node.nextSibling != null && isLine(node.nextSibling)) {
        text = text.replace(/\s+$/, replacer.bind(replacer, false));
      }
    }
    return delta.insert(text);
  }

  exports.default = Clipboard;
  exports.matchAttributor = matchAttributor;
  exports.matchBlot = matchBlot;
  exports.matchNewline = matchNewline;
  exports.matchSpacing = matchSpacing;
  exports.matchText = matchText;

  /***/ }),
  /* 56 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _inline = __webpack_require__(6);

  var _inline2 = _interopRequireDefault(_inline);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Bold = function (_Inline) {
    _inherits(Bold, _Inline);

    function Bold() {
      _classCallCheck(this, Bold);

      return _possibleConstructorReturn(this, (Bold.__proto__ || Object.getPrototypeOf(Bold)).apply(this, arguments));
    }

    _createClass(Bold, [{
      key: 'optimize',
      value: function optimize(context) {
        _get(Bold.prototype.__proto__ || Object.getPrototypeOf(Bold.prototype), 'optimize', this).call(this, context);
        if (this.domNode.tagName !== this.statics.tagName[0]) {
          this.replaceWith(this.statics.blotName);
        }
      }
    }], [{
      key: 'create',
      value: function create() {
        return _get(Bold.__proto__ || Object.getPrototypeOf(Bold), 'create', this).call(this);
      }
    }, {
      key: 'formats',
      value: function formats() {
        return true;
      }
    }]);

    return Bold;
  }(_inline2.default);

  Bold.blotName = 'bold';
  Bold.tagName = ['STRONG', 'B'];

  exports.default = Bold;

  /***/ }),
  /* 57 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.addControls = exports.default = undefined;

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _quillDelta = __webpack_require__(2);

  var _quillDelta2 = _interopRequireDefault(_quillDelta);

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _quill = __webpack_require__(5);

  var _quill2 = _interopRequireDefault(_quill);

  var _logger = __webpack_require__(10);

  var _logger2 = _interopRequireDefault(_logger);

  var _module = __webpack_require__(9);

  var _module2 = _interopRequireDefault(_module);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var debug = (0, _logger2.default)('quill:toolbar');

  var Toolbar = function (_Module) {
    _inherits(Toolbar, _Module);

    function Toolbar(quill, options) {
      _classCallCheck(this, Toolbar);

      var _this = _possibleConstructorReturn(this, (Toolbar.__proto__ || Object.getPrototypeOf(Toolbar)).call(this, quill, options));

      if (Array.isArray(_this.options.container)) {
        var container = document.createElement('div');
        addControls(container, _this.options.container);
        quill.container.parentNode.insertBefore(container, quill.container);
        _this.container = container;
      } else if (typeof _this.options.container === 'string') {
        _this.container = document.querySelector(_this.options.container);
      } else {
        _this.container = _this.options.container;
      }
      if (!(_this.container instanceof HTMLElement)) {
        var _ret;

        return _ret = debug.error('Container required for toolbar', _this.options), _possibleConstructorReturn(_this, _ret);
      }
      _this.container.classList.add('ql-toolbar');
      _this.controls = [];
      _this.handlers = {};
      Object.keys(_this.options.handlers).forEach(function (format) {
        _this.addHandler(format, _this.options.handlers[format]);
      });
      [].forEach.call(_this.container.querySelectorAll('button, select'), function (input) {
        _this.attach(input);
      });
      _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function (type, range) {
        if (type === _quill2.default.events.SELECTION_CHANGE) {
          _this.update(range);
        }
      });
      _this.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function () {
        var _this$quill$selection = _this.quill.selection.getRange(),
            _this$quill$selection2 = _slicedToArray(_this$quill$selection, 1),
            range = _this$quill$selection2[0]; // quill.getSelection triggers update


        _this.update(range);
      });
      return _this;
    }

    _createClass(Toolbar, [{
      key: 'addHandler',
      value: function addHandler(format, handler) {
        this.handlers[format] = handler;
      }
    }, {
      key: 'attach',
      value: function attach(input) {
        var _this2 = this;

        var format = [].find.call(input.classList, function (className) {
          return className.indexOf('ql-') === 0;
        });
        if (!format) return;
        format = format.slice('ql-'.length);
        if (input.tagName === 'BUTTON') {
          input.setAttribute('type', 'button');
        }
        if (this.handlers[format] == null) {
          if (this.quill.scroll.whitelist != null && this.quill.scroll.whitelist[format] == null) {
            debug.warn('ignoring attaching to disabled format', format, input);
            return;
          }
          if (_parchment2.default.query(format) == null) {
            debug.warn('ignoring attaching to nonexistent format', format, input);
            return;
          }
        }
        var eventName = input.tagName === 'SELECT' ? 'change' : 'click';
        input.addEventListener(eventName, function (e) {
          var value = void 0;
          if (input.tagName === 'SELECT') {
            if (input.selectedIndex < 0) return;
            var selected = input.options[input.selectedIndex];
            if (selected.hasAttribute('selected')) {
              value = false;
            } else {
              value = selected.value || false;
            }
          } else {
            if (input.classList.contains('ql-active')) {
              value = false;
            } else {
              value = input.value || !input.hasAttribute('value');
            }
            e.preventDefault();
          }
          _this2.quill.focus();

          var _quill$selection$getR = _this2.quill.selection.getRange(),
              _quill$selection$getR2 = _slicedToArray(_quill$selection$getR, 1),
              range = _quill$selection$getR2[0];

          if (_this2.handlers[format] != null) {
            _this2.handlers[format].call(_this2, value);
          } else if (_parchment2.default.query(format).prototype instanceof _parchment2.default.Embed) {
            value = prompt('Enter ' + format);
            if (!value) return;
            _this2.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert(_defineProperty({}, format, value)), _quill2.default.sources.USER);
          } else {
            _this2.quill.format(format, value, _quill2.default.sources.USER);
          }
          _this2.update(range);
        });
        // TODO use weakmap
        this.controls.push([format, input]);
      }
    }, {
      key: 'update',
      value: function update(range) {
        var formats = range == null ? {} : this.quill.getFormat(range);
        this.controls.forEach(function (pair) {
          var _pair = _slicedToArray(pair, 2),
              format = _pair[0],
              input = _pair[1];

          if (input.tagName === 'SELECT') {
            var option = void 0;
            if (range == null) {
              option = null;
            } else if (formats[format] == null) {
              option = input.querySelector('option[selected]');
            } else if (!Array.isArray(formats[format])) {
              var value = formats[format];
              if (typeof value === 'string') {
                value = value.replace(/\"/g, '\\"');
              }
              option = input.querySelector('option[value="' + value + '"]');
            }
            if (option == null) {
              input.value = ''; // TODO make configurable?
              input.selectedIndex = -1;
            } else {
              option.selected = true;
            }
          } else {
            if (range == null) {
              input.classList.remove('ql-active');
            } else if (input.hasAttribute('value')) {
              // both being null should match (default values)
              // '1' should match with 1 (headers)
              var isActive = formats[format] === input.getAttribute('value') || formats[format] != null && formats[format].toString() === input.getAttribute('value') || formats[format] == null && !input.getAttribute('value');
              input.classList.toggle('ql-active', isActive);
            } else {
              input.classList.toggle('ql-active', formats[format] != null);
            }
          }
        });
      }
    }]);

    return Toolbar;
  }(_module2.default);

  Toolbar.DEFAULTS = {};

  function addButton(container, format, value) {
    var input = document.createElement('button');
    input.setAttribute('type', 'button');
    input.classList.add('ql-' + format);
    if (value != null) {
      input.value = value;
    }
    container.appendChild(input);
  }

  function addControls(container, groups) {
    if (!Array.isArray(groups[0])) {
      groups = [groups];
    }
    groups.forEach(function (controls) {
      var group = document.createElement('span');
      group.classList.add('ql-formats');
      controls.forEach(function (control) {
        if (typeof control === 'string') {
          addButton(group, control);
        } else {
          var format = Object.keys(control)[0];
          var value = control[format];
          if (Array.isArray(value)) {
            addSelect(group, format, value);
          } else {
            addButton(group, format, value);
          }
        }
      });
      container.appendChild(group);
    });
  }

  function addSelect(container, format, values) {
    var input = document.createElement('select');
    input.classList.add('ql-' + format);
    values.forEach(function (value) {
      var option = document.createElement('option');
      if (value !== false) {
        option.setAttribute('value', value);
      } else {
        option.setAttribute('selected', 'selected');
      }
      input.appendChild(option);
    });
    container.appendChild(input);
  }

  Toolbar.DEFAULTS = {
    container: null,
    handlers: {
      clean: function clean() {
        var _this3 = this;

        var range = this.quill.getSelection();
        if (range == null) return;
        if (range.length == 0) {
          var formats = this.quill.getFormat();
          Object.keys(formats).forEach(function (name) {
            // Clean functionality in existing apps only clean inline formats
            if (_parchment2.default.query(name, _parchment2.default.Scope.INLINE) != null) {
              _this3.quill.format(name, false);
            }
          });
        } else {
          this.quill.removeFormat(range, _quill2.default.sources.USER);
        }
      },
      direction: function direction(value) {
        var align = this.quill.getFormat()['align'];
        if (value === 'rtl' && align == null) {
          this.quill.format('align', 'right', _quill2.default.sources.USER);
        } else if (!value && align === 'right') {
          this.quill.format('align', false, _quill2.default.sources.USER);
        }
        this.quill.format('direction', value, _quill2.default.sources.USER);
      },
      indent: function indent(value) {
        var range = this.quill.getSelection();
        var formats = this.quill.getFormat(range);
        var indent = parseInt(formats.indent || 0);
        if (value === '+1' || value === '-1') {
          var modifier = value === '+1' ? 1 : -1;
          if (formats.direction === 'rtl') modifier *= -1;
          this.quill.format('indent', indent + modifier, _quill2.default.sources.USER);
        }
      },
      link: function link(value) {
        if (value === true) {
          value = prompt('Enter link URL:');
        }
        this.quill.format('link', value, _quill2.default.sources.USER);
      },
      list: function list(value) {
        var range = this.quill.getSelection();
        var formats = this.quill.getFormat(range);
        if (value === 'check') {
          if (formats['list'] === 'checked' || formats['list'] === 'unchecked') {
            this.quill.format('list', false, _quill2.default.sources.USER);
          } else {
            this.quill.format('list', 'unchecked', _quill2.default.sources.USER);
          }
        } else {
          this.quill.format('list', value, _quill2.default.sources.USER);
        }
      }
    }
  };

  exports.default = Toolbar;
  exports.addControls = addControls;

  /***/ }),
  /* 58 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <polyline class=\"ql-even ql-stroke\" points=\"5 7 3 9 5 11\"></polyline> <polyline class=\"ql-even ql-stroke\" points=\"13 7 15 9 13 11\"></polyline> <line class=ql-stroke x1=10 x2=8 y1=5 y2=13></line> </svg>";

  /***/ }),
  /* 59 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _picker = __webpack_require__(28);

  var _picker2 = _interopRequireDefault(_picker);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var ColorPicker = function (_Picker) {
    _inherits(ColorPicker, _Picker);

    function ColorPicker(select, label) {
      _classCallCheck(this, ColorPicker);

      var _this = _possibleConstructorReturn(this, (ColorPicker.__proto__ || Object.getPrototypeOf(ColorPicker)).call(this, select));

      _this.label.innerHTML = label;
      _this.container.classList.add('ql-color-picker');
      [].slice.call(_this.container.querySelectorAll('.ql-picker-item'), 0, 7).forEach(function (item) {
        item.classList.add('ql-primary');
      });
      return _this;
    }

    _createClass(ColorPicker, [{
      key: 'buildItem',
      value: function buildItem(option) {
        var item = _get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'buildItem', this).call(this, option);
        item.style.backgroundColor = option.getAttribute('value') || '';
        return item;
      }
    }, {
      key: 'selectItem',
      value: function selectItem(item, trigger) {
        _get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'selectItem', this).call(this, item, trigger);
        var colorLabel = this.label.querySelector('.ql-color-label');
        var value = item ? item.getAttribute('data-value') || '' : '';
        if (colorLabel) {
          if (colorLabel.tagName === 'line') {
            colorLabel.style.stroke = value;
          } else {
            colorLabel.style.fill = value;
          }
        }
      }
    }]);

    return ColorPicker;
  }(_picker2.default);

  exports.default = ColorPicker;

  /***/ }),
  /* 60 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _picker = __webpack_require__(28);

  var _picker2 = _interopRequireDefault(_picker);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var IconPicker = function (_Picker) {
    _inherits(IconPicker, _Picker);

    function IconPicker(select, icons) {
      _classCallCheck(this, IconPicker);

      var _this = _possibleConstructorReturn(this, (IconPicker.__proto__ || Object.getPrototypeOf(IconPicker)).call(this, select));

      _this.container.classList.add('ql-icon-picker');
      [].forEach.call(_this.container.querySelectorAll('.ql-picker-item'), function (item) {
        item.innerHTML = icons[item.getAttribute('data-value') || ''];
      });
      _this.defaultItem = _this.container.querySelector('.ql-selected');
      _this.selectItem(_this.defaultItem);
      return _this;
    }

    _createClass(IconPicker, [{
      key: 'selectItem',
      value: function selectItem(item, trigger) {
        _get(IconPicker.prototype.__proto__ || Object.getPrototypeOf(IconPicker.prototype), 'selectItem', this).call(this, item, trigger);
        item = item || this.defaultItem;
        this.label.innerHTML = item.innerHTML;
      }
    }]);

    return IconPicker;
  }(_picker2.default);

  exports.default = IconPicker;

  /***/ }),
  /* 61 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var Tooltip = function () {
    function Tooltip(quill, boundsContainer) {
      var _this = this;

      _classCallCheck(this, Tooltip);

      this.quill = quill;
      this.boundsContainer = boundsContainer || document.body;
      this.root = quill.addContainer('ql-tooltip');
      this.root.innerHTML = this.constructor.TEMPLATE;
      if (this.quill.root === this.quill.scrollingContainer) {
        this.quill.root.addEventListener('scroll', function () {
          _this.root.style.marginTop = -1 * _this.quill.root.scrollTop + 'px';
        });
      }
      this.hide();
    }

    _createClass(Tooltip, [{
      key: 'hide',
      value: function hide() {
        this.root.classList.add('ql-hidden');
      }
    }, {
      key: 'position',
      value: function position(reference) {
        var left = reference.left + reference.width / 2 - this.root.offsetWidth / 2;
        // root.scrollTop should be 0 if scrollContainer !== root
        var top = reference.bottom + this.quill.root.scrollTop;
        this.root.style.left = left + 'px';
        this.root.style.top = top + 'px';
        this.root.classList.remove('ql-flip');
        var containerBounds = this.boundsContainer.getBoundingClientRect();
        var rootBounds = this.root.getBoundingClientRect();
        var shift = 0;
        if (rootBounds.right > containerBounds.right) {
          shift = containerBounds.right - rootBounds.right;
          this.root.style.left = left + shift + 'px';
        }
        if (rootBounds.left < containerBounds.left) {
          shift = containerBounds.left - rootBounds.left;
          this.root.style.left = left + shift + 'px';
        }
        if (rootBounds.bottom > containerBounds.bottom) {
          var height = rootBounds.bottom - rootBounds.top;
          var verticalShift = reference.bottom - reference.top + height;
          this.root.style.top = top - verticalShift + 'px';
          this.root.classList.add('ql-flip');
        }
        return shift;
      }
    }, {
      key: 'show',
      value: function show() {
        this.root.classList.remove('ql-editing');
        this.root.classList.remove('ql-hidden');
      }
    }]);

    return Tooltip;
  }();

  exports.default = Tooltip;

  /***/ }),
  /* 62 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _extend = __webpack_require__(3);

  var _extend2 = _interopRequireDefault(_extend);

  var _emitter = __webpack_require__(8);

  var _emitter2 = _interopRequireDefault(_emitter);

  var _base = __webpack_require__(43);

  var _base2 = _interopRequireDefault(_base);

  var _link = __webpack_require__(27);

  var _link2 = _interopRequireDefault(_link);

  var _selection = __webpack_require__(15);

  var _icons = __webpack_require__(41);

  var _icons2 = _interopRequireDefault(_icons);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var TOOLBAR_CONFIG = [[{ header: ['1', '2', '3', false] }], ['bold', 'italic', 'underline', 'link'], [{ list: 'ordered' }, { list: 'bullet' }], ['clean']];

  var SnowTheme = function (_BaseTheme) {
    _inherits(SnowTheme, _BaseTheme);

    function SnowTheme(quill, options) {
      _classCallCheck(this, SnowTheme);

      if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
        options.modules.toolbar.container = TOOLBAR_CONFIG;
      }

      var _this = _possibleConstructorReturn(this, (SnowTheme.__proto__ || Object.getPrototypeOf(SnowTheme)).call(this, quill, options));

      _this.quill.container.classList.add('ql-snow');
      return _this;
    }

    _createClass(SnowTheme, [{
      key: 'extendToolbar',
      value: function extendToolbar(toolbar) {
        toolbar.container.classList.add('ql-snow');
        this.buildButtons([].slice.call(toolbar.container.querySelectorAll('button')), _icons2.default);
        this.buildPickers([].slice.call(toolbar.container.querySelectorAll('select')), _icons2.default);
        this.tooltip = new SnowTooltip(this.quill, this.options.bounds);
        if (toolbar.container.querySelector('.ql-link')) {
          this.quill.keyboard.addBinding({ key: 'K', shortKey: true }, function (range, context) {
            toolbar.handlers['link'].call(toolbar, !context.format.link);
          });
        }
      }
    }]);

    return SnowTheme;
  }(_base2.default);

  SnowTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {
    modules: {
      toolbar: {
        handlers: {
          link: function link(value) {
            if (value) {
              var range = this.quill.getSelection();
              if (range == null || range.length == 0) return;
              var preview = this.quill.getText(range);
              if (/^\S+@\S+\.\S+$/.test(preview) && preview.indexOf('mailto:') !== 0) {
                preview = 'mailto:' + preview;
              }
              var tooltip = this.quill.theme.tooltip;
              tooltip.edit('link', preview);
            } else {
              this.quill.format('link', false);
            }
          }
        }
      }
    }
  });

  var SnowTooltip = function (_BaseTooltip) {
    _inherits(SnowTooltip, _BaseTooltip);

    function SnowTooltip(quill, bounds) {
      _classCallCheck(this, SnowTooltip);

      var _this2 = _possibleConstructorReturn(this, (SnowTooltip.__proto__ || Object.getPrototypeOf(SnowTooltip)).call(this, quill, bounds));

      _this2.preview = _this2.root.querySelector('a.ql-preview');
      return _this2;
    }

    _createClass(SnowTooltip, [{
      key: 'listen',
      value: function listen() {
        var _this3 = this;

        _get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), 'listen', this).call(this);
        this.root.querySelector('a.ql-action').addEventListener('click', function (event) {
          if (_this3.root.classList.contains('ql-editing')) {
            _this3.save();
          } else {
            _this3.edit('link', _this3.preview.textContent);
          }
          event.preventDefault();
        });
        this.root.querySelector('a.ql-remove').addEventListener('click', function (event) {
          if (_this3.linkRange != null) {
            var range = _this3.linkRange;
            _this3.restoreFocus();
            _this3.quill.formatText(range, 'link', false, _emitter2.default.sources.USER);
            delete _this3.linkRange;
          }
          event.preventDefault();
          _this3.hide();
        });
        this.quill.on(_emitter2.default.events.SELECTION_CHANGE, function (range, oldRange, source) {
          if (range == null) return;
          if (range.length === 0 && source === _emitter2.default.sources.USER) {
            var _quill$scroll$descend = _this3.quill.scroll.descendant(_link2.default, range.index),
                _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2),
                link = _quill$scroll$descend2[0],
                offset = _quill$scroll$descend2[1];

            if (link != null) {
              _this3.linkRange = new _selection.Range(range.index - offset, link.length());
              var preview = _link2.default.formats(link.domNode);
              _this3.preview.textContent = preview;
              _this3.preview.setAttribute('href', preview);
              _this3.show();
              _this3.position(_this3.quill.getBounds(_this3.linkRange));
              return;
            }
          } else {
            delete _this3.linkRange;
          }
          _this3.hide();
        });
      }
    }, {
      key: 'show',
      value: function show() {
        _get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), 'show', this).call(this);
        this.root.removeAttribute('data-mode');
      }
    }]);

    return SnowTooltip;
  }(_base.BaseTooltip);

  SnowTooltip.TEMPLATE = ['<a class="ql-preview" target="_blank" href="about:blank"></a>', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-action"></a>', '<a class="ql-remove"></a>'].join('');

  exports.default = SnowTheme;

  /***/ }),
  /* 63 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _core = __webpack_require__(29);

  var _core2 = _interopRequireDefault(_core);

  var _align = __webpack_require__(36);

  var _direction = __webpack_require__(38);

  var _indent = __webpack_require__(64);

  var _blockquote = __webpack_require__(65);

  var _blockquote2 = _interopRequireDefault(_blockquote);

  var _header = __webpack_require__(66);

  var _header2 = _interopRequireDefault(_header);

  var _list = __webpack_require__(67);

  var _list2 = _interopRequireDefault(_list);

  var _background = __webpack_require__(37);

  var _color = __webpack_require__(26);

  var _font = __webpack_require__(39);

  var _size = __webpack_require__(40);

  var _bold = __webpack_require__(56);

  var _bold2 = _interopRequireDefault(_bold);

  var _italic = __webpack_require__(68);

  var _italic2 = _interopRequireDefault(_italic);

  var _link = __webpack_require__(27);

  var _link2 = _interopRequireDefault(_link);

  var _script = __webpack_require__(69);

  var _script2 = _interopRequireDefault(_script);

  var _strike = __webpack_require__(70);

  var _strike2 = _interopRequireDefault(_strike);

  var _underline = __webpack_require__(71);

  var _underline2 = _interopRequireDefault(_underline);

  var _image = __webpack_require__(72);

  var _image2 = _interopRequireDefault(_image);

  var _video = __webpack_require__(73);

  var _video2 = _interopRequireDefault(_video);

  var _code = __webpack_require__(13);

  var _code2 = _interopRequireDefault(_code);

  var _formula = __webpack_require__(74);

  var _formula2 = _interopRequireDefault(_formula);

  var _syntax = __webpack_require__(75);

  var _syntax2 = _interopRequireDefault(_syntax);

  var _toolbar = __webpack_require__(57);

  var _toolbar2 = _interopRequireDefault(_toolbar);

  var _icons = __webpack_require__(41);

  var _icons2 = _interopRequireDefault(_icons);

  var _picker = __webpack_require__(28);

  var _picker2 = _interopRequireDefault(_picker);

  var _colorPicker = __webpack_require__(59);

  var _colorPicker2 = _interopRequireDefault(_colorPicker);

  var _iconPicker = __webpack_require__(60);

  var _iconPicker2 = _interopRequireDefault(_iconPicker);

  var _tooltip = __webpack_require__(61);

  var _tooltip2 = _interopRequireDefault(_tooltip);

  var _bubble = __webpack_require__(108);

  var _bubble2 = _interopRequireDefault(_bubble);

  var _snow = __webpack_require__(62);

  var _snow2 = _interopRequireDefault(_snow);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  _core2.default.register({
    'attributors/attribute/direction': _direction.DirectionAttribute,

    'attributors/class/align': _align.AlignClass,
    'attributors/class/background': _background.BackgroundClass,
    'attributors/class/color': _color.ColorClass,
    'attributors/class/direction': _direction.DirectionClass,
    'attributors/class/font': _font.FontClass,
    'attributors/class/size': _size.SizeClass,

    'attributors/style/align': _align.AlignStyle,
    'attributors/style/background': _background.BackgroundStyle,
    'attributors/style/color': _color.ColorStyle,
    'attributors/style/direction': _direction.DirectionStyle,
    'attributors/style/font': _font.FontStyle,
    'attributors/style/size': _size.SizeStyle
  }, true);

  _core2.default.register({
    'formats/align': _align.AlignClass,
    'formats/direction': _direction.DirectionClass,
    'formats/indent': _indent.IndentClass,

    'formats/background': _background.BackgroundStyle,
    'formats/color': _color.ColorStyle,
    'formats/font': _font.FontClass,
    'formats/size': _size.SizeClass,

    'formats/blockquote': _blockquote2.default,
    'formats/code-block': _code2.default,
    'formats/header': _header2.default,
    'formats/list': _list2.default,

    'formats/bold': _bold2.default,
    'formats/code': _code.Code,
    'formats/italic': _italic2.default,
    'formats/link': _link2.default,
    'formats/script': _script2.default,
    'formats/strike': _strike2.default,
    'formats/underline': _underline2.default,

    'formats/image': _image2.default,
    'formats/video': _video2.default,

    'formats/list/item': _list.ListItem,

    'modules/formula': _formula2.default,
    'modules/syntax': _syntax2.default,
    'modules/toolbar': _toolbar2.default,

    'themes/bubble': _bubble2.default,
    'themes/snow': _snow2.default,

    'ui/icons': _icons2.default,
    'ui/picker': _picker2.default,
    'ui/icon-picker': _iconPicker2.default,
    'ui/color-picker': _colorPicker2.default,
    'ui/tooltip': _tooltip2.default
  }, true);

  exports.default = _core2.default;

  /***/ }),
  /* 64 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.IndentClass = undefined;

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var IdentAttributor = function (_Parchment$Attributor) {
    _inherits(IdentAttributor, _Parchment$Attributor);

    function IdentAttributor() {
      _classCallCheck(this, IdentAttributor);

      return _possibleConstructorReturn(this, (IdentAttributor.__proto__ || Object.getPrototypeOf(IdentAttributor)).apply(this, arguments));
    }

    _createClass(IdentAttributor, [{
      key: 'add',
      value: function add(node, value) {
        if (value === '+1' || value === '-1') {
          var indent = this.value(node) || 0;
          value = value === '+1' ? indent + 1 : indent - 1;
        }
        if (value === 0) {
          this.remove(node);
          return true;
        } else {
          return _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'add', this).call(this, node, value);
        }
      }
    }, {
      key: 'canAdd',
      value: function canAdd(node, value) {
        return _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'canAdd', this).call(this, node, value) || _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'canAdd', this).call(this, node, parseInt(value));
      }
    }, {
      key: 'value',
      value: function value(node) {
        return parseInt(_get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'value', this).call(this, node)) || undefined; // Don't return NaN
      }
    }]);

    return IdentAttributor;
  }(_parchment2.default.Attributor.Class);

  var IndentClass = new IdentAttributor('indent', 'ql-indent', {
    scope: _parchment2.default.Scope.BLOCK,
    whitelist: [1, 2, 3, 4, 5, 6, 7, 8]
  });

  exports.IndentClass = IndentClass;

  /***/ }),
  /* 65 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _block = __webpack_require__(4);

  var _block2 = _interopRequireDefault(_block);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Blockquote = function (_Block) {
    _inherits(Blockquote, _Block);

    function Blockquote() {
      _classCallCheck(this, Blockquote);

      return _possibleConstructorReturn(this, (Blockquote.__proto__ || Object.getPrototypeOf(Blockquote)).apply(this, arguments));
    }

    return Blockquote;
  }(_block2.default);

  Blockquote.blotName = 'blockquote';
  Blockquote.tagName = 'blockquote';

  exports.default = Blockquote;

  /***/ }),
  /* 66 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _block = __webpack_require__(4);

  var _block2 = _interopRequireDefault(_block);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Header = function (_Block) {
    _inherits(Header, _Block);

    function Header() {
      _classCallCheck(this, Header);

      return _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).apply(this, arguments));
    }

    _createClass(Header, null, [{
      key: 'formats',
      value: function formats(domNode) {
        return this.tagName.indexOf(domNode.tagName) + 1;
      }
    }]);

    return Header;
  }(_block2.default);

  Header.blotName = 'header';
  Header.tagName = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'];

  exports.default = Header;

  /***/ }),
  /* 67 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.ListItem = undefined;

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _block = __webpack_require__(4);

  var _block2 = _interopRequireDefault(_block);

  var _container = __webpack_require__(25);

  var _container2 = _interopRequireDefault(_container);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var ListItem = function (_Block) {
    _inherits(ListItem, _Block);

    function ListItem() {
      _classCallCheck(this, ListItem);

      return _possibleConstructorReturn(this, (ListItem.__proto__ || Object.getPrototypeOf(ListItem)).apply(this, arguments));
    }

    _createClass(ListItem, [{
      key: 'format',
      value: function format(name, value) {
        if (name === List.blotName && !value) {
          this.replaceWith(_parchment2.default.create(this.statics.scope));
        } else {
          _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'format', this).call(this, name, value);
        }
      }
    }, {
      key: 'remove',
      value: function remove() {
        if (this.prev == null && this.next == null) {
          this.parent.remove();
        } else {
          _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'remove', this).call(this);
        }
      }
    }, {
      key: 'replaceWith',
      value: function replaceWith(name, value) {
        this.parent.isolate(this.offset(this.parent), this.length());
        if (name === this.parent.statics.blotName) {
          this.parent.replaceWith(name, value);
          return this;
        } else {
          this.parent.unwrap();
          return _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'replaceWith', this).call(this, name, value);
        }
      }
    }], [{
      key: 'formats',
      value: function formats(domNode) {
        return domNode.tagName === this.tagName ? undefined : _get(ListItem.__proto__ || Object.getPrototypeOf(ListItem), 'formats', this).call(this, domNode);
      }
    }]);

    return ListItem;
  }(_block2.default);

  ListItem.blotName = 'list-item';
  ListItem.tagName = 'LI';

  var List = function (_Container) {
    _inherits(List, _Container);

    _createClass(List, null, [{
      key: 'create',
      value: function create(value) {
        var tagName = value === 'ordered' ? 'OL' : 'UL';
        var node = _get(List.__proto__ || Object.getPrototypeOf(List), 'create', this).call(this, tagName);
        if (value === 'checked' || value === 'unchecked') {
          node.setAttribute('data-checked', value === 'checked');
        }
        return node;
      }
    }, {
      key: 'formats',
      value: function formats(domNode) {
        if (domNode.tagName === 'OL') return 'ordered';
        if (domNode.tagName === 'UL') {
          if (domNode.hasAttribute('data-checked')) {
            return domNode.getAttribute('data-checked') === 'true' ? 'checked' : 'unchecked';
          } else {
            return 'bullet';
          }
        }
        return undefined;
      }
    }]);

    function List(domNode) {
      _classCallCheck(this, List);

      var _this2 = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this, domNode));

      var listEventHandler = function listEventHandler(e) {
        if (e.target.parentNode !== domNode) return;
        var format = _this2.statics.formats(domNode);
        var blot = _parchment2.default.find(e.target);
        if (format === 'checked') {
          blot.format('list', 'unchecked');
        } else if (format === 'unchecked') {
          blot.format('list', 'checked');
        }
      };

      domNode.addEventListener('touchstart', listEventHandler);
      domNode.addEventListener('mousedown', listEventHandler);
      return _this2;
    }

    _createClass(List, [{
      key: 'format',
      value: function format(name, value) {
        if (this.children.length > 0) {
          this.children.tail.format(name, value);
        }
      }
    }, {
      key: 'formats',
      value: function formats() {
        // We don't inherit from FormatBlot
        return _defineProperty({}, this.statics.blotName, this.statics.formats(this.domNode));
      }
    }, {
      key: 'insertBefore',
      value: function insertBefore(blot, ref) {
        if (blot instanceof ListItem) {
          _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'insertBefore', this).call(this, blot, ref);
        } else {
          var index = ref == null ? this.length() : ref.offset(this);
          var after = this.split(index);
          after.parent.insertBefore(blot, after);
        }
      }
    }, {
      key: 'optimize',
      value: function optimize(context) {
        _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'optimize', this).call(this, context);
        var next = this.next;
        if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && next.domNode.tagName === this.domNode.tagName && next.domNode.getAttribute('data-checked') === this.domNode.getAttribute('data-checked')) {
          next.moveChildren(this);
          next.remove();
        }
      }
    }, {
      key: 'replace',
      value: function replace(target) {
        if (target.statics.blotName !== this.statics.blotName) {
          var item = _parchment2.default.create(this.statics.defaultChild);
          target.moveChildren(item);
          this.appendChild(item);
        }
        _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'replace', this).call(this, target);
      }
    }]);

    return List;
  }(_container2.default);

  List.blotName = 'list';
  List.scope = _parchment2.default.Scope.BLOCK_BLOT;
  List.tagName = ['OL', 'UL'];
  List.defaultChild = 'list-item';
  List.allowedChildren = [ListItem];

  exports.ListItem = ListItem;
  exports.default = List;

  /***/ }),
  /* 68 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _bold = __webpack_require__(56);

  var _bold2 = _interopRequireDefault(_bold);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Italic = function (_Bold) {
    _inherits(Italic, _Bold);

    function Italic() {
      _classCallCheck(this, Italic);

      return _possibleConstructorReturn(this, (Italic.__proto__ || Object.getPrototypeOf(Italic)).apply(this, arguments));
    }

    return Italic;
  }(_bold2.default);

  Italic.blotName = 'italic';
  Italic.tagName = ['EM', 'I'];

  exports.default = Italic;

  /***/ }),
  /* 69 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _inline = __webpack_require__(6);

  var _inline2 = _interopRequireDefault(_inline);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Script = function (_Inline) {
    _inherits(Script, _Inline);

    function Script() {
      _classCallCheck(this, Script);

      return _possibleConstructorReturn(this, (Script.__proto__ || Object.getPrototypeOf(Script)).apply(this, arguments));
    }

    _createClass(Script, null, [{
      key: 'create',
      value: function create(value) {
        if (value === 'super') {
          return document.createElement('sup');
        } else if (value === 'sub') {
          return document.createElement('sub');
        } else {
          return _get(Script.__proto__ || Object.getPrototypeOf(Script), 'create', this).call(this, value);
        }
      }
    }, {
      key: 'formats',
      value: function formats(domNode) {
        if (domNode.tagName === 'SUB') return 'sub';
        if (domNode.tagName === 'SUP') return 'super';
        return undefined;
      }
    }]);

    return Script;
  }(_inline2.default);

  Script.blotName = 'script';
  Script.tagName = ['SUB', 'SUP'];

  exports.default = Script;

  /***/ }),
  /* 70 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _inline = __webpack_require__(6);

  var _inline2 = _interopRequireDefault(_inline);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Strike = function (_Inline) {
    _inherits(Strike, _Inline);

    function Strike() {
      _classCallCheck(this, Strike);

      return _possibleConstructorReturn(this, (Strike.__proto__ || Object.getPrototypeOf(Strike)).apply(this, arguments));
    }

    return Strike;
  }(_inline2.default);

  Strike.blotName = 'strike';
  Strike.tagName = 'S';

  exports.default = Strike;

  /***/ }),
  /* 71 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _inline = __webpack_require__(6);

  var _inline2 = _interopRequireDefault(_inline);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var Underline = function (_Inline) {
    _inherits(Underline, _Inline);

    function Underline() {
      _classCallCheck(this, Underline);

      return _possibleConstructorReturn(this, (Underline.__proto__ || Object.getPrototypeOf(Underline)).apply(this, arguments));
    }

    return Underline;
  }(_inline2.default);

  Underline.blotName = 'underline';
  Underline.tagName = 'U';

  exports.default = Underline;

  /***/ }),
  /* 72 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _link = __webpack_require__(27);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var ATTRIBUTES = ['alt', 'height', 'width'];

  var Image = function (_Parchment$Embed) {
    _inherits(Image, _Parchment$Embed);

    function Image() {
      _classCallCheck(this, Image);

      return _possibleConstructorReturn(this, (Image.__proto__ || Object.getPrototypeOf(Image)).apply(this, arguments));
    }

    _createClass(Image, [{
      key: 'format',
      value: function format(name, value) {
        if (ATTRIBUTES.indexOf(name) > -1) {
          if (value) {
            this.domNode.setAttribute(name, value);
          } else {
            this.domNode.removeAttribute(name);
          }
        } else {
          _get(Image.prototype.__proto__ || Object.getPrototypeOf(Image.prototype), 'format', this).call(this, name, value);
        }
      }
    }], [{
      key: 'create',
      value: function create(value) {
        var node = _get(Image.__proto__ || Object.getPrototypeOf(Image), 'create', this).call(this, value);
        if (typeof value === 'string') {
          node.setAttribute('src', this.sanitize(value));
        }
        return node;
      }
    }, {
      key: 'formats',
      value: function formats(domNode) {
        return ATTRIBUTES.reduce(function (formats, attribute) {
          if (domNode.hasAttribute(attribute)) {
            formats[attribute] = domNode.getAttribute(attribute);
          }
          return formats;
        }, {});
      }
    }, {
      key: 'match',
      value: function match(url) {
        return (/\.(jpe?g|gif|png)$/.test(url) || /^data:image\/.+;base64/.test(url)
        );
      }
    }, {
      key: 'sanitize',
      value: function sanitize(url) {
        return (0, _link.sanitize)(url, ['http', 'https', 'data']) ? url : '//:0';
      }
    }, {
      key: 'value',
      value: function value(domNode) {
        return domNode.getAttribute('src');
      }
    }]);

    return Image;
  }(_parchment2.default.Embed);

  Image.blotName = 'image';
  Image.tagName = 'IMG';

  exports.default = Image;

  /***/ }),
  /* 73 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _block = __webpack_require__(4);

  var _link = __webpack_require__(27);

  var _link2 = _interopRequireDefault(_link);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var ATTRIBUTES = ['height', 'width'];

  var Video = function (_BlockEmbed) {
    _inherits(Video, _BlockEmbed);

    function Video() {
      _classCallCheck(this, Video);

      return _possibleConstructorReturn(this, (Video.__proto__ || Object.getPrototypeOf(Video)).apply(this, arguments));
    }

    _createClass(Video, [{
      key: 'format',
      value: function format(name, value) {
        if (ATTRIBUTES.indexOf(name) > -1) {
          if (value) {
            this.domNode.setAttribute(name, value);
          } else {
            this.domNode.removeAttribute(name);
          }
        } else {
          _get(Video.prototype.__proto__ || Object.getPrototypeOf(Video.prototype), 'format', this).call(this, name, value);
        }
      }
    }], [{
      key: 'create',
      value: function create(value) {
        var node = _get(Video.__proto__ || Object.getPrototypeOf(Video), 'create', this).call(this, value);
        node.setAttribute('frameborder', '0');
        node.setAttribute('allowfullscreen', true);
        node.setAttribute('src', this.sanitize(value));
        return node;
      }
    }, {
      key: 'formats',
      value: function formats(domNode) {
        return ATTRIBUTES.reduce(function (formats, attribute) {
          if (domNode.hasAttribute(attribute)) {
            formats[attribute] = domNode.getAttribute(attribute);
          }
          return formats;
        }, {});
      }
    }, {
      key: 'sanitize',
      value: function sanitize(url) {
        return _link2.default.sanitize(url);
      }
    }, {
      key: 'value',
      value: function value(domNode) {
        return domNode.getAttribute('src');
      }
    }]);

    return Video;
  }(_block.BlockEmbed);

  Video.blotName = 'video';
  Video.className = 'ql-video';
  Video.tagName = 'IFRAME';

  exports.default = Video;

  /***/ }),
  /* 74 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.FormulaBlot = undefined;

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _embed = __webpack_require__(35);

  var _embed2 = _interopRequireDefault(_embed);

  var _quill = __webpack_require__(5);

  var _quill2 = _interopRequireDefault(_quill);

  var _module = __webpack_require__(9);

  var _module2 = _interopRequireDefault(_module);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var FormulaBlot = function (_Embed) {
    _inherits(FormulaBlot, _Embed);

    function FormulaBlot() {
      _classCallCheck(this, FormulaBlot);

      return _possibleConstructorReturn(this, (FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot)).apply(this, arguments));
    }

    _createClass(FormulaBlot, null, [{
      key: 'create',
      value: function create(value) {
        var node = _get(FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot), 'create', this).call(this, value);
        if (typeof value === 'string') {
          window.katex.render(value, node, {
            throwOnError: false,
            errorColor: '#f00'
          });
          node.setAttribute('data-value', value);
        }
        return node;
      }
    }, {
      key: 'value',
      value: function value(domNode) {
        return domNode.getAttribute('data-value');
      }
    }]);

    return FormulaBlot;
  }(_embed2.default);

  FormulaBlot.blotName = 'formula';
  FormulaBlot.className = 'ql-formula';
  FormulaBlot.tagName = 'SPAN';

  var Formula = function (_Module) {
    _inherits(Formula, _Module);

    _createClass(Formula, null, [{
      key: 'register',
      value: function register() {
        _quill2.default.register(FormulaBlot, true);
      }
    }]);

    function Formula() {
      _classCallCheck(this, Formula);

      var _this2 = _possibleConstructorReturn(this, (Formula.__proto__ || Object.getPrototypeOf(Formula)).call(this));

      if (window.katex == null) {
        throw new Error('Formula module requires KaTeX.');
      }
      return _this2;
    }

    return Formula;
  }(_module2.default);

  exports.FormulaBlot = FormulaBlot;
  exports.default = Formula;

  /***/ }),
  /* 75 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.CodeToken = exports.CodeBlock = undefined;

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _parchment = __webpack_require__(0);

  var _parchment2 = _interopRequireDefault(_parchment);

  var _quill = __webpack_require__(5);

  var _quill2 = _interopRequireDefault(_quill);

  var _module = __webpack_require__(9);

  var _module2 = _interopRequireDefault(_module);

  var _code = __webpack_require__(13);

  var _code2 = _interopRequireDefault(_code);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var SyntaxCodeBlock = function (_CodeBlock) {
    _inherits(SyntaxCodeBlock, _CodeBlock);

    function SyntaxCodeBlock() {
      _classCallCheck(this, SyntaxCodeBlock);

      return _possibleConstructorReturn(this, (SyntaxCodeBlock.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock)).apply(this, arguments));
    }

    _createClass(SyntaxCodeBlock, [{
      key: 'replaceWith',
      value: function replaceWith(block) {
        this.domNode.textContent = this.domNode.textContent;
        this.attach();
        _get(SyntaxCodeBlock.prototype.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock.prototype), 'replaceWith', this).call(this, block);
      }
    }, {
      key: 'highlight',
      value: function highlight(_highlight) {
        var text = this.domNode.textContent;
        if (this.cachedText !== text) {
          if (text.trim().length > 0 || this.cachedText == null) {
            this.domNode.innerHTML = _highlight(text);
            this.domNode.normalize();
            this.attach();
          }
          this.cachedText = text;
        }
      }
    }]);

    return SyntaxCodeBlock;
  }(_code2.default);

  SyntaxCodeBlock.className = 'ql-syntax';

  var CodeToken = new _parchment2.default.Attributor.Class('token', 'hljs', {
    scope: _parchment2.default.Scope.INLINE
  });

  var Syntax = function (_Module) {
    _inherits(Syntax, _Module);

    _createClass(Syntax, null, [{
      key: 'register',
      value: function register() {
        _quill2.default.register(CodeToken, true);
        _quill2.default.register(SyntaxCodeBlock, true);
      }
    }]);

    function Syntax(quill, options) {
      _classCallCheck(this, Syntax);

      var _this2 = _possibleConstructorReturn(this, (Syntax.__proto__ || Object.getPrototypeOf(Syntax)).call(this, quill, options));

      if (typeof _this2.options.highlight !== 'function') {
        throw new Error('Syntax module requires highlight.js. Please include the library on the page before Quill.');
      }
      var timer = null;
      _this2.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function () {
        clearTimeout(timer);
        timer = setTimeout(function () {
          _this2.highlight();
          timer = null;
        }, _this2.options.interval);
      });
      _this2.highlight();
      return _this2;
    }

    _createClass(Syntax, [{
      key: 'highlight',
      value: function highlight() {
        var _this3 = this;

        if (this.quill.selection.composing) return;
        this.quill.update(_quill2.default.sources.USER);
        var range = this.quill.getSelection();
        this.quill.scroll.descendants(SyntaxCodeBlock).forEach(function (code) {
          code.highlight(_this3.options.highlight);
        });
        this.quill.update(_quill2.default.sources.SILENT);
        if (range != null) {
          this.quill.setSelection(range, _quill2.default.sources.SILENT);
        }
      }
    }]);

    return Syntax;
  }(_module2.default);

  Syntax.DEFAULTS = {
    highlight: function () {
      if (window.hljs == null) return null;
      return function (text) {
        var result = window.hljs.highlightAuto(text);
        return result.value;
      };
    }(),
    interval: 1000
  };

  exports.CodeBlock = SyntaxCodeBlock;
  exports.CodeToken = CodeToken;
  exports.default = Syntax;

  /***/ }),
  /* 76 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=13 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=9 y1=4 y2=4></line> </svg>";

  /***/ }),
  /* 77 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=14 x2=4 y1=14 y2=14></line> <line class=ql-stroke x1=12 x2=6 y1=4 y2=4></line> </svg>";

  /***/ }),
  /* 78 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=5 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=9 y1=4 y2=4></line> </svg>";

  /***/ }),
  /* 79 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=3 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=3 y1=4 y2=4></line> </svg>";

  /***/ }),
  /* 80 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <g class=\"ql-fill ql-color-label\"> <polygon points=\"6 6.868 6 6 5 6 5 7 5.942 7 6 6.868\"></polygon> <rect height=1 width=1 x=4 y=4></rect> <polygon points=\"6.817 5 6 5 6 6 6.38 6 6.817 5\"></polygon> <rect height=1 width=1 x=2 y=6></rect> <rect height=1 width=1 x=3 y=5></rect> <rect height=1 width=1 x=4 y=7></rect> <polygon points=\"4 11.439 4 11 3 11 3 12 3.755 12 4 11.439\"></polygon> <rect height=1 width=1 x=2 y=12></rect> <rect height=1 width=1 x=2 y=9></rect> <rect height=1 width=1 x=2 y=15></rect> <polygon points=\"4.63 10 4 10 4 11 4.192 11 4.63 10\"></polygon> <rect height=1 width=1 x=3 y=8></rect> <path d=M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z></path> <path d=M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z></path> <path d=M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z></path> <rect height=1 width=1 x=12 y=2></rect> <rect height=1 width=1 x=11 y=3></rect> <path d=M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z></path> <rect height=1 width=1 x=2 y=3></rect> <rect height=1 width=1 x=6 y=2></rect> <rect height=1 width=1 x=3 y=2></rect> <rect height=1 width=1 x=5 y=3></rect> <rect height=1 width=1 x=9 y=2></rect> <rect height=1 width=1 x=15 y=14></rect> <polygon points=\"13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174\"></polygon> <rect height=1 width=1 x=13 y=7></rect> <rect height=1 width=1 x=15 y=5></rect> <rect height=1 width=1 x=14 y=6></rect> <rect height=1 width=1 x=15 y=8></rect> <rect height=1 width=1 x=14 y=9></rect> <path d=M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z></path> <rect height=1 width=1 x=14 y=3></rect> <polygon points=\"12 6.868 12 6 11.62 6 12 6.868\"></polygon> <rect height=1 width=1 x=15 y=2></rect> <rect height=1 width=1 x=12 y=5></rect> <rect height=1 width=1 x=13 y=4></rect> <polygon points=\"12.933 9 13 9 13 8 12.495 8 12.933 9\"></polygon> <rect height=1 width=1 x=9 y=14></rect> <rect height=1 width=1 x=8 y=15></rect> <path d=M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z></path> <rect height=1 width=1 x=5 y=15></rect> <path d=M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z></path> <rect height=1 width=1 x=11 y=15></rect> <path d=M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z></path> <rect height=1 width=1 x=14 y=15></rect> <rect height=1 width=1 x=15 y=11></rect> </g> <polyline class=ql-stroke points=\"5.5 13 9 5 12.5 13\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=11 y2=11></line> </svg>";

  /***/ }),
  /* 81 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=\"ql-fill ql-stroke\" height=3 width=3 x=4 y=5></rect> <rect class=\"ql-fill ql-stroke\" height=3 width=3 x=11 y=5></rect> <path class=\"ql-even ql-fill ql-stroke\" d=M7,8c0,4.031-3,5-3,5></path> <path class=\"ql-even ql-fill ql-stroke\" d=M14,8c0,4.031-3,5-3,5></path> </svg>";

  /***/ }),
  /* 82 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-stroke d=M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z></path> <path class=ql-stroke d=M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z></path> </svg>";

  /***/ }),
  /* 83 */
  /***/ (function(module, exports) {

  module.exports = "<svg class=\"\" viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=5 x2=13 y1=3 y2=3></line> <line class=ql-stroke x1=6 x2=9.35 y1=12 y2=3></line> <line class=ql-stroke x1=11 x2=15 y1=11 y2=15></line> <line class=ql-stroke x1=15 x2=11 y1=11 y2=15></line> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=7 x=2 y=14></rect> </svg>";

  /***/ }),
  /* 84 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=\"ql-color-label ql-stroke ql-transparent\" x1=3 x2=15 y1=15 y2=15></line> <polyline class=ql-stroke points=\"5.5 11 9 3 12.5 11\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=9 y2=9></line> </svg>";

  /***/ }),
  /* 85 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=\"ql-stroke ql-fill\" points=\"3 11 5 9 3 7 3 11\"></polygon> <line class=\"ql-stroke ql-fill\" x1=15 x2=11 y1=4 y2=4></line> <path class=ql-fill d=M11,3a3,3,0,0,0,0,6h1V3H11Z></path> <rect class=ql-fill height=11 width=1 x=11 y=4></rect> <rect class=ql-fill height=11 width=1 x=13 y=4></rect> </svg>";

  /***/ }),
  /* 86 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=\"ql-stroke ql-fill\" points=\"15 12 13 10 15 8 15 12\"></polygon> <line class=\"ql-stroke ql-fill\" x1=9 x2=5 y1=4 y2=4></line> <path class=ql-fill d=M5,3A3,3,0,0,0,5,9H6V3H5Z></path> <rect class=ql-fill height=11 width=1 x=5 y=4></rect> <rect class=ql-fill height=11 width=1 x=7 y=4></rect> </svg>";

  /***/ }),
  /* 87 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M14,16H4a1,1,0,0,1,0-2H14A1,1,0,0,1,14,16Z /> <path class=ql-fill d=M14,4H4A1,1,0,0,1,4,2H14A1,1,0,0,1,14,4Z /> <rect class=ql-fill x=3 y=6 width=12 height=6 rx=1 ry=1 /> </svg>";

  /***/ }),
  /* 88 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M13,16H5a1,1,0,0,1,0-2h8A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H5A1,1,0,0,1,5,2h8A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=2 y=6 width=14 height=6 rx=1 ry=1 /> </svg>";

  /***/ }),
  /* 89 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15,8H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,8Z /> <path class=ql-fill d=M15,12H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,12Z /> <path class=ql-fill d=M15,16H5a1,1,0,0,1,0-2H15A1,1,0,0,1,15,16Z /> <path class=ql-fill d=M15,4H5A1,1,0,0,1,5,2H15A1,1,0,0,1,15,4Z /> <rect class=ql-fill x=2 y=6 width=8 height=6 rx=1 ry=1 /> </svg>";

  /***/ }),
  /* 90 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M5,8H3A1,1,0,0,1,3,6H5A1,1,0,0,1,5,8Z /> <path class=ql-fill d=M5,12H3a1,1,0,0,1,0-2H5A1,1,0,0,1,5,12Z /> <path class=ql-fill d=M13,16H3a1,1,0,0,1,0-2H13A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H3A1,1,0,0,1,3,2H13A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=8 y=6 width=8 height=6 rx=1 ry=1 transform=\"translate(24 18) rotate(-180)\"/> </svg>";

  /***/ }),
  /* 91 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z></path> <rect class=ql-fill height=1.6 rx=0.8 ry=0.8 width=5 x=5.15 y=6.2></rect> <path class=ql-fill d=M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z></path> </svg>";

  /***/ }),
  /* 92 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewBox=\"0 0 18 18\"> <path class=ql-fill d=M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z /> </svg>";

  /***/ }),
  /* 93 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewBox=\"0 0 18 18\"> <path class=ql-fill d=M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z /> </svg>";

  /***/ }),
  /* 94 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=13 y1=4 y2=4></line> <line class=ql-stroke x1=5 x2=11 y1=14 y2=14></line> <line class=ql-stroke x1=8 x2=10 y1=14 y2=4></line> </svg>";

  /***/ }),
  /* 95 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=ql-stroke height=10 width=12 x=3 y=4></rect> <circle class=ql-fill cx=6 cy=7 r=1></circle> <polyline class=\"ql-even ql-fill\" points=\"5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12\"></polyline> </svg>";

  /***/ }),
  /* 96 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=\"ql-fill ql-stroke\" points=\"3 7 3 11 5 9 3 7\"></polyline> </svg>";

  /***/ }),
  /* 97 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\"5 7 5 11 3 9 5 7\"></polyline> </svg>";

  /***/ }),
  /* 98 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=11 y1=7 y2=11></line> <path class=\"ql-even ql-stroke\" d=M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z></path> <path class=\"ql-even ql-stroke\" d=M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z></path> </svg>";

  /***/ }),
  /* 99 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=7 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=7 x2=15 y1=14 y2=14></line> <line class=\"ql-stroke ql-thin\" x1=2.5 x2=4.5 y1=5.5 y2=5.5></line> <path class=ql-fill d=M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z></path> <path class=\"ql-stroke ql-thin\" d=M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156></path> <path class=\"ql-stroke ql-thin\" d=M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109></path> </svg>";

  /***/ }),
  /* 100 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=6 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=6 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=6 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=3 y1=4 y2=4></line> <line class=ql-stroke x1=3 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=3 y1=14 y2=14></line> </svg>";

  /***/ }),
  /* 101 */
  /***/ (function(module, exports) {

  module.exports = "<svg class=\"\" viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=9 x2=15 y1=4 y2=4></line> <polyline class=ql-stroke points=\"3 4 4 5 6 3\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=14 y2=14></line> <polyline class=ql-stroke points=\"3 14 4 15 6 13\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\"3 9 4 10 6 8\"></polyline> </svg>";

  /***/ }),
  /* 102 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z /> <path class=ql-fill d=M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z /> </svg>";

  /***/ }),
  /* 103 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z /> <path class=ql-fill d=M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z /> </svg>";

  /***/ }),
  /* 104 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=\"ql-stroke ql-thin\" x1=15.5 x2=2.5 y1=8.5 y2=9.5></line> <path class=ql-fill d=M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z></path> <path class=ql-fill d=M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z></path> </svg>";

  /***/ }),
  /* 105 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-stroke d=M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3></path> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=12 x=3 y=15></rect> </svg>";

  /***/ }),
  /* 106 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=ql-stroke height=12 width=12 x=3 y=3></rect> <rect class=ql-fill height=12 width=1 x=5 y=3></rect> <rect class=ql-fill height=12 width=1 x=12 y=3></rect> <rect class=ql-fill height=2 width=8 x=5 y=8></rect> <rect class=ql-fill height=1 width=3 x=3 y=5></rect> <rect class=ql-fill height=1 width=3 x=3 y=7></rect> <rect class=ql-fill height=1 width=3 x=3 y=10></rect> <rect class=ql-fill height=1 width=3 x=3 y=12></rect> <rect class=ql-fill height=1 width=3 x=12 y=5></rect> <rect class=ql-fill height=1 width=3 x=12 y=7></rect> <rect class=ql-fill height=1 width=3 x=12 y=10></rect> <rect class=ql-fill height=1 width=3 x=12 y=12></rect> </svg>";

  /***/ }),
  /* 107 */
  /***/ (function(module, exports) {

  module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=ql-stroke points=\"7 11 9 13 11 11 7 11\"></polygon> <polygon class=ql-stroke points=\"7 7 9 5 11 7 7 7\"></polygon> </svg>";

  /***/ }),
  /* 108 */
  /***/ (function(module, exports, __webpack_require__) {


  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.BubbleTooltip = undefined;

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _extend = __webpack_require__(3);

  var _extend2 = _interopRequireDefault(_extend);

  var _emitter = __webpack_require__(8);

  var _emitter2 = _interopRequireDefault(_emitter);

  var _base = __webpack_require__(43);

  var _base2 = _interopRequireDefault(_base);

  var _selection = __webpack_require__(15);

  var _icons = __webpack_require__(41);

  var _icons2 = _interopRequireDefault(_icons);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var TOOLBAR_CONFIG = [['bold', 'italic', 'link'], [{ header: 1 }, { header: 2 }, 'blockquote']];

  var BubbleTheme = function (_BaseTheme) {
    _inherits(BubbleTheme, _BaseTheme);

    function BubbleTheme(quill, options) {
      _classCallCheck(this, BubbleTheme);

      if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
        options.modules.toolbar.container = TOOLBAR_CONFIG;
      }

      var _this = _possibleConstructorReturn(this, (BubbleTheme.__proto__ || Object.getPrototypeOf(BubbleTheme)).call(this, quill, options));

      _this.quill.container.classList.add('ql-bubble');
      return _this;
    }

    _createClass(BubbleTheme, [{
      key: 'extendToolbar',
      value: function extendToolbar(toolbar) {
        this.tooltip = new BubbleTooltip(this.quill, this.options.bounds);
        this.tooltip.root.appendChild(toolbar.container);
        this.buildButtons([].slice.call(toolbar.container.querySelectorAll('button')), _icons2.default);
        this.buildPickers([].slice.call(toolbar.container.querySelectorAll('select')), _icons2.default);
      }
    }]);

    return BubbleTheme;
  }(_base2.default);

  BubbleTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {
    modules: {
      toolbar: {
        handlers: {
          link: function link(value) {
            if (!value) {
              this.quill.format('link', false);
            } else {
              this.quill.theme.tooltip.edit();
            }
          }
        }
      }
    }
  });

  var BubbleTooltip = function (_BaseTooltip) {
    _inherits(BubbleTooltip, _BaseTooltip);

    function BubbleTooltip(quill, bounds) {
      _classCallCheck(this, BubbleTooltip);

      var _this2 = _possibleConstructorReturn(this, (BubbleTooltip.__proto__ || Object.getPrototypeOf(BubbleTooltip)).call(this, quill, bounds));

      _this2.quill.on(_emitter2.default.events.EDITOR_CHANGE, function (type, range, oldRange, source) {
        if (type !== _emitter2.default.events.SELECTION_CHANGE) return;
        if (range != null && range.length > 0 && source === _emitter2.default.sources.USER) {
          _this2.show();
          // Lock our width so we will expand beyond our offsetParent boundaries
          _this2.root.style.left = '0px';
          _this2.root.style.width = '';
          _this2.root.style.width = _this2.root.offsetWidth + 'px';
          var lines = _this2.quill.getLines(range.index, range.length);
          if (lines.length === 1) {
            _this2.position(_this2.quill.getBounds(range));
          } else {
            var lastLine = lines[lines.length - 1];
            var index = _this2.quill.getIndex(lastLine);
            var length = Math.min(lastLine.length() - 1, range.index + range.length - index);
            var _bounds = _this2.quill.getBounds(new _selection.Range(index, length));
            _this2.position(_bounds);
          }
        } else if (document.activeElement !== _this2.textbox && _this2.quill.hasFocus()) {
          _this2.hide();
        }
      });
      return _this2;
    }

    _createClass(BubbleTooltip, [{
      key: 'listen',
      value: function listen() {
        var _this3 = this;

        _get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), 'listen', this).call(this);
        this.root.querySelector('.ql-close').addEventListener('click', function () {
          _this3.root.classList.remove('ql-editing');
        });
        this.quill.on(_emitter2.default.events.SCROLL_OPTIMIZE, function () {
          // Let selection be restored by toolbar handlers before repositioning
          setTimeout(function () {
            if (_this3.root.classList.contains('ql-hidden')) return;
            var range = _this3.quill.getSelection();
            if (range != null) {
              _this3.position(_this3.quill.getBounds(range));
            }
          }, 1);
        });
      }
    }, {
      key: 'cancel',
      value: function cancel() {
        this.show();
      }
    }, {
      key: 'position',
      value: function position(reference) {
        var shift = _get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), 'position', this).call(this, reference);
        var arrow = this.root.querySelector('.ql-tooltip-arrow');
        arrow.style.marginLeft = '';
        if (shift === 0) return shift;
        arrow.style.marginLeft = -1 * shift - arrow.offsetWidth / 2 + 'px';
      }
    }]);

    return BubbleTooltip;
  }(_base.BaseTooltip);

  BubbleTooltip.TEMPLATE = ['<span class="ql-tooltip-arrow"></span>', '<div class="ql-tooltip-editor">', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-close"></a>', '</div>'].join('');

  exports.BubbleTooltip = BubbleTooltip;
  exports.default = BubbleTheme;

  /***/ }),
  /* 109 */
  /***/ (function(module, exports, __webpack_require__) {

  module.exports = __webpack_require__(63);


  /***/ })
  /******/ ])["default"];
  });
  });

  var Quill = unwrapExports(quill);

  const provider = new WebsocketProvider(serverAddress);
  const ydocument = provider.get('quill');
  const ytext = ydocument.define('quill', YText);

  const quill$1 = new Quill('#quill-container', {
    modules: {
      toolbar: [
        [{ header: [1, 2, false] }],
        ['bold', 'italic', 'underline'],
        ['image', 'code-block'],
        [{ color: [] }, { background: [] }], // Snow theme fills in values
        [{ script: 'sub' }, { script: 'super' }],
        ['link', 'image'],
        ['link', 'code-block'],
        [{ list: 'ordered' }, { list: 'bullet' }]
      ]
    },
    placeholder: 'Compose an epic...',
    theme: 'snow' // or 'bubble'
  });

  window.quillBinding = new QuillBinding(ytext, quill$1);

}());
//# sourceMappingURL=quill.js.map
