 type mediabase_SW_FILENAMES { 
 filename: String!
 sw_filenames_key: ID!
} 
 type mediabase_SW_ANALYSIS { 
 avr_comment_size: Float
 avr_forms: Float
 avr_ftp_links: Float
 avr_html_size: Float
 avr_img_count: Float
 avr_img_embedded: Float
 avr_img_size: Float
 avr_img_usage: Float
 avr_input_form: Float
 avr_inputs: Float
 avr_int_links: Float
 avr_int_out_links: Float
 avr_link_size: Float
 avr_linked: Float
 avr_mailto_links: Float
 avr_out_links: Float
 avr_page_size: Float
 avr_plain_size: Float
 avr_script_size: Float
 date: String
 depth: Int
 file_count: Int
 file_extensions: String
 form_field_names: String
 generators: String
 html_count: Int
 id: ID!
 img_count: Int
 img_int_out_count: Int
 img_out_count: Int
 link_relations: String
 max_html_size: Int
 max_img_size: Int
 max_page_size: Int
 mime_types: String
 mirror_date: String
 other_count: Int
 other_int_out_count: Int
 other_out_count: Int
 project: Int!
 run_id: Int!
 total_comment_size: Int
 total_forms: Int
 total_ftp_links: Int
 total_html_size: Int
 total_img_embedded: Int
 total_img_size: Int
 total_inputs: Int
 total_int_links: Int
 total_int_out_links: Int
 total_link_size: Int
 total_mailto_links: Int
 total_out_links: Int
 total_plain_size: Int
 total_script_size: Int
 total_size: Int
 width: Int
} 
 type mediabase_SW_ANALYSIS_DEAD_PROJECT { 
 avr_comment_size: Float
 avr_forms: Float
 avr_ftp_links: Float
 avr_html_size: Float
 avr_img_count: Float
 avr_img_embedded: Float
 avr_img_size: Float
 avr_img_usage: Float
 avr_input_form: Float
 avr_inputs: Float
 avr_int_links: Float
 avr_int_out_links: Float
 avr_link_size: Float
 avr_linked: Float
 avr_mailto_links: Float
 avr_out_links: Float
 avr_page_size: Float
 avr_plain_size: Float
 avr_script_size: Float
 date: String
 depth: Int
 file_count: Int
 file_extensions: String
 form_field_names: String
 generators: String
 html_count: Int
 id: ID!
 img_count: Int
 img_int_out_count: Int
 img_out_count: Int
 link_relations: String
 max_html_size: Int
 max_img_size: Int
 max_page_size: Int
 mime_types: String
 mirror_date: String
 other_count: Int
 other_int_out_count: Int
 other_out_count: Int
 project: Int!
 run_id: Int!
 total_comment_size: Int
 total_forms: Int
 total_ftp_links: Int
 total_html_size: Int
 total_img_embedded: Int
 total_img_size: Int
 total_inputs: Int
 total_int_links: Int
 total_int_out_links: Int
 total_link_size: Int
 total_mailto_links: Int
 total_out_links: Int
 total_plain_size: Int
 total_script_size: Int
 total_size: Int
 width: Int
} 
 type mediabase_LW_MAILANALYSIS { 
 copy: String
 hea_refer: String
 hea_reply: String
 mail: ID!
 message_id: String!
 plaincontent: String
 project: Int
 received: String
 recipient: String
 reply_to: BigInteger
 sender: String
 sent: String
 subject: String
 top_mess: BigInteger
} 
 type mediabase_SW_RUN_TASKS { 
 ana_finished: String
 comments: String
 estimated_size: String!
 generated: String
 mirror_finished: String
 mirror_started: String
 phase: String!
 project: ID!
 run_id: ID!
} 
 type mediabase_SW_RUN_TASKS_DEAD_PROJECT { 
 ana_finished: String
 comments: String
 estimated_size: String!
 generated: String
 mirror_finished: String
 mirror_started: String
 phase: String!
 project: ID!
 run_id: ID!
} 
 type mediabase_PROJ_CORRESPONDENCE { 
 id_mavis: ID!
 id_watcher: ID!
 watcher_type: ID!
} 
 type mediabase_MAVIS_PROJECTS { 
 bezeichnung: String!
 description: String
 end: String
 id: ID!
 mitarbeiter: String
 name: String!
 start: String
 teilnehmer: String
 udc: String
 url: String
} 
 type mediabase_SW_TEMP { 
 category: String!
 date: String!
 difference: Int
 filename: String
 id: ID!
 index_flag: String
 projid: Int!
 screenshot_flag: String!
} 
 type mediabase_SW_SCREENSHOTS { 
 category: String!
 date: String!
 difference: Int
 filename: String
 id: ID!
 index_flag: String
 projid: Int!
 screenshot_flag: String!
} 
 type mediabase_SW_SCREENSHOTS_DEAD_PROJECT { 
 category: String!
 date: String!
 difference: Int
 filename: String
 id: ID!
 index_flag: String
 projid: Int!
 screenshot_flag: String!
} 
 type mediabase_NW_ENTRIES { 
 archivemail: String!
 content: String!
 copy: String
 date_of_insertion: String!
 encoding: String
 hea_refer: String
 hea_reply: String
 header: String!
 id: ID!
 message_id: String
 project: Int
 recipient: String
 sender: String
 sender_email: String
 sent: String
 subject: String
} 
 type mediabase_NW_USED_MIME_PARTS { 
 content: String
 dfs_nr: ID!
 mail: ID!
 mime_type: String!
 size: Int!
} 
 type mediabase_NW_URL_REFERENCES { 
 domain: String!
 mail: ID!
 path: String!
 plain_link: ID!
 protocol: String!
 query_string: String!
} 
 type mediabase_LW_URL_REFERENCES { 
 domain: String
 mail: ID!
 path: String
 plain_link: ID!
 protocol: String
 query_string: String
} 
 type mediabase_NW_PROJECTS { 
 crit_check: String
 crit_rec: String
 crit_sender: String
 crit_subject: String
 descr: String
 id: ID!
 language: String!
 last_change: String
 name: String!
 password: String
 proj_end: String
 proj_start: String
 udc: Int
 url: String
} 
 type mediabase_UD_CLASSIFICATION { 
 descr: String!
 id: ID!
} 
 type mediabase_SW_PROJECTS { 
 check_period: String!
 descr: String!
 exclude: String
 id: ID!
 int_look_up: String!
 language: String!
 name: String!
 possible_false_screenshots: String
 proj_end: String
 proj_start: String
 start_ip: String!
 start_url: String!
 total_change: Int
 udc: Int
} 
 type mediabase_FW_PROJECTS { 
 descr: String
 goodtouse: String
 id: ID!
 language: String
 name: String!
 proj_end: String
 proj_start: String!
 standard: String!
 udc: Int
 url: String!
} 
 type mediabase_LW_PROJECT_WORD_OF_DAY { 
 count: Int
 day: ID!
 language: String
 projid: ID!
 word: String
} 
 type mediabase_LW_PERSON_MAIL { 
 id: ID!
 mail: String
 mail_expression: String!
 person: String
} 
 type mediabase_SWAPIT_STOPWORDS_OLD { 
 id: ID!
 name: String!
 words: String!
} 
 type mediabase_WORD_OF_DAY_STOPWORDS { 
 id: ID!
 language: String!
 name: String!
 words: String!
} 
 type mediabase_EGRAECULI { 
 mailid: ID!
 swprojid: Int
 swprojname: String
 url: ID!
} 
 type mediabase_LW_WORD_OF_DAY { 
 count: Int!
 day: ID!
 language: ID!
 word: String!
} 
 type mediabase_LW_PROJECTS_MONTH_ANALYSIS { 
 cnt_active_mail_senders: Int
 cnt_mails_per_month: Int
 month: ID!
 project: ID!
 year: ID!
} 
 type mediabase_LW_THREAD_TREE { 
 depth: Int!
 mail: BigInteger
 order: Int!
 thread: BigInteger!
} 
 type mediabase_NW_PROJECT_REGEX_CHECK { 
 last_check: ID!
 project: ID!
} 
 type mediabase_LW_PROJECT_REGEX_CHECK { 
 last_check: ID!
 project: ID!
} 
 type mediabase_T20060606_084327 { 
 author: String
 comments: String
 descr: String!
 entry: Int!
 guid: String
 id: ID!
 link: String
 title: String!
} 
 type mediabase_FW_ATOM_ENTRIES { 
 author: String
 content: String!
 id: ID!
 link: String
 subtitle: String
 title: String!
 updated: String!
 uri: String!
 version: String
} 
 type mediabase_LW_PROJECTS { 
 crit_check: String
 crit_rec: String
 crit_sender: String
 crit_subject: String
 descr: String
 id: ID!
 language: String
 last_change: String
 name: String!
 password: String
 proj_end: String
 proj_start: String
 udc: Int
 url: String
} 
 type mediabase_PROJ_LANG { 
 id: Int!
 language: String!
} 
 type mediabase_UDC { 
 id: ID!
 name: String!
} 
 type mediabase_SUB_UDC { 
 sub_udc_id: ID!
 sub_udc_name: String!
 udc_id: ID!
} 
 type mediabase_SUB_UDC_RELATION { 
 mavis_project_id: ID!
 sub_udc_id: ID!
 udc_id: ID!
} 
 type mediabase_FW_RSS_RUN { 
 entryid: ID!
 projid: ID!
 rundate: ID!
} 
 type mediabase_FW_ATOM_RUN { 
 entryid: ID!
 projid: ID!
 rundate: ID!
} 
 type mediabase_LW_PROJECT_ANALYSIS_TEMP { 
 avr_mail_per_day: String
 avr_mpd_variance: String
 cnt_active_mail_senders: Int
 cnt_mails_today: Int
 cnt_mails_total: Int
 largest_inactivity_gap: Int
 last_email: BigInteger
 project: ID!
} 
 type mediabase_LW_ENTRIES { 
 archivemail: String!
 content: String!
 copy: String
 date_of_insertion: String!
 encoding: String
 hea_refer: String
 hea_reply: String
 header: String!
 id: ID!
 message_id: String
 project: Int
 recipient: String
 reply_to: BigInteger
 sender: String
 sender_email: String
 sent: String
 subject: String
 top_mess: BigInteger
} 
 type mediabase_LW_USED_MIME_PARTS { 
 content: String
 dfs_nr: ID!
 mail: ID!
 mime_type: String
 size: Int!
} 
 type mediabase_FW_ATOM_ENTRYITEMCONNECT { 
 entryid: ID!
 itemid: ID!
} 
 type mediabase_FW_RSS_ENTRYITEMCONNECT { 
 entryid: ID!
 itemid: ID!
} 
 type mediabase_FW_RSS_ITEMS { 
 author: String
 comments: String
 descr: String!
 guid: String
 id: ID!
 link: String
 title: String!
} 
 type mediabase_T20060606_084327_EXCEPTION { 
 author: String
 comments: String
 descr: String!
 guid: String
 id: Int!
 link: String
 title: String!
} 
 type mediabase_FW_ATOM_ITEMS { 
 author: String
 content: String
 id: ID!
 link: String
 summary: String
 title: String!
 updated: String
 uri: String
} 
 type mediabase_FW_RSS_ENTRIES { 
 content: String!
 descr: String!
 id: ID!
 image: String
 image_type: String
 language: String
 link: String
 pubdate: String
 title: String
 ttl: Int
 version: String
} 
 type mediabase_LW_ENTRIES_TT { 
 archivemail: String!
 content: String!
 copy: String
 date_of_insertion: String!
 encoding: String
 hea_refer: String
 hea_reply: String
 header: String!
 id: BigInteger!
 message_id: String
 project: Int
 recipient: String
 reply_to: BigInteger
 sender: String
 sender_email: String
 sent: String
 subject: String
 top_mess: BigInteger
} 
 type mediabase_TEMP_LW_MONTH_ANALYSIS { 
 cnt_active_mail_senders: Int
 cnt_mails_per_month: Int
 month: ID!
 project: ID!
 year: ID!
} 
 type mediabase_EXPLAIN_INSTANCE { 
 avg_appls: Int!
 block: String!
 buffpage: Int!
 comm_speed: String!
 cpu_speed: String!
 datajoiner: String!
 db2_version: String!
 dbheap: Int!
 explain_option: String!
 explain_requester: ID!
 explain_time: ID!
 isolation: String!
 locklist: Int!
 locks_avail: Int!
 maxlocks: Int!
 parallelism: String!
 queryopt: Int!
 remarks: String
 snapshot_taken: String!
 sortheap: Int!
 source_name: ID!
 source_schema: ID!
 source_version: ID!
 sql_type: String!
} 
 type mediabase_EXPLAIN_STATEMENT { 
 deletable: String!
 explain_level: ID!
 explain_requester: ID!
 explain_time: ID!
 query_degree: Int!
 queryno: Int!
 querytag: String!
 sectno: ID!
 snapshot: String
 source_name: ID!
 source_schema: ID!
 source_version: ID!
 statement_text: String!
 statement_type: String!
 stmtno: ID!
 total_cost: String!
 updatable: String!
} 
 type mediabase_EXPLAIN_ARGUMENT { 
 argument_type: String!
 argument_value: String
 explain_level: String!
 explain_requester: String!
 explain_time: String!
 long_argument_value: String
 operator_id: Int!
 sectno: Int!
 source_name: String!
 source_schema: String!
 source_version: String!
 stmtno: Int!
} 
 type mediabase_EXPLAIN_OBJECT { 
 active_blocks: BigInteger!
 average_random_fetch_pages: String!
 average_random_pages: String!
 average_sequence_fetch_gap: String!
 average_sequence_fetch_pages: String!
 average_sequence_gap: String!
 average_sequence_pages: String!
 cluster: String!
 column_count: Int!
 create_time: String
 density: Int!
 distinct: String!
 explain_level: String!
 explain_requester: String!
 explain_time: String!
 extentsize: Int!
 first2keycard: BigInteger!
 first3keycard: BigInteger!
 first4keycard: BigInteger!
 firstkeycard: BigInteger!
 fullkeycard: BigInteger!
 nleaf: Int!
 nlevels: Int!
 num_empty_leafs: BigInteger!
 numrids: BigInteger!
 numrids_deleted: BigInteger!
 object_name: String!
 object_schema: String!
 object_type: String!
 overflow: Int!
 overhead: String!
 pages: Int!
 prefetchsize: Int!
 row_count: BigInteger!
 sectno: Int!
 sequential_pages: Int!
 source_name: String!
 source_schema: String!
 source_version: String!
 statistics_time: String
 stats_src: String!
 stmtno: Int!
 tablespace_name: String
 transfer_rate: String!
 width: Int!
} 
 type mediabase_EXPLAIN_OPERATOR { 
 buffers: String!
 comm_cost: String!
 cpu_cost: String!
 explain_level: String!
 explain_requester: String!
 explain_time: String!
 first_comm_cost: String!
 first_row_cost: String!
 io_cost: String!
 operator_id: Int!
 operator_type: String!
 re_cpu_cost: String!
 re_io_cost: String!
 re_total_cost: String!
 remote_comm_cost: String!
 remote_total_cost: String!
 sectno: Int!
 source_name: String!
 source_schema: String!
 source_version: String!
 stmtno: Int!
 total_cost: String!
} 
 type mediabase_EXPLAIN_PREDICATE { 
 explain_level: String!
 explain_requester: String!
 explain_time: String!
 filter_factor: String!
 how_applied: String!
 operator_id: Int!
 predicate_id: Int!
 predicate_text: String
 relop_type: String!
 sectno: Int!
 source_name: String!
 source_schema: String!
 source_version: String!
 stmtno: Int!
 subquery: String!
 when_evaluated: String!
} 
 type mediabase_EXPLAIN_STREAM { 
 column_count: Int!
 column_names: String
 explain_level: String!
 explain_requester: String!
 explain_time: String!
 object_name: String
 object_schema: String
 partition_columns: String
 pmid: Int!
 predicate_id: Int!
 sectno: Int!
 single_node: String
 source_id: Int!
 source_name: String!
 source_schema: String!
 source_type: String!
 source_version: String!
 stmtno: Int!
 stream_count: String!
 stream_id: Int!
 target_id: Int!
 target_type: String!
} 
 type mediabase_ADVISE_INSTANCE { 
 end_time: String!
 mode: String!
 start_time: ID!
 status: String!
 wkld_compression: String!
} 
 type mediabase_ADVISE_INDEX { 
 clusterfactor: String!
 clusterratio: Int!
 colcount: Int!
 colnames: String!
 converted: String!
 create_time: String!
 creation_text: String!
 creator: String!
 definer: String!
 density: Int!
 exists: String!
 explain_level: String!
 explain_requester: String!
 explain_time: String!
 first2keycard: BigInteger!
 first3keycard: BigInteger!
 first4keycard: BigInteger!
 firstkeycard: BigInteger!
 fullkeycard: BigInteger!
 iid: Int!
 indextype: String!
 minpctused: Int!
 name: String!
 nleaf: Int!
 nlevels: Int!
 packed_desc: String
 page_fetch_pairs: String!
 pctfree: Int!
 queryno: Int!
 querytag: String!
 remarks: String
 reverse_scans: String!
 ridtoblock: String!
 run_id: String
 sectno: Int!
 sequential_pages: Int!
 source_name: String!
 source_schema: String!
 source_version: String!
 stats_time: String
 stmtno: Int!
 system_required: Int!
 tbcreator: String!
 tbname: String!
 unique_colcount: Int!
 uniquerule: String!
 use_index: String
 userdefined: Int!
} 
 type mediabase_ADVISE_WORKLOAD { 
 compilable: String
 cost_after: String
 cost_before: String
 frequency: Int!
 importance: String!
 statement_no: Int!
 statement_tag: String!
 statement_text: String!
 weight: String!
 workload_name: String!
} 
 type mediabase_ADVISE_MQT { 
 benefit: String!
 colstats: String!
 create_time: String!
 creation_text: String!
 creator: String!
 exists: String!
 explain_level: String!
 explain_requester: String!
 explain_time: String!
 extra_info: String!
 iid: Int!
 mqt_source: String
 name: String!
 numcols: Int!
 numrows: String!
 query_text: String!
 refresh_type: String!
 rowsize: String!
 run_id: String
 sample_text: String!
 sectno: Int!
 source_name: String!
 source_schema: String!
 source_version: String!
 stats_time: String
 stmtno: Int!
 tbspace: String!
 use_mqt: String
} 
 type mediabase_ADVISE_PARTITION { 
 colcount: Int!
 colnames: String!
 cost: String!
 explain_level: String!
 explain_requester: String!
 explain_time: String!
 pmid: Int!
 queryno: Int!
 querytag: String!
 replicate: String!
 run_id: String
 sectno: Int!
 source_name: String!
 source_schema: String!
 source_version: String!
 stmtno: Int!
 tbcreator: String!
 tbname: String!
 tbspace: String!
 useit: String
} 
 type mediabase_ADVISE_TABLE { 
 alter_command: String!
 creation_text: String!
 diskuse: String!
 gen_columns: String!
 organize_by: String!
 run_id: String
 selection_flag: String!
 table_exists: String!
 table_name: String!
 table_schema: String!
 tablespace: String!
 use_table: String!
} 
 type mediabase_REGIST_INFO { 
 acatitle: String
 address: String
 attendance: String
 city: String
 comments: String
 company: String
 country: Int
 department: String
 email: String
 event_id: Int
 fax: String
 fee: String
 firstname: String
 id: ID!
 lastname: String
 phone: String
 postcode: String
 registdate: String
 title: String
 username: String
 workshop: String
} 
 type mediabase_EVENT { 
 end: String
 id: ID!
 start: String
 title: String
} 
 type mediabase_LW_PROJECT_ANALYSIS { 
 avethrddepth: String
 avr_mail_per_day: String
 avr_mpd_variance: String
 cnt_active_mail_senders: Int
 cnt_mails_today: Int
 cnt_mails_total: Int
 largest_inactivity_gap: Int
 last_email: BigInteger
 nrpeople: BigInteger
 nrthread: BigInteger
 nrtopmess: BigInteger
 project: ID!
 wrdpermail: String
} 
 type mediabase_LW_PERSON_ADDR { 
 id: ID!
 paddr: String!
 pname: String
 project: BigInteger!
} 
 type mediabase_COUNTRY { 
 abbrcaption: String
 caption: String
 code: String
 id: ID!
} 
 type mediabase_CONTACTS { 
 created_on: String
 id: ID!
 name: String
 updated_on: String
} 
 type mediabase_BW_AUTHOR { 
 authorname: String!
 authorurl: String
 id: ID!
} 
 type mediabase_BW_COMMENT { 
 author_id: Int!
 content_chunk: String!
 date: String!
 entry_id: Int!
 id: ID!
} 
 type mediabase_BW_MULTIMEDIA { 
 entry_id: Int!
 id: ID!
 mime: String!
 multimedia: String!
} 
 type mediabase_BW_REFERENCES { 
 entry_id: Int!
 id: ID!
 type: Int
 url: String!
} 
 type mediabase_BW_TRACKBACKS { 
 entry_id: Int!
 id: ID!
 title_trackback: String
 url: String!
} 
 type mediabase_BW_ENTRIES { 
 author_id: Int
 commentlink: String
 content: String
 content_chunk: String!
 date: String!
 id: ID!
 mood: String
 perma_link: String
 project_id: Int!
 title: String
 trackback_url: String
} 
 type mediabase_BW_PROJECTS { 
 category: Int
 descr: String
 fw_project: Int
 id: ID!
 language: String
 name: String
 proj_end: String
 proj_start: String
 proj_update: String
 url: String!
} 
 type mediabase_LW_WOTD { 
 date: String!
 id: ID!
 ignore: String
 max_word: Int
 text_c: Int
 text_total: Int
 value: Int
 word: String!
 word_c: Int
} 
 type mediabase_SWAPIT_COLLECTIONS { 
 coll_status: String
 description: String
 docs_count: Int
 end_date: String
 id: ID!
 language: String
 name: String!
 proj_ids: String!
 start_date: String
 structuring_status: String
} 
 type mediabase_SWAPIT_STOPWORDS { 
 coll_id: Int!
 id: ID!
 words: String
} 
 type mediabase_FW_CHECKOFCHANGE_HELP { 
 content: String!
} 
type mediabase_TABLE_METADATA {
schema: String!
name: String!
columns: [String]
}
 type las2peer_SW_FILENAMES { 
 filename: String!
 sw_filenames_key: ID!
} 
 type las2peer_SW_ANALYSIS { 
 avr_comment_size: Float
 avr_forms: Float
 avr_ftp_links: Float
 avr_html_size: Float
 avr_img_count: Float
 avr_img_embedded: Float
 avr_img_size: Float
 avr_img_usage: Float
 avr_input_form: Float
 avr_inputs: Float
 avr_int_links: Float
 avr_int_out_links: Float
 avr_link_size: Float
 avr_linked: Float
 avr_mailto_links: Float
 avr_out_links: Float
 avr_page_size: Float
 avr_plain_size: Float
 avr_script_size: Float
 date: String
 depth: Int
 file_count: Int
 file_extensions: String
 form_field_names: String
 generators: String
 html_count: Int
 id: ID!
 img_count: Int
 img_int_out_count: Int
 img_out_count: Int
 link_relations: String
 max_html_size: Int
 max_img_size: Int
 max_page_size: Int
 mime_types: String
 mirror_date: String
 other_count: Int
 other_int_out_count: Int
 other_out_count: Int
 project: Int!
 run_id: Int!
 total_comment_size: Int
 total_forms: Int
 total_ftp_links: Int
 total_html_size: Int
 total_img_embedded: Int
 total_img_size: Int
 total_inputs: Int
 total_int_links: Int
 total_int_out_links: Int
 total_link_size: Int
 total_mailto_links: Int
 total_out_links: Int
 total_plain_size: Int
 total_script_size: Int
 total_size: Int
 width: Int
} 
 type las2peer_SW_ANALYSIS_DEAD_PROJECT { 
 avr_comment_size: Float
 avr_forms: Float
 avr_ftp_links: Float
 avr_html_size: Float
 avr_img_count: Float
 avr_img_embedded: Float
 avr_img_size: Float
 avr_img_usage: Float
 avr_input_form: Float
 avr_inputs: Float
 avr_int_links: Float
 avr_int_out_links: Float
 avr_link_size: Float
 avr_linked: Float
 avr_mailto_links: Float
 avr_out_links: Float
 avr_page_size: Float
 avr_plain_size: Float
 avr_script_size: Float
 date: String
 depth: Int
 file_count: Int
 file_extensions: String
 form_field_names: String
 generators: String
 html_count: Int
 id: ID!
 img_count: Int
 img_int_out_count: Int
 img_out_count: Int
 link_relations: String
 max_html_size: Int
 max_img_size: Int
 max_page_size: Int
 mime_types: String
 mirror_date: String
 other_count: Int
 other_int_out_count: Int
 other_out_count: Int
 project: Int!
 run_id: Int!
 total_comment_size: Int
 total_forms: Int
 total_ftp_links: Int
 total_html_size: Int
 total_img_embedded: Int
 total_img_size: Int
 total_inputs: Int
 total_int_links: Int
 total_int_out_links: Int
 total_link_size: Int
 total_mailto_links: Int
 total_out_links: Int
 total_plain_size: Int
 total_script_size: Int
 total_size: Int
 width: Int
} 
 type las2peer_LW_MAILANALYSIS { 
 copy: String
 hea_refer: String
 hea_reply: String
 mail: ID!
 message_id: String!
 plaincontent: String
 project: Int
 received: String
 recipient: String
 reply_to: BigInteger
 sender: String
 sent: String
 subject: String
 top_mess: BigInteger
} 
 type las2peer_SW_RUN_TASKS { 
 ana_finished: String
 comments: String
 estimated_size: String!
 generated: String
 mirror_finished: String
 mirror_started: String
 phase: String!
 project: ID!
 run_id: ID!
} 
 type las2peer_SW_RUN_TASKS_DEAD_PROJECT { 
 ana_finished: String
 comments: String
 estimated_size: String!
 generated: String
 mirror_finished: String
 mirror_started: String
 phase: String!
 project: ID!
 run_id: ID!
} 
 type las2peer_PROJ_CORRESPONDENCE { 
 id_mavis: ID!
 id_watcher: ID!
 watcher_type: ID!
} 
 type las2peer_MAVIS_PROJECTS { 
 bezeichnung: String!
 description: String
 end: String
 id: ID!
 mitarbeiter: String
 name: String!
 start: String
 teilnehmer: String
 udc: String
 url: String
} 
 type las2peer_SW_TEMP { 
 category: String!
 date: String!
 difference: Int
 filename: String
 id: ID!
 index_flag: String
 projid: Int!
 screenshot_flag: String!
} 
 type las2peer_SW_SCREENSHOTS { 
 category: String!
 date: String!
 difference: Int
 filename: String
 id: ID!
 index_flag: String
 projid: Int!
 screenshot_flag: String!
} 
 type las2peer_SW_SCREENSHOTS_DEAD_PROJECT { 
 category: String!
 date: String!
 difference: Int
 filename: String
 id: ID!
 index_flag: String
 projid: Int!
 screenshot_flag: String!
} 
 type las2peer_NW_ENTRIES { 
 archivemail: String!
 content: String!
 copy: String
 date_of_insertion: String!
 encoding: String
 hea_refer: String
 hea_reply: String
 header: String!
 id: ID!
 message_id: String
 project: Int
 recipient: String
 sender: String
 sender_email: String
 sent: String
 subject: String
} 
 type las2peer_NW_USED_MIME_PARTS { 
 content: String
 dfs_nr: ID!
 mail: ID!
 mime_type: String!
 size: Int!
} 
 type las2peer_NW_URL_REFERENCES { 
 domain: String!
 mail: ID!
 path: String!
 plain_link: ID!
 protocol: String!
 query_string: String!
} 
 type las2peer_LW_URL_REFERENCES { 
 domain: String
 mail: ID!
 path: String
 plain_link: ID!
 protocol: String
 query_string: String
} 
 type las2peer_NW_PROJECTS { 
 crit_check: String
 crit_rec: String
 crit_sender: String
 crit_subject: String
 descr: String
 id: ID!
 language: String!
 last_change: String
 name: String!
 password: String
 proj_end: String
 proj_start: String
 udc: Int
 url: String
} 
 type las2peer_UD_CLASSIFICATION { 
 descr: String!
 id: ID!
} 
 type las2peer_SW_PROJECTS { 
 check_period: String!
 descr: String!
 exclude: String
 id: ID!
 int_look_up: String!
 language: String!
 name: String!
 possible_false_screenshots: String
 proj_end: String
 proj_start: String
 start_ip: String!
 start_url: String!
 total_change: Int
 udc: Int
} 
 type las2peer_FW_PROJECTS { 
 descr: String
 goodtouse: String
 id: ID!
 language: String
 name: String!
 proj_end: String
 proj_start: String!
 standard: String!
 udc: Int
 url: String!
} 
 type las2peer_LW_PROJECT_WORD_OF_DAY { 
 count: Int
 day: ID!
 language: String
 projid: ID!
 word: String
} 
 type las2peer_LW_PERSON_MAIL { 
 id: ID!
 mail: String
 mail_expression: String!
 person: String
} 
 type las2peer_SWAPIT_STOPWORDS_OLD { 
 id: ID!
 name: String!
 words: String!
} 
 type las2peer_WORD_OF_DAY_STOPWORDS { 
 id: ID!
 language: String!
 name: String!
 words: String!
} 
 type las2peer_EGRAECULI { 
 mailid: ID!
 swprojid: Int
 swprojname: String
 url: ID!
} 
 type las2peer_LW_WORD_OF_DAY { 
 count: Int!
 day: ID!
 language: ID!
 word: String!
} 
 type las2peer_LW_PROJECTS_MONTH_ANALYSIS { 
 cnt_active_mail_senders: Int
 cnt_mails_per_month: Int
 month: ID!
 project: ID!
 year: ID!
} 
 type las2peer_LW_THREAD_TREE { 
 depth: Int!
 mail: BigInteger
 order: Int!
 thread: BigInteger!
} 
 type las2peer_NW_PROJECT_REGEX_CHECK { 
 last_check: ID!
 project: ID!
} 
 type las2peer_LW_PROJECT_REGEX_CHECK { 
 last_check: ID!
 project: ID!
} 
 type las2peer_T20060606_084327 { 
 author: String
 comments: String
 descr: String!
 entry: Int!
 guid: String
 id: ID!
 link: String
 title: String!
} 
 type las2peer_FW_ATOM_ENTRIES { 
 author: String
 content: String!
 id: ID!
 link: String
 subtitle: String
 title: String!
 updated: String!
 uri: String!
 version: String
} 
 type las2peer_LW_PROJECTS { 
 crit_check: String
 crit_rec: String
 crit_sender: String
 crit_subject: String
 descr: String
 id: ID!
 language: String
 last_change: String
 name: String!
 password: String
 proj_end: String
 proj_start: String
 udc: Int
 url: String
} 
 type las2peer_PROJ_LANG { 
 id: Int!
 language: String!
} 
 type las2peer_UDC { 
 id: ID!
 name: String!
} 
 type las2peer_SUB_UDC { 
 sub_udc_id: ID!
 sub_udc_name: String!
 udc_id: ID!
} 
 type las2peer_SUB_UDC_RELATION { 
 mavis_project_id: ID!
 sub_udc_id: ID!
 udc_id: ID!
} 
 type las2peer_FW_RSS_RUN { 
 entryid: ID!
 projid: ID!
 rundate: ID!
} 
 type las2peer_FW_ATOM_RUN { 
 entryid: ID!
 projid: ID!
 rundate: ID!
} 
 type las2peer_LW_PROJECT_ANALYSIS_TEMP { 
 avr_mail_per_day: String
 avr_mpd_variance: String
 cnt_active_mail_senders: Int
 cnt_mails_today: Int
 cnt_mails_total: Int
 largest_inactivity_gap: Int
 last_email: BigInteger
 project: ID!
} 
 type las2peer_LW_ENTRIES { 
 archivemail: String!
 content: String!
 copy: String
 date_of_insertion: String!
 encoding: String
 hea_refer: String
 hea_reply: String
 header: String!
 id: ID!
 message_id: String
 project: Int
 recipient: String
 reply_to: BigInteger
 sender: String
 sender_email: String
 sent: String
 subject: String
 top_mess: BigInteger
} 
 type las2peer_LW_USED_MIME_PARTS { 
 content: String
 dfs_nr: ID!
 mail: ID!
 mime_type: String
 size: Int!
} 
 type las2peer_FW_ATOM_ENTRYITEMCONNECT { 
 entryid: ID!
 itemid: ID!
} 
 type las2peer_FW_RSS_ENTRYITEMCONNECT { 
 entryid: ID!
 itemid: ID!
} 
 type las2peer_FW_RSS_ITEMS { 
 author: String
 comments: String
 descr: String!
 guid: String
 id: ID!
 link: String
 title: String!
} 
 type las2peer_T20060606_084327_EXCEPTION { 
 author: String
 comments: String
 descr: String!
 guid: String
 id: Int!
 link: String
 title: String!
} 
 type las2peer_FW_ATOM_ITEMS { 
 author: String
 content: String
 id: ID!
 link: String
 summary: String
 title: String!
 updated: String
 uri: String
} 
 type las2peer_FW_RSS_ENTRIES { 
 content: String!
 descr: String!
 id: ID!
 image: String
 image_type: String
 language: String
 link: String
 pubdate: String
 title: String
 ttl: Int
 version: String
} 
 type las2peer_LW_ENTRIES_TT { 
 archivemail: String!
 content: String!
 copy: String
 date_of_insertion: String!
 encoding: String
 hea_refer: String
 hea_reply: String
 header: String!
 id: BigInteger!
 message_id: String
 project: Int
 recipient: String
 reply_to: BigInteger
 sender: String
 sender_email: String
 sent: String
 subject: String
 top_mess: BigInteger
} 
 type las2peer_TEMP_LW_MONTH_ANALYSIS { 
 cnt_active_mail_senders: Int
 cnt_mails_per_month: Int
 month: ID!
 project: ID!
 year: ID!
} 
 type las2peer_EXPLAIN_INSTANCE { 
 avg_appls: Int!
 block: String!
 buffpage: Int!
 comm_speed: String!
 cpu_speed: String!
 datajoiner: String!
 db2_version: String!
 dbheap: Int!
 explain_option: String!
 explain_requester: ID!
 explain_time: ID!
 isolation: String!
 locklist: Int!
 locks_avail: Int!
 maxlocks: Int!
 parallelism: String!
 queryopt: Int!
 remarks: String
 snapshot_taken: String!
 sortheap: Int!
 source_name: ID!
 source_schema: ID!
 source_version: ID!
 sql_type: String!
} 
 type las2peer_EXPLAIN_STATEMENT { 
 deletable: String!
 explain_level: ID!
 explain_requester: ID!
 explain_time: ID!
 query_degree: Int!
 queryno: Int!
 querytag: String!
 sectno: ID!
 snapshot: String
 source_name: ID!
 source_schema: ID!
 source_version: ID!
 statement_text: String!
 statement_type: String!
 stmtno: ID!
 total_cost: String!
 updatable: String!
} 
 type las2peer_EXPLAIN_ARGUMENT { 
 argument_type: String!
 argument_value: String
 explain_level: String!
 explain_requester: String!
 explain_time: String!
 long_argument_value: String
 operator_id: Int!
 sectno: Int!
 source_name: String!
 source_schema: String!
 source_version: String!
 stmtno: Int!
} 
 type las2peer_EXPLAIN_OBJECT { 
 active_blocks: BigInteger!
 average_random_fetch_pages: String!
 average_random_pages: String!
 average_sequence_fetch_gap: String!
 average_sequence_fetch_pages: String!
 average_sequence_gap: String!
 average_sequence_pages: String!
 cluster: String!
 column_count: Int!
 create_time: String
 density: Int!
 distinct: String!
 explain_level: String!
 explain_requester: String!
 explain_time: String!
 extentsize: Int!
 first2keycard: BigInteger!
 first3keycard: BigInteger!
 first4keycard: BigInteger!
 firstkeycard: BigInteger!
 fullkeycard: BigInteger!
 nleaf: Int!
 nlevels: Int!
 num_empty_leafs: BigInteger!
 numrids: BigInteger!
 numrids_deleted: BigInteger!
 object_name: String!
 object_schema: String!
 object_type: String!
 overflow: Int!
 overhead: String!
 pages: Int!
 prefetchsize: Int!
 row_count: BigInteger!
 sectno: Int!
 sequential_pages: Int!
 source_name: String!
 source_schema: String!
 source_version: String!
 statistics_time: String
 stats_src: String!
 stmtno: Int!
 tablespace_name: String
 transfer_rate: String!
 width: Int!
} 
 type las2peer_EXPLAIN_OPERATOR { 
 buffers: String!
 comm_cost: String!
 cpu_cost: String!
 explain_level: String!
 explain_requester: String!
 explain_time: String!
 first_comm_cost: String!
 first_row_cost: String!
 io_cost: String!
 operator_id: Int!
 operator_type: String!
 re_cpu_cost: String!
 re_io_cost: String!
 re_total_cost: String!
 remote_comm_cost: String!
 remote_total_cost: String!
 sectno: Int!
 source_name: String!
 source_schema: String!
 source_version: String!
 stmtno: Int!
 total_cost: String!
} 
 type las2peer_EXPLAIN_PREDICATE { 
 explain_level: String!
 explain_requester: String!
 explain_time: String!
 filter_factor: String!
 how_applied: String!
 operator_id: Int!
 predicate_id: Int!
 predicate_text: String
 relop_type: String!
 sectno: Int!
 source_name: String!
 source_schema: String!
 source_version: String!
 stmtno: Int!
 subquery: String!
 when_evaluated: String!
} 
 type las2peer_EXPLAIN_STREAM { 
 column_count: Int!
 column_names: String
 explain_level: String!
 explain_requester: String!
 explain_time: String!
 object_name: String
 object_schema: String
 partition_columns: String
 pmid: Int!
 predicate_id: Int!
 sectno: Int!
 single_node: String
 source_id: Int!
 source_name: String!
 source_schema: String!
 source_type: String!
 source_version: String!
 stmtno: Int!
 stream_count: String!
 stream_id: Int!
 target_id: Int!
 target_type: String!
} 
 type las2peer_ADVISE_INSTANCE { 
 end_time: String!
 mode: String!
 start_time: ID!
 status: String!
 wkld_compression: String!
} 
 type las2peer_ADVISE_INDEX { 
 clusterfactor: String!
 clusterratio: Int!
 colcount: Int!
 colnames: String!
 converted: String!
 create_time: String!
 creation_text: String!
 creator: String!
 definer: String!
 density: Int!
 exists: String!
 explain_level: String!
 explain_requester: String!
 explain_time: String!
 first2keycard: BigInteger!
 first3keycard: BigInteger!
 first4keycard: BigInteger!
 firstkeycard: BigInteger!
 fullkeycard: BigInteger!
 iid: Int!
 indextype: String!
 minpctused: Int!
 name: String!
 nleaf: Int!
 nlevels: Int!
 packed_desc: String
 page_fetch_pairs: String!
 pctfree: Int!
 queryno: Int!
 querytag: String!
 remarks: String
 reverse_scans: String!
 ridtoblock: String!
 run_id: String
 sectno: Int!
 sequential_pages: Int!
 source_name: String!
 source_schema: String!
 source_version: String!
 stats_time: String
 stmtno: Int!
 system_required: Int!
 tbcreator: String!
 tbname: String!
 unique_colcount: Int!
 uniquerule: String!
 use_index: String
 userdefined: Int!
} 
 type las2peer_ADVISE_WORKLOAD { 
 compilable: String
 cost_after: String
 cost_before: String
 frequency: Int!
 importance: String!
 statement_no: Int!
 statement_tag: String!
 statement_text: String!
 weight: String!
 workload_name: String!
} 
 type las2peer_ADVISE_MQT { 
 benefit: String!
 colstats: String!
 create_time: String!
 creation_text: String!
 creator: String!
 exists: String!
 explain_level: String!
 explain_requester: String!
 explain_time: String!
 extra_info: String!
 iid: Int!
 mqt_source: String
 name: String!
 numcols: Int!
 numrows: String!
 query_text: String!
 refresh_type: String!
 rowsize: String!
 run_id: String
 sample_text: String!
 sectno: Int!
 source_name: String!
 source_schema: String!
 source_version: String!
 stats_time: String
 stmtno: Int!
 tbspace: String!
 use_mqt: String
} 
 type las2peer_ADVISE_PARTITION { 
 colcount: Int!
 colnames: String!
 cost: String!
 explain_level: String!
 explain_requester: String!
 explain_time: String!
 pmid: Int!
 queryno: Int!
 querytag: String!
 replicate: String!
 run_id: String
 sectno: Int!
 source_name: String!
 source_schema: String!
 source_version: String!
 stmtno: Int!
 tbcreator: String!
 tbname: String!
 tbspace: String!
 useit: String
} 
 type las2peer_ADVISE_TABLE { 
 alter_command: String!
 creation_text: String!
 diskuse: String!
 gen_columns: String!
 organize_by: String!
 run_id: String
 selection_flag: String!
 table_exists: String!
 table_name: String!
 table_schema: String!
 tablespace: String!
 use_table: String!
} 
 type las2peer_REGIST_INFO { 
 acatitle: String
 address: String
 attendance: String
 city: String
 comments: String
 company: String
 country: Int
 department: String
 email: String
 event_id: Int
 fax: String
 fee: String
 firstname: String
 id: ID!
 lastname: String
 phone: String
 postcode: String
 registdate: String
 title: String
 username: String
 workshop: String
} 
 type las2peer_EVENT { 
 end: String
 id: ID!
 start: String
 title: String
} 
 type las2peer_LW_PROJECT_ANALYSIS { 
 avethrddepth: String
 avr_mail_per_day: String
 avr_mpd_variance: String
 cnt_active_mail_senders: Int
 cnt_mails_today: Int
 cnt_mails_total: Int
 largest_inactivity_gap: Int
 last_email: BigInteger
 nrpeople: BigInteger
 nrthread: BigInteger
 nrtopmess: BigInteger
 project: ID!
 wrdpermail: String
} 
 type las2peer_LW_PERSON_ADDR { 
 id: ID!
 paddr: String!
 pname: String
 project: BigInteger!
} 
 type las2peer_COUNTRY { 
 abbrcaption: String
 caption: String
 code: String
 id: ID!
} 
 type las2peer_CONTACTS { 
 created_on: String
 id: ID!
 name: String
 updated_on: String
} 
 type las2peer_BW_AUTHOR { 
 authorname: String!
 authorurl: String
 id: ID!
} 
 type las2peer_BW_COMMENT { 
 author_id: Int!
 content_chunk: String!
 date: String!
 entry_id: Int!
 id: ID!
} 
 type las2peer_BW_MULTIMEDIA { 
 entry_id: Int!
 id: ID!
 mime: String!
 multimedia: String!
} 
 type las2peer_BW_REFERENCES { 
 entry_id: Int!
 id: ID!
 type: Int
 url: String!
} 
 type las2peer_BW_TRACKBACKS { 
 entry_id: Int!
 id: ID!
 title_trackback: String
 url: String!
} 
 type las2peer_BW_ENTRIES { 
 author_id: Int
 commentlink: String
 content: String
 content_chunk: String!
 date: String!
 id: ID!
 mood: String
 perma_link: String
 project_id: Int!
 title: String
 trackback_url: String
} 
 type las2peer_BW_PROJECTS { 
 category: Int
 descr: String
 fw_project: Int
 id: ID!
 language: String
 name: String
 proj_end: String
 proj_start: String
 proj_update: String
 url: String!
} 
 type las2peer_LW_WOTD { 
 date: String!
 id: ID!
 ignore: String
 max_word: Int
 text_c: Int
 text_total: Int
 value: Int
 word: String!
 word_c: Int
} 
 type las2peer_SWAPIT_COLLECTIONS { 
 coll_status: String
 description: String
 docs_count: Int
 end_date: String
 id: ID!
 language: String
 name: String!
 proj_ids: String!
 start_date: String
 structuring_status: String
} 
 type las2peer_SWAPIT_STOPWORDS { 
 coll_id: Int!
 id: ID!
 words: String
} 
 type las2peer_FW_CHECKOFCHANGE_HELP { 
 content: String!
} 
type las2peer_TABLE_METADATA {
schema: String!
name: String!
columns: [String]
}